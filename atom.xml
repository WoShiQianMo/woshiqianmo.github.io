<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://woshiqianmo.github.io/atom.xml" rel="self"/>
  
  <link href="https://woshiqianmo.github.io/"/>
  <updated>2021-05-03T10:28:15.683Z</updated>
  <id>https://woshiqianmo.github.io/</id>
  
  <author>
    <name>浅陌</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>03-Spring中的循环依赖与代理方式讲解</title>
    <link href="https://woshiqianmo.github.io/2021/05/03/Spring/03-Spring%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E4%B8%8E%E4%BB%A3%E7%90%86%E6%96%B9%E5%BC%8F%E8%AE%B2%E8%A7%A3/"/>
    <id>https://woshiqianmo.github.io/2021/05/03/Spring/03-Spring%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E4%B8%8E%E4%BB%A3%E7%90%86%E6%96%B9%E5%BC%8F%E8%AE%B2%E8%A7%A3/</id>
    <published>2021-05-03T10:09:01.000Z</published>
    <updated>2021-05-03T10:28:15.683Z</updated>
    
    <content type="html"><![CDATA[<h5 id="循环依赖的bean"><a href="#循环依赖的bean" class="headerlink" title="循环依赖的bean"></a>循环依赖的bean</h5><h6 id="构造器注入循环依赖"><a href="#构造器注入循环依赖" class="headerlink" title="构造器注入循环依赖"></a>构造器注入循环依赖</h6><p>当循环依赖的bean都是通过<strong>构造器注入依赖</strong>的时候，无论这些bean是singleton还是prototype，在获取bean的时候都会失败。</p><h5 id="通过属性注入"><a href="#通过属性注入" class="headerlink" title="通过属性注入"></a>通过属性注入</h5><ul><li>循环依赖的bean都是singleton 成功</li><li>循环依赖的bean都是prototype 失败</li><li>同时有singleton和prototype 当先获取的那个bean是singleton时，就会成功，否则失败</li></ul><p><img src="file:///C:\Users\QianMo\AppData\Local\Temp\ksohtml8328\wps1.jpg" alt="img"></p><p>目的：避免循环引用</p><ul><li>当Spring容器在创建A时，会发现其引用了B，从而会先去创建B。同样的，创建B时，会先去创建C，而创建C时，又先去创建A。最后A、B、C之间互相等待，谁都没法创建成功（单例模式对象，在Spring中直接实例化，prototype的会检查引用，如果有引用对象没被实例化，暂停实例化，去实例化引用对象）引用对象：scope=”prototype”</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;循环依赖的bean&quot;&gt;&lt;a href=&quot;#循环依赖的bean&quot; class=&quot;headerlink&quot; title=&quot;循环依赖的bean&quot;&gt;&lt;/a&gt;循环依赖的bean&lt;/h5&gt;&lt;h6 id=&quot;构造器注入循环依赖&quot;&gt;&lt;a href=&quot;#构造器注入循环依赖&quot; class</summary>
      
    
    
    
    <category term="Spring基础" scheme="https://woshiqianmo.github.io/categories/Spring%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Spring基础" scheme="https://woshiqianmo.github.io/tags/Spring%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>02-Maven构建SpringAOP</title>
    <link href="https://woshiqianmo.github.io/2021/05/03/Spring/02-Maven%E6%9E%84%E5%BB%BASpringAOP/"/>
    <id>https://woshiqianmo.github.io/2021/05/03/Spring/02-Maven%E6%9E%84%E5%BB%BASpringAOP/</id>
    <published>2021-05-03T07:28:33.000Z</published>
    <updated>2021-05-03T10:04:40.568Z</updated>
    
    <content type="html"><![CDATA[<p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baize.spring<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Spring01<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>spring stu<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;applicationContext-*.xml&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 对象属性 Spring 会调起 对象的 set方法  来 DI --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;human,star&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.baize.spring.Person&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>qianmo<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;food&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;food&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;food&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.baize.spring.Food&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;person2&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Food.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baize.spring;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> QianMo</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Food</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> String name;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baize.spring;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> QianMo</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><span class="hljs-keyword">private</span> Food food;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Food <span class="hljs-title">getFood</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> food;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFood</span><span class="hljs-params">(Food food)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.food = food;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.age = age;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>TestGetBean.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baize.spring;<br><br><span class="hljs-keyword">import</span> org.apache.commons.lang3.builder.ToStringBuilder;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> QianMo</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestGetBean</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>ClassPathXmlApplicationContext ctx = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>Person person1 = ctx.getBean(<span class="hljs-string">&quot;person&quot;</span>,Person.class);<br>System.out.println(ToStringBuilder.reflectionToString(person1));<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>SpringMVC：controller、service、dao 使用单例，有线程并发问题，使用ThreadLocal解决线程安全问题</p><p>ThreadLocal：线程隔离，解决线程安全问题</p><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;applicationContext-*.xml&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 对象属性 Spring 会调起 对象的 set方法  来 DI --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;human,star&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.baize.spring.Person&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>马小六<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;food&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;food&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>                <br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;set&quot;</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    &lt;map&gt;</span><br><span class="hljs-comment">    &lt;entry key=&quot;a&quot; value=&quot;1&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">    &lt;entry key=&quot;b&quot; value=&quot;2&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">    &lt;entry key=&quot;b&quot; value=&quot;2&quot;&gt;&lt;/entry&gt;</span><br><span class="hljs-comment">    &lt;/map&gt;</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gift&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span><br>        douban=http://douban.com/movie/xx.html<br>        paoniu=100,<br>        dushu=200<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;food&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mashibing.spring.Food&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;person2&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>TestGetBean.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baize.spring;<br><br><br><span class="hljs-keyword">import</span> org.apache.commons.lang3.builder.ToStringBuilder;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestGetBean</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>ClassPathXmlApplicationContext ctx = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>Person person1 = ctx.getBean(<span class="hljs-string">&quot;person&quot;</span>,Person.class);<br>System.out.println(ToStringBuilder.reflectionToString(person1));<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="空值注入"><a href="#空值注入" class="headerlink" title="空值注入"></a>空值注入</h1><h2 id="Value标签"><a href="#Value标签" class="headerlink" title="Value标签"></a>Value标签</h2><p>标识空值 或空字符串 “”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Null标签"><a href="#Null标签" class="headerlink" title="Null标签"></a>Null标签</h2><p>标识Null</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">null</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">null</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="工厂方式注入"><a href="#工厂方式注入" class="headerlink" title="工厂方式注入"></a>工厂方式注入</h1><p>为满足更复杂的需求，Spring也提供了工厂方式来创建更加灵活的Bean。</p><p><strong>留意观察工厂类和实现类的创建次数</strong></p><h2 id="动态工厂静态工厂"><a href="#动态工厂静态工厂" class="headerlink" title="动态工厂静态工厂"></a>动态工厂静态工厂</h2><p>Bean配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;carStatic&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.msb.CarFactoryStatic&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getCar&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;bmw&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CarFactoryStatic</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Car <span class="hljs-title">getCar</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br><br><span class="hljs-keyword">if</span> (name.endsWith(<span class="hljs-string">&quot;bmw&quot;</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Bmw();<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;car not fond&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="autowire自动注入"><a href="#autowire自动注入" class="headerlink" title="autowire自动注入"></a>autowire自动注入</h1><p>使用自动需要在配置文件中bean上添加<strong>autowire</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.msb.Person&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pet&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.msb.Pet&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;kele&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>实体</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> Pet pet;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pet</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> String name;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可选两种类型</p><h2 id="byName"><a href="#byName" class="headerlink" title="byName"></a>byName</h2><p>byName方式自动注入：要求注入的bean的id必须和被注入的bean对象的属性名一致</p><h2 id="byType"><a href="#byType" class="headerlink" title="byType"></a>byType</h2><p>byType方式自动注入：要求注入的bean的对象类型与被注入的bean对象类型一致，并且在配置文件中的Bean相同类型必须唯一</p><p>如果存在多个，会抛异常：</p><p>No qualifying bean of type ‘com.msb.Pet’ available: expected single matching bean but found 2: pet,pet2</p><h2 id="全局自动注入"><a href="#全局自动注入" class="headerlink" title="全局自动注入"></a>全局自动注入</h2><p>在首行Beans标签下添加default-autowire属性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">default-autowire</span>=<span class="hljs-string">&quot;byType&quot;</span></span><br><span class="hljs-tag">&gt;</span><br><br></code></pre></td></tr></table></figure><h1 id="annotation注解注入"><a href="#annotation注解注入" class="headerlink" title="annotation注解注入"></a>annotation注解注入</h1><p>使用注解需要导入AOP包</p><p>在配置文件中添加Context约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">&quot;</span></span><br><span class="hljs-tag">&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="context-component-scan"><a href="#context-component-scan" class="headerlink" title="context:component-scan"></a><strong><a href="context:component-scan">context:component-scan</a></strong></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.msb&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>component-scan</strong>可以自动扫描包内容，并注册Bean到Spring容器</p><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><p>在需要注册到容器的类上添加@Component标签，标识这个类由Spring容器接管</p><h3 id="约定大于配置"><a href="#约定大于配置" class="headerlink" title="约定大于配置"></a>约定大于配置</h3><p>在一个类上添加@Component默认会使用首字母小写的类名作为ID注册到Spring容器。</p><p>如果需要手动指定Bean Id可以使用**@Component(“p”)**</p><h3 id="同属-Component的额外三个注解"><a href="#同属-Component的额外三个注解" class="headerlink" title="同属@Component的额外三个注解"></a>同属@Component的额外三个注解</h3><p>@Controller @Service @Repository</p><p>这三个注意在MVC开发中会经常用到，除了注解名字和Component不一样之外，其余功能都一样。</p><p>Spring额外提供这三个注解的目的主要是为了区分MVC中每个类的区别。</p><h2 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h2><p>使用注解注册Bean 默认的作用域还是singleton，可以使用@Scope(“prototype”)改变对象作用域</p><h2 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h2><p>在使用注解给对象注入值的时候，不再需要Get/Set方法</p><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><p>使用@Value注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;小明&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br></code></pre></td></tr></table></figure><h3 id="对象引用"><a href="#对象引用" class="headerlink" title="对象引用"></a>对象引用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> Pet MyPet;<br></code></pre></td></tr></table></figure><p>使用@Autowired注解</p><p>默认是ByType的，如果需要ByName需要配合@Qualifier注解</p><p>applicationContext.xml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span><br><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br> &lt;!--<br> 动态工厂 每次都是<span class="hljs-keyword">new</span>出来的<br>        &lt;bean id=<span class="hljs-string">&quot;carFactory&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.baize.spring.CarFactory&quot;</span>&gt;<br>        <br>        &lt;property name=&quot;name&quot;  value=&quot;audi&quot;&gt;&lt;/property&gt; <br>        &lt;/bean&gt;<br>        <br>        &lt;bean id=<span class="hljs-string">&quot;car&quot;</span> factory-bean=<span class="hljs-string">&quot;carFactory&quot;</span> factory-method=<span class="hljs-string">&quot;getCar&quot;</span>&gt;<br>        需要set方法<br>        <br>        &lt;/bean&gt; --&gt;<br>        <br>        &lt;bean id=<span class="hljs-string">&quot;car&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.baize.spring.CarFactory&quot;</span> factory-method=<span class="hljs-string">&quot;getCar&quot;</span> &gt;<br>        &lt;constructor-arg value=&quot;audi&quot;&gt;&lt;/constructor-arg&gt;<br>        &lt;/bean&gt;<br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure><p>Audi.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baize.spring;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Audi</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Car</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是奥迪A7&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPrice</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;700000&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Car.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baize.spring;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Car</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPrice</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Bmw.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baize.spring;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bmw</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Car</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;BMW 7&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPrice</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;700000w&quot;</span>;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>CarFactory.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baize.spring;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CarFactory</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CarFactory</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br>System.out.println(<span class="hljs-string">&quot;CarFactory&quot;</span>);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Car <span class="hljs-title">getCar</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br><span class="hljs-keyword">if</span> (name.equals(<span class="hljs-string">&quot;audi&quot;</span>)) &#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Audi();<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;暂时没法生产这辆车&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>TestGetBean.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baize.spring;<br><br><span class="hljs-keyword">import</span> org.apache.commons.lang3.builder.ToStringBuilder;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestGetBean</span> </span>&#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Spring 对对象的生产来说 一共就两种</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 1. 单例 singleton -&gt; ws request session application -&gt; 生命周期绑定 2. new出来的</span><br><span class="hljs-comment"> * prototype</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>ClassPathXmlApplicationContext ctx = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><br><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//try &#123;</span><br><span class="hljs-comment">//Car car = CarFactory.getCar(&quot;audi&quot;);</span><br><span class="hljs-comment">//System.out.println(car.getName());</span><br><span class="hljs-comment">//&#125; catch (Exception e) &#123;</span><br><span class="hljs-comment">//// TODO Auto-generated catch block</span><br><span class="hljs-comment">//e.printStackTrace();</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//</span><br>Car car = ctx.getBean(<span class="hljs-string">&quot;car&quot;</span>,Car.class);<br>System.out.println(car.getName());<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;pom.xml&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b</summary>
      
    
    
    
    <category term="Spring基础" scheme="https://woshiqianmo.github.io/categories/Spring%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Spring基础" scheme="https://woshiqianmo.github.io/tags/Spring%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>01-SpringIoc入门与详解</title>
    <link href="https://woshiqianmo.github.io/2021/05/03/Spring/01-SpringIoc%E5%85%A5%E9%97%A8%E4%B8%8E%E8%AF%A6%E8%A7%A3/"/>
    <id>https://woshiqianmo.github.io/2021/05/03/Spring/01-SpringIoc%E5%85%A5%E9%97%A8%E4%B8%8E%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-05-03T06:56:04.000Z</published>
    <updated>2021-05-03T07:34:45.468Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Spring能做什么？"><a href="#Spring能做什么？" class="headerlink" title="Spring能做什么？"></a>Spring能做什么？</h4><p>Spring是一个轻量级的控制反转（IoC/di）和面向切面编程(AOP) 的对象容器框架</p><p>Spring官网：<a href="http://spring.io/">http://spring.io/</a> </p><p>Spring 是一个于 2003 年兴起的一个轻量级的 Java 开源开发框架</p><p>如今Spring已是Java项目的标配，它极大的简化了开发过程，降低了开发难度。</p><ul><li><p>方便解耦，简化开发；</p></li><li><p>AOP 编程的支持；</p></li><li><p>声明式事务的支持；</p></li><li><p>方便程序的测试；</p></li><li><p>方便集成各种优秀框架。</p></li></ul><p><strong>IoC</strong></p><p>Inversion of Control</p><p><strong>AOP</strong> </p><p>Aspect Oriented Programming </p><h5 id="Spring5新特性"><a href="#Spring5新特性" class="headerlink" title="Spring5新特性"></a>Spring5新特性</h5><p>Spring5 是一个重要的版本，距离SpringFramework4差不多四年</p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/697648C621B74D2B923D92396E2A3CE0/98" alt="Spring5新特性">                     </p><ul><li>支持JDK8<ul><li>Spring 接口中的默认方法</li><li>基于 Java8 反射增强的内部代码改进</li><li>在框架代码中使用函数式编程 - lambda表达式 和 stream流</li></ul></li><li>响应式编程支持Spring Web Reactive异步的、非阻塞的、事件驱动的服务</li><li>支持J2EE7<ul><li>Servlet 3.1</li><li>JMS 2.0</li><li>JPA 2.1</li><li>JAX-RS 2.0</li></ul></li><li>Bean Validation 1.1</li><li>Hibernate 5</li><li>Jackson 2.6</li><li>EhCache 2.10</li><li>JUnit 5</li><li>Tiles 3</li><li>Kotlin</li></ul><h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><h5 id="Spring-Jar包"><a href="#Spring-Jar包" class="headerlink" title="Spring Jar包"></a>Spring Jar包</h5><h6 id="SpringFramework官网下载地址："><a href="#SpringFramework官网下载地址：" class="headerlink" title="SpringFramework官网下载地址："></a>SpringFramework官网下载地址：</h6><p><a href="https://repo.spring.io/libs-release-local/org/springframework/spring/">https://repo.spring.io/libs-release-local/org/springframework/spring/</a></p><p>解压缩Jar包可以看见如下结构</p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/60CEC59226CD477AB8AAAFA3A1A630E6/101" alt="解压缩jar包可以看到如图结构"></p><ul><li><p> Doc  文档 </p></li><li><p> Libs Jar包</p></li><li><p> Schema XML约束</p></li><li><p> license.txt 许可协议</p></li><li><p> notice.txt 注意事项</p></li><li><p> readme.txt 读我</p></li></ul><h5 id="常用Jar包"><a href="#常用Jar包" class="headerlink" title="常用Jar包"></a>常用Jar包</h5><table><thead><tr><th>spring-core</th><th>框架的基础功能，包括IOC和AOP功能</th></tr></thead><tbody><tr><td>spring-aspects</td><td>提供了与AspectJ的集成，AspectJ是一个面向切面的框架，它扩展了Java语言。AspectJ定义了AOP语法，它有一个专门的编译器用来生成遵守Java字节编码规范的Class文件。</td></tr><tr><td>spring-beans</td><td>所有应用都要用到，包含访问配置文件、创建和管理 bean 以及进行 Inversion of Control(控制反转) / Dependency Injection（依赖注入）操作相关的所有类。外部依赖 spring-core</td></tr><tr><td>spring-context</td><td></td></tr><tr><td>spring-aop、spring-instrument</td><td>面向切面编程、植入代理</td></tr><tr><td>spring-expression</td><td>模块提供了强大的表达式语言去支持查询和操作运行时对象图。这是对JSP 2.1规范中规定的统一表达式语言的扩展。该语言支持设置和获取属性值，属性分配，方法调用，访问数组，集合和索引器的内容，逻辑和算术运算，变量命名以及从Spring的IoC容器中以名称检索对象。 它还支持列表投影和选择以及常见的列表聚合。</td></tr><tr><td>spring-messaging</td><td>消息传递</td></tr><tr><td>spring-jdbc、spring-jms、spring-orm</td><td>数据访问支持</td></tr><tr><td>spring-jcl</td><td>Jakarta Commons Logging采用了设计模式中的“适配器模式”，它对外提供统一的接口，然后在适配类中将对日志的操作委托给具体的日志框架。</td></tr><tr><td>spring-tx</td><td>事务</td></tr><tr><td>spring-webmvc、spring-web</td><td>Webmvc框架支持</td></tr><tr><td>spring-webflux</td><td>Servlet3.1 + Netty 方式的WebMvc</td></tr><tr><td>spring-websocket</td><td>对ws支持</td></tr></tbody></table><h5 id="commons-logging"><a href="#commons-logging" class="headerlink" title="commons-logging"></a>commons-logging</h5><p>运行Spring程序额外还需要commons-logging包</p><p><a href="http://commons.apache.org/proper/commons-logging/download_logging.cgi">http://commons.apache.org/proper/commons-logging/download_logging.cgi</a></p><h5 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h5><p>可以使用Eclipse、Idea等</p><p>推荐使用官方开发工具STS</p><p><a href="https://spring.io/tools">https://spring.io/tools</a></p><p>   <img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/035F9EC9B696437A87A50AA64A71D59A/97" alt="STS"></p><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><h5 id="window下配置"><a href="#window下配置" class="headerlink" title="window下配置"></a>window下配置</h5><ul><li><p>新建-&gt;变量名”JAVA_HOME”，变量值”C:\Java\jdk1.8.0_05”（即JDK的安装路径） </p></li><li><p>编辑-&gt;变量名”Path”，在原变量值的最后面加上“;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin” </p></li><li><p>新建-&gt;变量名“CLASSPATH”,变量值“.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar”</p></li></ul><p>在控制台分别输入java，javac，java -version 命令，测试环境是否设置成功</p><h4 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h4><h5 id="新建java项目"><a href="#新建java项目" class="headerlink" title="新建java项目"></a>新建java项目</h5><h6 id="包引入"><a href="#包引入" class="headerlink" title="包引入"></a>包引入</h6><p>   <img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/1BE649BCEE034374AD057A61877E593C/99" alt="核心jar包"></p><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>在src下新建</p><p><strong>applicationContext.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>        <br>        &quot;src/applicationContext.xml&quot;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.baize.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h6><p>建立准备由Spring管理的Bean</p><p>包含两个属性，生成get/set方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">private String name;<br>private Integer age;<br></code></pre></td></tr></table></figure><h6 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ApplicationContext ctx = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>User user = (User)ctx.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>user.setName(<span class="hljs-string">&quot;uu&quot;</span>);<br>user.setAge(<span class="hljs-number">18</span>);<br>System.out.println(ToStringBuilder.reflectionToString(user));<br> <br></code></pre></td></tr></table></figure><h5 id="ToStringBuilder-工具类"><a href="#ToStringBuilder-工具类" class="headerlink" title="ToStringBuilder 工具类"></a>ToStringBuilder 工具类</h5><ul><li><p>Commons项目中用来处理Java基本对象方法的工具类包，可以简化很多平时经常要用到的写法，例如判断字符串是否为空等等。</p></li><li><p>是一个最常用的工具，作为jdk的补充。</p></li><li><p>Lang下有很多Utils类，提供了若干static方法供调用，涵盖了字符串操作、字符操作、JVM交互操作、归类、异常和位域校验等等。</p></li></ul><p>项目地址</p><p><a href="http://commons.apache.org/proper/commons-lang/download_lang.cgi">http://commons.apache.org/proper/commons-lang/download_lang.cgi</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Spring能做什么？&quot;&gt;&lt;a href=&quot;#Spring能做什么？&quot; class=&quot;headerlink&quot; title=&quot;Spring能做什么？&quot;&gt;&lt;/a&gt;Spring能做什么？&lt;/h4&gt;&lt;p&gt;Spring是一个轻量级的控制反转（IoC/di）和面向切面编程(A</summary>
      
    
    
    
    <category term="Spring基础" scheme="https://woshiqianmo.github.io/categories/Spring%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Spring基础" scheme="https://woshiqianmo.github.io/tags/Spring%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>01-MySQL调优</title>
    <link href="https://woshiqianmo.github.io/2021/05/03/MySQL%E8%B0%83%E4%BC%98/01-MySQL%E8%B0%83%E4%BC%98/"/>
    <id>https://woshiqianmo.github.io/2021/05/03/MySQL%E8%B0%83%E4%BC%98/01-MySQL%E8%B0%83%E4%BC%98/</id>
    <published>2021-05-02T16:02:50.000Z</published>
    <updated>2021-05-03T06:47:22.638Z</updated>
    
    <content type="html"><![CDATA[<h5 id="零、MySQL架构"><a href="#零、MySQL架构" class="headerlink" title="零、MySQL架构"></a>零、MySQL架构</h5><p>client –&gt; server（解析器–&gt;AST抽象语法树–&gt;优化器【RBO基于规则优化、CBO基于成本优化】–&gt;执行器） –&gt; 引擎 </p><p>8.0之前–&gt;server包括查询缓存，8.0后移除，缓存命中率低</p><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1620023384185.png" alt="1620023384185"></p><h5 id="一、性能监控"><a href="#一、性能监控" class="headerlink" title="一、性能监控"></a>一、性能监控</h5><ul><li><p>使用show profile查询解析工具，可以指定具体的type（8.0之前）</p><ul><li>all 显示所有性能信息     show profile all for query n</li><li>block io 显示块io操作的次数 show profile block io for query n</li><li>context switches 显示上下文切换次数，被动和主动 show profile context swtiches for query n</li><li>cpu 显示用户cpu时间、系统cpu时间 show profile cpu for query n</li><li>IPC 显示发送和接受的消息数量 show profile ipc for query n</li><li>Memory 暂未实现</li><li>page faults 显示页错误数量 show profile page faults for query n</li><li>source 显示源码中的函数名称与位置 show profile source for query n</li><li>swaps 显示swap的次数 show profile swaps for query n</li></ul></li><li><p>使用performance schema来更加容易监控mysql</p><p>set performance_schema = on; 默认设置开启</p><p>/etc/var/my.cnf 修改关闭</p><p>- </p></li><li><p>使用show processlist查看连接的线程个数，来观察是否有大量线程处于不正常的状态或者其他不正常的特征</p><ul><li>id 表示session id</li><li>user 表示操作的用户</li><li>host 表示操作的主机 </li><li>db 表示操作的数据库</li><li>common 表示命令类型</li><li>info 表示详细的sql语句</li><li>time 表示相应命令执行的时间</li><li>state 表示命令执行状态</li></ul></li></ul><h5 id="二、schema-与-数据库类型优化"><a href="#二、schema-与-数据库类型优化" class="headerlink" title="二、schema 与 数据库类型优化"></a>二、schema 与 数据库类型优化</h5><h5 id="三、执行计划"><a href="#三、执行计划" class="headerlink" title="三、执行计划"></a>三、执行计划</h5><h5 id="四、通过索引进行优化"><a href="#四、通过索引进行优化" class="headerlink" title="四、通过索引进行优化"></a>四、通过索引进行优化</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;零、MySQL架构&quot;&gt;&lt;a href=&quot;#零、MySQL架构&quot; class=&quot;headerlink&quot; title=&quot;零、MySQL架构&quot;&gt;&lt;/a&gt;零、MySQL架构&lt;/h5&gt;&lt;p&gt;client –&amp;gt; server（解析器–&amp;gt;AST抽象语法树–&amp;gt;优</summary>
      
    
    
    
    <category term="MySQL调优" scheme="https://woshiqianmo.github.io/categories/MySQL%E8%B0%83%E4%BC%98/"/>
    
    
    <category term="MySQL调优" scheme="https://woshiqianmo.github.io/tags/MySQL%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>09-JVM基础</title>
    <link href="https://woshiqianmo.github.io/2021/05/02/JVM/09-JVM%E5%9F%BA%E7%A1%80/"/>
    <id>https://woshiqianmo.github.io/2021/05/02/JVM/09-JVM%E5%9F%BA%E7%A1%80/</id>
    <published>2021-05-02T15:40:46.000Z</published>
    <updated>2021-05-06T15:27:18.732Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、纤程"><a href="#一、纤程" class="headerlink" title="一、纤程"></a>一、纤程</h5><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1619970134414.png" alt="纤程"></p><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1619970184001.png" alt="系统调用"></p><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1619970204174.png" alt="java instrumentation"></p><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1619970229572.png" alt="Fiber"></p><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1619970330071.png" alt="计算机基本硬件单元"></p><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1619970280954.png" alt="CPU缓存"></p><p>线程使用linux内核空间 线程只能1M  重 </p><p>纤程使用User用户层空间 可以提几万个 用于切换快</p><p>Jdk不支持纤程需要使用第三方类库：</p><p>quasar-core</p><p>kotlin、go、python支持纤程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;一、纤程&quot;&gt;&lt;a href=&quot;#一、纤程&quot; class=&quot;headerlink&quot; title=&quot;一、纤程&quot;&gt;&lt;/a&gt;一、纤程&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;C:\Users\QianMo\AppData\Roaming\Typora\typora-user-i</summary>
      
    
    
    
    <category term="JVM基础" scheme="https://woshiqianmo.github.io/categories/JVM%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JVM基础" scheme="https://woshiqianmo.github.io/tags/JVM%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>08-JVM基础</title>
    <link href="https://woshiqianmo.github.io/2021/04/26/JVM/08-JVM%E5%9F%BA%E7%A1%80/"/>
    <id>https://woshiqianmo.github.io/2021/04/26/JVM/08-JVM%E5%9F%BA%E7%A1%80/</id>
    <published>2021-04-26T15:12:42.000Z</published>
    <updated>2021-05-06T15:26:46.349Z</updated>
    
    <content type="html"><![CDATA[<h5 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h5><h5 id="一、CMS"><a href="#一、CMS" class="headerlink" title="一、CMS"></a>一、CMS</h5><ul><li><p>councurrent mark sweep(碎片化、浮动垃圾)</p><ul><li><p>碎片化 Memory Fragmentation</p><ul><li>-XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction 默认为0 指的是经过多少次FGC才进行压缩</li></ul></li><li><p>浮动垃圾Floating Garbage</p><ul><li><p>Concurrent Mode Failure 产生：if the concurrent collector is unable to finish reclaiming the unreachable objects before the tenured generation fills up, or if an allocation cannot be satisfiedwith the available free space blocks in the tenured generation, then theapplication is paused and the collection is completed with all the applicationthreads stopped</p><p>解决方案：降低触发CMS的阈值</p><p>PromotionFailed</p><p>解决方案类似，保持老年代有足够的空间</p><p>–XX:CMSInitiatingOccupancyFraction 92% 可以降低这个值，让CMS保持老年代足够的空间</p></li></ul></li></ul></li><li><p>a mostly concurrent,low-pause collector.</p></li><li><p>4 phases</p><ul><li><ol><li>initial mark 初始标记（stw）</li></ol><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1619935301853.png" alt="initial mark stw"></p><ol start="2"><li>concurrent mark 并发标记(最耗时间) 不产生stw</li></ol><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1619935478782.png" alt="concurrent mark"></p><ol start="3"><li>remark 重新标记（stw时间短）</li></ol><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1619935540106.png" alt="remark"></p><ol start="4"><li>concurrent sweep 并发回收</li></ol></li></ul></li><li><p>从线程角度</p></li></ul><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1619935685931.png" alt="从线程角度"></p><h5 id="二、G1"><a href="#二、G1" class="headerlink" title="二、G1"></a>二、G1</h5><ul><li><a href="https://www.oracle.com/technical-resources/articles/java/g1gc.html">https://www.oracle.com/technical-resources/articles/java/g1gc.html</a></li><li>特点：<ul><li>并发收集</li><li>压缩空闲空间不会延长GC的暂停时间</li><li>更易预测的GC暂停时间</li><li>适用不需要实现很高的吞吐量的场景</li></ul></li></ul><p>采用分而治之思想实现</p><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1619936337967.png" alt="G1原理模型"></p><p>软件架构设计两大思想：1. 分层 2. 分而治之</p><p>Humongous：大对象区</p><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1619938996299.png" alt="Humongous"></p><p>Eden：新对象区域</p><p>Old：老对象区域</p><p>Survivor：</p><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1619936918325.png" alt="基本概念"></p><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1619937760845.png" alt="Rset"></p><ul><li>Card Table 由于做YGC时，需要扫描整个OLD区，效率非常低，所以JVM设计了CardTable， 如果一个OLD区CardTable中有对象指向Y区，就将它设为Dirty，下次扫描时，只需要扫描Dirty Card 在结构上，Card Table用BitMap来实现</li></ul><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1619937628023.png" alt="card table"></p><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1619936872551.png" alt="1619936872551"></p><ul><li>阿里的多租户JVM<ul><li>每租户单空间</li><li>session based GC</li></ul></li><li>新老年代比例<ul><li>5% - 60%<ul><li>一般不用手工指定</li><li>也不要手工指定，因为这是G1预测停顿时间的基准</li></ul></li></ul></li></ul><p>GC何时触发</p><ul><li>YGC<ul><li>Eden空间不足</li><li>多线程并行执行</li></ul></li><li>FGC<ul><li>Old空间不足</li><li>System.gc()</li></ul></li></ul><p>G1中的MixedGC</p><ul><li>相当于CMS</li><li>XX：InitiatingHeapOccupacyPercent<ul><li>默认值45%</li><li>当O超过这个值时，启动MixedGC</li></ul></li></ul><p>MixedGC的过程</p><ul><li>初始标记STW</li><li>并发标记</li><li>最终标记STW（重新标记）</li><li>筛选回收STW（并行）</li></ul><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1619955513022.png" alt="并行筛选回收"></p><p>java 10 之前是串行FullGC，之后是并行FullGC</p><h5 id="三、并发标记算法"><a href="#三、并发标记算法" class="headerlink" title="三、并发标记算法"></a>三、并发标记算法</h5><p>三色标记法：</p><p>白色：未被标记的对象</p><p>灰色：自身被标记，成员变量未被标记</p><p>黑色：自身和成员变量已经被标记</p><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1619955902317.png" alt="三色标记法"></p><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1619956025664.png" alt="漏标"></p><p>解决漏标问题：打破上述两个条件之一即可</p><ol><li>incremental update – 增量更新，关注引用的增加，把黑色重新标记为灰色，下次重新扫描属性（CMS）效率低，需要所有灰色都重新扫描</li><li>SATB snapshot at the beginning – 关注引用的删除，当B-&gt;D消失时，要把这个引用推到GC的堆栈，保证D还能被GC扫描到（G1）  效率高，只关注改变</li></ol><h5 id="四、RSet-与-赋值的效率"><a href="#四、RSet-与-赋值的效率" class="headerlink" title="四、RSet 与 赋值的效率"></a>四、RSet 与 赋值的效率</h5><ul><li>由于RSet的存在，那么每次给对象赋值引用的时候，就得做一些额外得操作，指的是在RSet中做一些额外得记录(在GC中被称为写屏障)这个写屏障不等于内存屏障</li><li>No Silver Bullet 没有完美得解决方案</li></ul><h5 id="五、常见问题"><a href="#五、常见问题" class="headerlink" title="五、常见问题"></a>五、常见问题</h5><ol><li><p>-XX:MaxTenuringThreshold控制的是什么？ A: 对象升入老年代的年龄 B: 老年代触发FGC时的内存垃圾比例</p></li><li><p>生产环境中，倾向于将最大堆内存和最小堆内存设置为：（为什么？） A: 相同 B：不同</p></li><li><p>JDK1.8默认的垃圾回收器是： A: ParNew + CMS B: G1 C: PS + ParallelOld D: 以上都不是</p></li><li><p>什么是响应时间优先？</p></li><li><p>什么是吞吐量优先？</p></li><li><p>ParNew和PS的区别是什么？</p></li><li><p>ParNew和ParallelOld的区别是什么？（年代不同，算法不同）</p></li><li><p>长时间计算的场景应该选择：A：停顿时间 B: 吞吐量</p></li><li><p>大规模电商网站应该选择：A：停顿时间 B: 吞吐量</p></li><li><p>HotSpot的垃圾收集器最常用有哪些？</p></li><li><p>常见的HotSpot垃圾收集器组合有哪些？</p></li><li><p>JDK1.7 1.8 1.9的默认垃圾回收器是什么？如何查看？</p></li><li><p>所谓调优，到底是在调什么？</p></li><li><p>如果采用PS + ParrallelOld组合，怎么做才能让系统基本不产生FGC</p></li><li><p>如果采用ParNew + CMS组合，怎样做才能够让系统基本不产生FGC</p><p>1.加大JVM内存</p><p>2.加大Young的比例</p><p>3.提高Y-O的年龄</p><p>4.提高S区比例</p><p>5.避免代码内存泄漏</p></li><li><p>G1是否分代？G1垃圾回收器会产生FGC吗？</p></li><li><p>如果G1产生FGC，你应该做什么？</p><ol><li>扩内存</li><li>提高CPU性能（回收的快，业务逻辑产生对象的速度固定，垃圾回收越快，内存空间越大）</li><li>降低MixedGC触发的阈值，让MixedGC提早发生（默认是45%）</li></ol></li><li><p>问：生产环境中能够随随便便的dump吗？ 小堆影响不大，大堆会有服务暂停或卡顿（加live可以缓解），dump前会有FGC</p></li><li><p>问：常见的OOM问题有哪些？ 栈 堆 MethodArea 直接内存</p></li></ol><h5 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h5><ol><li><p><a href="https://blogs.oracle.com/jonthecollector/our-collectors">https://blogs.oracle.com/</a><a href="https://blogs.oracle.com/jonthecollector/our-collectors">jonthecollector</a><a href="https://blogs.oracle.com/jonthecollector/our-collectors">/our-collectors</a></p></li><li><p><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p></li><li><p><a href="http://java.sun.com/javase/technologies/hotspot/vmoptions.jsp">http://java.sun.com/javase/technologies/hotspot/vmoptions.jsp</a></p></li><li><p>JVM调优参考文档：<a href="https://docs.oracle.com/en/java/javase/13/gctuning/introduction-garbage-collection-tuning.html#GUID-8A443184-7E07-4B71-9777-4F12947C8184">https://docs.oracle.com/en/java/javase/13/gctuning/introduction-garbage-collection-tuning.html#GUID-8A443184-7E07-4B71-9777-4F12947C8184</a></p></li><li><p><a href="https://www.cnblogs.com/nxlhero/p/11660854.html">https://www.cnblogs.com/nxlhero/p/11660854.html</a> 在线排查工具</p></li><li><p><a href="https://www.jianshu.com/p/507f7e0cc3a3">https://www.jianshu.com/p/507f7e0cc3a3</a> arthas常用命令</p></li><li><p>Arthas手册：</p><ol><li>启动arthas java -jar arthas-boot.jar</li><li>绑定java进程</li><li>dashboard命令观察系统整体情况</li><li>help 查看帮助</li><li>help xx 查看具体命令帮助</li></ol></li><li><p>jmap命令参考：</p><p><a href="https://www.jianshu.com/p/507f7e0cc3a3">https://www.jianshu.com/p/507f7e0cc3a3</a></p><ol><li>jmap -heap pid</li><li>jmap -histo pid</li><li>jmap -clstats pid</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;CMS&quot;&gt;&lt;a href=&quot;#CMS&quot; class=&quot;headerlink&quot; title=&quot;CMS&quot;&gt;&lt;/a&gt;CMS&lt;/h5&gt;&lt;h5 id=&quot;一、CMS&quot;&gt;&lt;a href=&quot;#一、CMS&quot; class=&quot;headerlink&quot; title=&quot;一、CMS&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="JVM基础" scheme="https://woshiqianmo.github.io/categories/JVM%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JVM基础" scheme="https://woshiqianmo.github.io/tags/JVM%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>07-JVM基础</title>
    <link href="https://woshiqianmo.github.io/2021/04/24/JVM/07-JVM%E5%9F%BA%E7%A1%80/"/>
    <id>https://woshiqianmo.github.io/2021/04/24/JVM/07-JVM%E5%9F%BA%E7%A1%80/</id>
    <published>2021-04-24T12:24:44.000Z</published>
    <updated>2021-04-28T04:40:01.199Z</updated>
    
    <content type="html"><![CDATA[<h5 id="零、常见垃圾回收器组合参数设定-1-8"><a href="#零、常见垃圾回收器组合参数设定-1-8" class="headerlink" title="零、常见垃圾回收器组合参数设定(1.8)"></a>零、常见垃圾回收器组合参数设定(1.8)</h5><ul><li>-XX:+UseSerialGC = Serial New (DefNew) + Serial Old<ul><li>小型程序。默认情况下不会是这种选项，HotSpot会根据计算及配置和JDK版本自动选择收集器</li></ul></li><li>-XX:+UseParNewGC = ParNew + SerialOld<ul><li>这个组合已经很少用（在某些版本中已经废弃）</li><li><a href="https://stackoverflow.com/questions/34962257/why-remove-support-for-parnewserialold-anddefnewcms-in-the-future">https://stackoverflow.com/questions/34962257/why-remove-support-for-parnewserialold-anddefnewcms-in-the-future</a></li></ul></li><li>-XX:+UseConc(urrent)MarkSweepGC = ParNew + CMS + Serial Old</li><li>-XX:+UseParallelGC = Parallel Scavenge + Parallel Old (1.8默认) 【PS + SerialOld】</li><li>-XX:+UseParallelOldGC = Parallel Scavenge + Parallel Old</li><li>-XX:+UseG1GC = G1</li><li>Linux中没找到默认GC的查看方法，而windows中会打印UseParallelGC <ul><li>java +XX:+PrintCommandLineFlags -version</li><li>通过GC的日志来分辨</li></ul></li><li>Linux下1.8版本默认的垃圾回收器到底是什么？<ul><li>1.8.0_181 默认（看不出来）Copy MarkCompact</li><li>1.8.0_222 默认 PS + PO</li></ul></li></ul><h5 id="一、JVM常用命令行参数"><a href="#一、JVM常用命令行参数" class="headerlink" title="一、JVM常用命令行参数"></a>一、JVM常用命令行参数</h5><ul><li><p>JVM的命令行参数参考：<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p></li><li><p>HotSpot参数分类</p><blockquote><p>标准： - 开头，所有的HotSpot都支持</p><p>非标准：-X 开头，特定版本HotSpot支持特定命令</p><p>不稳定：-XX 开头，下个版本可能取消</p></blockquote></li></ul><p>java -version</p><p>java -X</p><p>试验用程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloGC</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;HelloGC!&quot;</span>);<br>    List list = <span class="hljs-keyword">new</span> LinkedList();<br>    <span class="hljs-keyword">for</span>(;;) &#123;<br>      <span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br>      list.add(b);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>区分概念：内存泄漏memory leak，内存溢出out of memory</li><li>java -XX:+PrintCommandLineFlags HelloGC</li><li>java -Xmn10M -Xms40M -Xmx60M -XX:+PrintCommandLineFlags -XX:+PrintGC HelloGC PrintGCDetails PrintGCTimeStamps PrintGCCauses</li><li>java -XX:+UseConcMarkSweepGC -XX:+PrintCommandLineFlags HelloGC</li><li>java -XX:+PrintFlagsInitial 默认参数值</li><li>java -XX:+PrintFlagsFinal 最终参数值</li><li>java -XX:+PrintFlagsFinal | grep xxx 找到对应的参数</li><li>java -XX:+PrintFlagsFinal -version |grep GC</li></ol><h5 id="二、GC日志详解"><a href="#二、GC日志详解" class="headerlink" title="二、GC日志详解"></a>二、GC日志详解</h5><p>每种垃圾回收器的日志格式是不同的！</p><p>PS日志格式</p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/65DE227A1F524692AF01A4FA2C5F43FE/29" alt="GC日志详解"></p><p>heap dump部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">eden space 5632K, <span class="hljs-number">94</span>% used [<span class="hljs-number">0x00000000ff980000</span>,<span class="hljs-number">0x00000000ffeb3e28</span>,<span class="hljs-number">0x00000000fff00000</span>)<br>                        后面的内存地址指的是，起始地址，使用空间结束地址，整体空间结束地址<br></code></pre></td></tr></table></figure><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/7B2D42B6D4F346BFBD46CEEAD08A1C1E/25" alt="内存溢出信息"></p><p>total = eden + 1个survivor</p><h5 id="三、调优前的基础概念"><a href="#三、调优前的基础概念" class="headerlink" title="三、调优前的基础概念"></a>三、调优前的基础概念</h5><ol><li>吞吐量：用户代码时间 /（用户代码执行时间 + 垃圾回收时间）</li><li>响应时间：STW越短，响应时间越好</li></ol><p>所谓调优，首先确定，追求啥？吞吐量优先，还是响应时间优先？还是在满足一定的响应时间的情况下，要求达到多大的吞吐量…</p><p>问题：</p><p>科学计算，吞吐量。数据挖掘，thrput。吞吐量优先的一般：（PS + PO）</p><p>响应时间：网站 GUI API （1.8 G1 1.8之前pn+cms）</p><h5 id="四、什么是调优"><a href="#四、什么是调优" class="headerlink" title="四、什么是调优"></a>四、什么是调优</h5><ol><li>根据需求进行JVM规划和预调优</li><li>优化运行JVM运行环境（慢，卡顿）</li><li>解决JVM运行过程中出现的各种问题(OOM)</li></ol><h5 id="五、调优1-预规划"><a href="#五、调优1-预规划" class="headerlink" title="五、调优1-预规划"></a>五、调优1-预规划</h5><ul><li>调优，从业务场景开始，没有业务场景的调优都是耍流氓</li><li>无监控（压力测试，能看到结果），不调优</li><li>步骤：<ol><li>熟悉业务场景（没有最好的垃圾回收器，只有最合适的垃圾回收器）<ol><li>响应时间、停顿时间 [CMS G1 ZGC] （需要给用户作响应）</li><li>吞吐量 = 用户时间 /( 用户时间 + GC时间) [PS]</li></ol></li><li>选择回收器组合</li><li>计算内存需求（经验值 1.5G 16G）</li><li>选定CPU（越高越好）</li><li>设定年代大小、升级年龄</li><li>设定日志参数（5个日志文件，每个文件20m，循环使用，1-5，5满了，删除1，继续写入）<ol><li>-Xloggc:/opt/xxx/logs/xxx-xxx-gc-%t.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=20M -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCCause</li><li>或者每天产生一个日志文件</li></ol></li><li>观察日志情况</li></ol></li></ul><h5 id="六、预规划案例"><a href="#六、预规划案例" class="headerlink" title="六、预规划案例"></a>六、预规划案例</h5><ul><li><p>案例1：垂直电商，最高每日百万订单，处理订单系统需要什么样的服务器配置？</p><blockquote><p>这个问题比较业余，因为很多不同的服务器配置都能支撑(1.5G 16G)</p><p>1小时360000集中时间段， 100个订单/秒，（找一小时内的高峰期，1000订单/秒）</p><p>经验值，</p><p>非要计算：一个订单产生需要多少内存？512K * 1000 500M内存</p><p>专业一点儿问法：要求响应时间100ms</p><p>压测！</p></blockquote></li><li><p>案例2：12306遭遇春节大规模抢票应该如何支撑？</p><blockquote><p>12306应该是中国并发量最大的秒杀网站：</p><p>号称并发量100W最高</p><p>CDN -&gt; LVS -&gt; NGINX -&gt; 业务系统 -&gt; 每台机器1W并发（10K问题） 100台机器</p><p>普通电商订单 -&gt; 下单 -&gt;订单系统（IO）减库存 -&gt;等待用户付款</p><p>12306的一种可能的模型： 下单 -&gt; 减库存 和 订单(redis kafka) 同时异步进行 -&gt;等付款</p><p>减库存最后还会把压力压到一台服务器</p><p>可以做分布式本地库存 + 单独服务器做库存均衡</p><p>大流量的处理方法：分而治之</p></blockquote></li><li><p>怎么得到一个事务会消耗多少内存？</p><blockquote><ol><li>弄台机器，看能承受多少TPS？是不是达到目标？扩容或调优，让它达到</li><li>用压测来确定</li></ol></blockquote></li></ul><h5 id="七、调优2-优化JVM运行环境"><a href="#七、调优2-优化JVM运行环境" class="headerlink" title="七、调优2-优化JVM运行环境"></a>七、调优2-优化JVM运行环境</h5><ol><li>有一个50万PV的资料类网站（从磁盘提取文档到内存）原服务器32位，1.5G 的堆，用户反馈网站比较缓慢，因此公司决定升级，新的服务器为64位，16G 的堆内存，结果用户反馈卡顿十分严重，反而比以前效率更低了<ol><li>为什么原网站慢? 很多用户浏览数据，很多数据load到内存，内存不足，频繁GC，STW长，响应时间变慢</li><li>为什么会更卡顿？ 内存越大，FGC时间越长</li><li>咋办？ PS -&gt; PN + CMS 或者 G1</li></ol></li><li>系统CPU经常100%，如何调优？(面试高频) CPU100%那么一定有线程在占用系统资源，<ol><li>找出哪个进程cpu高（top）</li><li>该进程中的哪个线程cpu高（top -Hp）</li><li>导出该线程的堆栈 (jstack)</li><li>查找哪个方法（栈帧）消耗时间 (jstack)</li><li>工作线程占比高 | 垃圾回收线程占比高</li></ol></li><li>系统内存飙高，如何查找问题？（面试高频）<ol><li>导出堆内存 (jmap)</li><li>分析 (jhat jvisualvm mat jprofiler … )</li></ol></li><li>如何监控JVM<ol><li>jstat jvisualvm jprofiler arthas top…</li></ol></li></ol><h5 id="八、解决JVM运行中的问题"><a href="#八、解决JVM运行中的问题" class="headerlink" title="八、解决JVM运行中的问题"></a>八、解决JVM运行中的问题</h5><h6 id="一个案例理解常用工具"><a href="#一个案例理解常用工具" class="headerlink" title="一个案例理解常用工具"></a>一个案例理解常用工具</h6><ol><li>测试代码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mashibing.jvm.gc;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.ScheduledThreadPoolExecutor;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadPoolExecutor;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从数据库中读取信用数据，套用模型，并把结果进行记录和传输</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FullGC_Problem01</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CardInfo</span> </span>&#123;<br>        BigDecimal price = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-number">0.0</span>);<br>        String name = <span class="hljs-string">&quot;张三&quot;</span>;<br>        <span class="hljs-keyword">int</span> age = <span class="hljs-number">5</span>;<br>        Date birthdate = <span class="hljs-keyword">new</span> Date();<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ScheduledThreadPoolExecutor executor = <span class="hljs-keyword">new</span> ScheduledThreadPoolExecutor(<span class="hljs-number">50</span>,<br>            <span class="hljs-keyword">new</span> ThreadPoolExecutor.DiscardOldestPolicy());<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        executor.setMaximumPoolSize(<span class="hljs-number">50</span>);<br><br>        <span class="hljs-keyword">for</span> (;;)&#123;<br>            modelFit();<br>            Thread.sleep(<span class="hljs-number">100</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modelFit</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;CardInfo&gt; taskList = getAllCardInfo();<br>        taskList.forEach(info -&gt; &#123;<br>            <span class="hljs-comment">// do something</span><br>            executor.scheduleWithFixedDelay(() -&gt; &#123;<br>                <span class="hljs-comment">//do sth with info</span><br>                info.m();<br><br>            &#125;, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, TimeUnit.SECONDS);<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;CardInfo&gt; <span class="hljs-title">getAllCardInfo</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;CardInfo&gt; taskList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            CardInfo ci = <span class="hljs-keyword">new</span> CardInfo();<br>            taskList.add(ci);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> taskList;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li><p>java -Xms200M -Xmx200M -XX:+PrintGC com.mashibing.jvm.gc.FullGC_Problem01</p></li><li><p>一般是运维团队首先收到报警信息（CPU Memory）</p></li><li><p>top命令观察到问题：内存不断增长 CPU占用率居高不下</p></li><li><p>top -Hp 观察进程中的线程，哪个线程CPU和内存占比高</p></li><li><p>jps定位具体java进程 jstack 定位线程状况，重点关注：WAITING BLOCKED eg. waiting on &lt;0x0000000088ca3310&gt; (a java.lang.Object) 假如有一个进程中100个线程，很多线程都在waiting on ，一定要找到是哪个线程持有这把锁 怎么找？搜索jstack dump的信息，找 ，看哪个线程持有这把锁RUNNABLE 作业：1：写一个死锁程序，用jstack观察 2 ：写一个程序，一个线程持有锁不释放，其他线程等待</p></li><li><p>为什么阿里规范里规定，线程的名称（尤其是线程池）都要写有意义的名称 怎么样自定义线程池里的线程名称？（自定义ThreadFactory）</p></li><li><p>jinfo pid </p></li><li><p>jstat -gc 动态观察gc情况 / 阅读GC日志发现频繁GC / arthas观察 / jconsole/jvisualVM/ Jprofiler（最好用） jstat -gc 4655 500 : 每个500个毫秒打印GC的情况 如果面试官问你是怎么定位OOM问题的？如果你回答用图形界面（错误） 1：已经上线的系统不用图形界面用什么？（cmdline arthas） 2：图形界面到底用在什么地方？测试！测试的时候进行监控！（压测观察）</p></li><li><p>jmap - histo 4655 | head -20，查找有多少对象产生</p></li><li><p>jmap -dump:format=b,file=xxx pid ： 不要线上导出堆存储文件</p></li></ol><p>线上系统，内存特别大，jmap执行期间会对进程产生很大影响，甚至卡顿（电商不适合） 1：设定了参数HeapDump，OOM的时候会自动产生堆转储文件 2：很多服务器备份（高可用），停掉这台服务器对其他服务器不影响 3：在线定位(一般小点儿公司用不到)</p><ol start="12"><li>java -Xms20M -Xmx20M -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError com.mashibing.jvm.gc.T15_FullGC_Problem01</li><li>使用MAT / jhat /jvisualvm 进行dump文件分析 <a href="https://www.cnblogs.com/baihuitestsoftware/articles/6406271.html">https://www.cnblogs.com/baihuitestsoftware/articles/6406271.html</a> jhat -J-mx512M xxx.dump<a href="http://192.168.17.11:7000/">http://192.168.17.11:7000</a> 拉到最后：找到对应链接 可以使用OQL查找特定问题对象</li><li>找到代码的问题</li></ol><h6 id="jconsole远程连接"><a href="#jconsole远程连接" class="headerlink" title="jconsole远程连接"></a>jconsole远程连接</h6><ol><li><p>程序启动加入参数：</p><blockquote><p>java -Djava.rmi.server.hostname=192.168.17.11 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=11111 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false XXX</p></blockquote></li><li><p>如果遭遇 Local host name unknown：XXX的错误，修改/etc/hosts文件，把XXX加入进去</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">192.168</span><span class="hljs-number">.17</span><span class="hljs-number">.11</span> basic localhost localhost.localdomain localhost4 localhost4.localdomain4<br>::<span class="hljs-number">1</span>         localhost localhost.localdomain localhost6 localhost6.localdomain6<br></code></pre></td></tr></table></figure></blockquote></li><li><p>关闭linux防火墙（实战中应该打开对应端口）</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">service iptables stop<br>chkconfig iptables off #永久关闭<br></code></pre></td></tr></table></figure></blockquote></li><li><p>windows上打开 jconsole远程连接 192.168.17.11:11111</p></li></ol><h6 id="jvisualvm远程连接"><a href="#jvisualvm远程连接" class="headerlink" title="jvisualvm远程连接"></a>jvisualvm远程连接</h6><p><a href="https://www.cnblogs.com/liugh/p/7620336.html">https://www.cnblogs.com/liugh/p/7620336.html</a> （简单做法）</p><h6 id="jprofiler-收费"><a href="#jprofiler-收费" class="headerlink" title="jprofiler (收费)"></a>jprofiler (收费)</h6><h4 id="arthas在线排查工具"><a href="#arthas在线排查工具" class="headerlink" title="arthas在线排查工具"></a>arthas在线排查工具</h4><ul><li>为什么需要在线排查？ 在生产上我们经常会碰到一些不好排查的问题，例如线程安全问题，用最简单的threaddump或者heapdump不好查到问题原因。为了排查这些问题，有时我们会临时加一些日志，比如在一些关键的函数里打印出入参，然后重新打包发布，如果打了日志还是没找到问题，继续加日志，重新打包发布。对于上线流程复杂而且审核比较严的公司，从改代码到上线需要层层的流转，会大大影响问题排查的进度。 </li><li>jvm观察jvm信息</li></ul><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/5DD3E890D8084672872864D2610582C7/69" alt="jvm1"></p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/66D314DF7BC84235B8FF9020EB033A9E/80" alt="jvm2"></p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/20C0D9CF57B64D419CE9C0145BCC63FA/81" alt="jvm3"></p><ul><li>thread定位线程问题</li></ul><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/744A48B1D80046D28756E43DD49770C5/72" alt="thread"></p><ul><li>dashboard 观察系统情况</li></ul><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/21895D66D3584278A9C9BB734FF7CA4B/75" alt="dashboard"></p><ul><li>heapdump + jhat分析</li></ul><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/2E2C464B766C485A9600A12DB9157D0F/88" alt="heapdump"></p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/5394899D4C0A4D21ABA2392C33F6504F/73" alt="jhat分析"></p><ul><li>jad反编译 动态代理生成类的问题定位 第三方的类（观察代码） 版本问题（确定自己最新提交的版本是不是被使用）</li><li>redefine 热替换 目前有些限制条件：只能改方法实现（方法已经运行完成），不能改方法名， 不能改属性 m() -&gt; mm()</li><li>sc - search class</li><li>watch - watch method</li><li>没有包含的功能：jmap</li></ul><h3 id="案例汇总"><a href="#案例汇总" class="headerlink" title="案例汇总"></a>案例汇总</h3><p>OOM产生的原因多种多样，有些程序未必产生OOM，不断FGC(CPU飙高，但内存回收特别少) （上面案例）</p><ol><li><p>硬件升级系统反而卡顿的问题（见上）</p></li><li><p>线程池不当运用产生OOM问题（见上） 不断的往List里加对象（实在太LOW）</p></li><li><p>smile jira问题 实际系统不断重启 解决问题 加内存 + 更换垃圾回收器 G1 真正问题在哪儿？不知道</p></li><li><p>tomcat http-header-size过大问题（Hector）   会产生Http11OutOfBuffer 占内存</p></li><li><p>lambda表达式导致方法区溢出问题(MethodArea / Perm Metaspace) LambdaGC.java -XX:MaxMetaspaceSize=9M -XX:+PrintGCDetails</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;C:\Program Files\Java\jdk1.8.0_181\bin\java.exe&quot;</span> -XX:MaxMetaspaceSize=9M -XX:+PrintGCDetails <span class="hljs-string">&quot;-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2019.1\lib\idea_rt.jar=49316:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2019.1\bin&quot;</span> -Dfile.encoding=UTF-<span class="hljs-number">8</span> -classpath <span class="hljs-string">&quot;C:\Program Files\Java\jdk1.8.0_181\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\rt.jar;C:\work\ijprojects\JVM\out\production\JVM;C:\work\ijprojects\ObjectSize\out\artifacts\ObjectSize_jar\ObjectSize.jar&quot;</span> com.mashibing.jvm.gc.LambdaGC<br>[GC (Metadata GC Threshold) [PSYoungGen: 11341K-&gt;1880K(38400K)] 11341K-&gt;1888K(125952K), <span class="hljs-number">0.0022190</span> secs] [Times: user=<span class="hljs-number">0.00</span> sys=<span class="hljs-number">0.00</span>, real=<span class="hljs-number">0.00</span> secs] <br>[<span class="hljs-function">Full <span class="hljs-title">GC</span> <span class="hljs-params">(Metadata GC Threshold)</span> [PSYoungGen: 1880K-&gt;0<span class="hljs-title">K</span><span class="hljs-params">(38400K)</span>] [ParOldGen: 8K-&gt;1777<span class="hljs-title">K</span><span class="hljs-params">(35328K)</span>] 1888K-&gt;1777<span class="hljs-title">K</span><span class="hljs-params">(73728K)</span>, [Metaspace: 8164K-&gt;8164<span class="hljs-title">K</span><span class="hljs-params">(1056768K)</span>], 0.0100681 secs] [Times: user</span>=<span class="hljs-number">0.02</span> sys=<span class="hljs-number">0.00</span>, real=<span class="hljs-number">0.01</span> secs] <br>[GC (Last ditch collection) [PSYoungGen: 0K-&gt;0K(38400K)] 1777K-&gt;1777K(73728K), <span class="hljs-number">0.0005698</span> secs] [Times: user=<span class="hljs-number">0.00</span> sys=<span class="hljs-number">0.00</span>, real=<span class="hljs-number">0.00</span> secs] <br>[<span class="hljs-function">Full <span class="hljs-title">GC</span> <span class="hljs-params">(Last ditch collection)</span> [PSYoungGen: 0K-&gt;0<span class="hljs-title">K</span><span class="hljs-params">(38400K)</span>] [ParOldGen: 1777K-&gt;1629<span class="hljs-title">K</span><span class="hljs-params">(67584K)</span>] 1777K-&gt;1629<span class="hljs-title">K</span><span class="hljs-params">(105984K)</span>, [Metaspace: 8164K-&gt;8156<span class="hljs-title">K</span><span class="hljs-params">(1056768K)</span>], 0.0124299 secs] [Times: user</span>=<span class="hljs-number">0.06</span> sys=<span class="hljs-number">0.00</span>, real=<span class="hljs-number">0.01</span> secs] <br>java.lang.reflect.InvocationTargetException<br>at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="hljs-number">62</span>)<br>at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="hljs-number">43</span>)<br>at java.lang.reflect.Method.invoke(Method.java:<span class="hljs-number">498</span>)<br>at sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:<span class="hljs-number">388</span>)<br>at sun.instrument.InstrumentationImpl.loadClassAndCallAgentmain(InstrumentationImpl.java:<span class="hljs-number">411</span>)<br>Caused by: java.lang.OutOfMemoryError: Compressed <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">space</span></span><br><span class="hljs-class"><span class="hljs-title">at</span> <span class="hljs-title">sun</span>.<span class="hljs-title">misc</span>.<span class="hljs-title">Unsafe</span>.<span class="hljs-title">defineClass</span>(<span class="hljs-title">Native</span> <span class="hljs-title">Method</span>)</span><br>at sun.reflect.ClassDefiner.defineClass(ClassDefiner.java:63)<br>at sun.reflect.MethodAccessorGenerator$<span class="hljs-number">1.</span>run(MethodAccessorGenerator.java:<span class="hljs-number">399</span>)<br>at sun.reflect.MethodAccessorGenerator$<span class="hljs-number">1.</span>run(MethodAccessorGenerator.java:<span class="hljs-number">394</span>)<br>at java.security.AccessController.doPrivileged(Native Method)<br>at sun.reflect.MethodAccessorGenerator.generate(MethodAccessorGenerator.java:<span class="hljs-number">393</span>)<br>at sun.reflect.MethodAccessorGenerator.generateSerializationConstructor(MethodAccessorGenerator.java:<span class="hljs-number">112</span>)<br>at sun.reflect.ReflectionFactory.generateConstructor(ReflectionFactory.java:<span class="hljs-number">398</span>)<br>at sun.reflect.ReflectionFactory.newConstructorForSerialization(ReflectionFactory.java:<span class="hljs-number">360</span>)<br>at java.io.ObjectStreamClass.getSerializableConstructor(ObjectStreamClass.java:<span class="hljs-number">1574</span>)<br>at java.io.ObjectStreamClass.access$<span class="hljs-number">1500</span>(ObjectStreamClass.java:<span class="hljs-number">79</span>)<br>at java.io.ObjectStreamClass$<span class="hljs-number">3.</span>run(ObjectStreamClass.java:<span class="hljs-number">519</span>)<br>at java.io.ObjectStreamClass$<span class="hljs-number">3.</span>run(ObjectStreamClass.java:<span class="hljs-number">494</span>)<br>at java.security.AccessController.doPrivileged(Native Method)<br>at java.io.ObjectStreamClass.&lt;init&gt;(ObjectStreamClass.java:<span class="hljs-number">494</span>)<br>at java.io.ObjectStreamClass.lookup(ObjectStreamClass.java:<span class="hljs-number">391</span>)<br>at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:<span class="hljs-number">1134</span>)<br>at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:<span class="hljs-number">1548</span>)<br>at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:<span class="hljs-number">1509</span>)<br>at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:<span class="hljs-number">1432</span>)<br>at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:<span class="hljs-number">1178</span>)<br>at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:<span class="hljs-number">348</span>)<br>at javax.management.remote.rmi.RMIConnectorServer.encodeJRMPStub(RMIConnectorServer.java:<span class="hljs-number">727</span>)<br>at javax.management.remote.rmi.RMIConnectorServer.encodeStub(RMIConnectorServer.java:<span class="hljs-number">719</span>)<br>at javax.management.remote.rmi.RMIConnectorServer.encodeStubInAddress(RMIConnectorServer.java:<span class="hljs-number">690</span>)<br>at javax.management.remote.rmi.RMIConnectorServer.start(RMIConnectorServer.java:<span class="hljs-number">439</span>)<br>at sun.management.jmxremote.ConnectorBootstrap.startLocalConnectorServer(ConnectorBootstrap.java:<span class="hljs-number">550</span>)<br>at sun.management.Agent.startLocalManagementAgent(Agent.java:<span class="hljs-number">137</span>)<br></code></pre></td></tr></table></figure></li><li><p>直接内存溢出问题（少见） 《深入理解Java虚拟机》P59，使用Unsafe分配直接内存，或者使用NIO的问题</p></li><li><p>栈溢出问题 -Xss设定太小 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">stackFullGc</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        m();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;<br>        m();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>比较一下这两段程序的异同，分析哪一个是更优的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Object o = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++) &#123;<br>    o = <span class="hljs-keyword">new</span> Object();<br>    <span class="hljs-comment">//业务处理</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++) &#123;<br>    Object o = <span class="hljs-keyword">new</span> Object();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重写finalize引发频繁GC 小米云，HBase同步系统，系统通过nginx访问超时报警，最后排查，C++程序员重写finalize引发频繁GC问题 为什么C++程序员会重写finalize？（new delete） finalize耗时比较长（200ms）c++ new 调用构造函数</p><p>c++ 调用delete 默认调用析构函数</p></li><li><p>如果有一个系统，内存一直消耗不超过10%，但是观察GC日志，发现FGC总是频繁产生，会是什么引起的？ System.gc() (这个比较Low)</p></li><li><p>Distuptor有个可以设置链的长度，如果过大，然后对象大，消费完不主动释放，会溢出 (来自 死物风情)</p></li><li><p>用jvm都会溢出，mycat用崩过，1.6.5某个临时版本解析sql子查询算法有问题，9个exists的联合sql就导致生成几百万的对象（来自 死物风情）</p></li><li><p>new 大量线程，会产生 native thread OOM，（low）应该用线程池， 解决方案：减少堆空间（太TMlow了）,预留更多内存产生native thread JVM内存占物理内存比例 50% - 80%</p></li></ol><h3 id="GC常用参数"><a href="#GC常用参数" class="headerlink" title="GC常用参数"></a>GC常用参数</h3><ul><li>-Xmn -Xms -Xmx -Xss 年轻代 最小堆 最大堆 栈空间</li><li>-XX:+UseTLAB 使用TLAB，默认打开</li><li>-XX:+PrintTLAB 打印TLAB的使用情况</li><li>-XX:TLABSize 设置TLAB大小</li><li>-XX:+DisableExplictGC System.gc()不管用 ，FGC</li><li>-XX:+PrintGC</li><li>-XX:+PrintGCDetails</li><li>-XX:+PrintHeapAtGC</li><li>-XX:+PrintGCTimeStamps</li><li>-XX:+PrintGCApplicationConcurrentTime (低) 打印应用程序时间</li><li>-XX:+PrintGCApplicationStoppedTime （低） 打印暂停时长</li><li>-XX:+PrintReferenceGC （重要性低） 记录回收了多少种不同引用类型的引用</li><li>-verbose:class 类加载详细过程</li><li>-XX:+PrintVMOptions</li><li>-XX:+PrintFlagsFinal -XX:+PrintFlagsInitial 必须会用</li><li>-Xloggc:opt/log/gc.log</li><li>-XX:MaxTenuringThreshold 升代年龄，最大值15</li><li>锁自旋次数 -XX:PreBlockSpin 热点代码检测参数-XX:CompileThreshold 逃逸分析 标量替换 … 这些不建议设置</li></ul><h3 id="Parallel常用参数"><a href="#Parallel常用参数" class="headerlink" title="Parallel常用参数"></a>Parallel常用参数</h3><ul><li>-XX:SurvivorRatio</li><li>-XX:PreTenureSizeThreshold 大对象到底多大</li><li>-XX:MaxTenuringThreshold</li><li>-XX:+ParallelGCThreads 并行收集器的线程数，同样适用于CMS，一般设为和CPU核数相同</li><li>-XX:+UseAdaptiveSizePolicy 自动选择各区大小比例</li></ul><h3 id="CMS常用参数"><a href="#CMS常用参数" class="headerlink" title="CMS常用参数"></a>CMS常用参数</h3><ul><li>-XX:+UseConcMarkSweepGC</li><li>-XX:ParallelCMSThreads CMS线程数量</li><li>-XX:CMSInitiatingOccupancyFraction 使用多少比例的老年代后开始CMS收集，默认是68%(近似值)，如果频繁发生SerialOld卡顿，应该调小，（频繁CMS回收）</li><li>-XX:+UseCMSCompactAtFullCollection 在FGC时进行压缩</li><li>-XX:CMSFullGCsBeforeCompaction 多少次FGC之后进行压缩</li><li>-XX:+CMSClassUnloadingEnabled</li><li>-XX:CMSInitiatingPermOccupancyFraction 达到什么比例时进行Perm回收</li><li>GCTimeRatio 设置GC时间占用程序运行时间的百分比</li><li>-XX:MaxGCPauseMillis 停顿时间，是一个建议时间，GC会尝试用各种手段达到这个时间，比如减小年轻代</li></ul><h3 id="G1常用参数"><a href="#G1常用参数" class="headerlink" title="G1常用参数"></a>G1常用参数</h3><ul><li>-XX:+UseG1GC</li><li>-XX:MaxGCPauseMillis 建议值，G1会尝试调整Young区的块数来达到这个值</li><li>-XX:GCPauseIntervalMillis ？GC的间隔时间</li><li>-XX:+G1HeapRegionSize 分区大小，建议逐渐增大该值，1 2 4 8 16 32。 随着size增加，垃圾的存活时间更长，GC间隔更长，但每次GC的时间也会更长 ZGC做了改进（动态区块大小）</li><li>G1NewSizePercent 新生代最小比例，默认为5%</li><li>G1MaxNewSizePercent 新生代最大比例，默认为60%</li><li>GCTimeRatio GC时间建议比例，G1会根据这个值调整堆空间</li><li>ConcGCThreads 线程数量</li><li>InitiatingHeapOccupancyPercent 启动G1的堆空间占用比例</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;零、常见垃圾回收器组合参数设定-1-8&quot;&gt;&lt;a href=&quot;#零、常见垃圾回收器组合参数设定-1-8&quot; class=&quot;headerlink&quot; title=&quot;零、常见垃圾回收器组合参数设定(1.8)&quot;&gt;&lt;/a&gt;零、常见垃圾回收器组合参数设定(1.8)&lt;/h5&gt;&lt;ul</summary>
      
    
    
    
    <category term="JVM基础" scheme="https://woshiqianmo.github.io/categories/JVM%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JVM基础" scheme="https://woshiqianmo.github.io/tags/JVM%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>06-JVM基础</title>
    <link href="https://woshiqianmo.github.io/2021/04/24/JVM/06-JVM%E5%9F%BA%E7%A1%80/"/>
    <id>https://woshiqianmo.github.io/2021/04/24/JVM/06-JVM%E5%9F%BA%E7%A1%80/</id>
    <published>2021-04-24T06:19:34.000Z</published>
    <updated>2021-05-06T15:23:28.372Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Grabage-Collector-GC-tuning-垃圾回收器，调优"><a href="#Grabage-Collector-GC-tuning-垃圾回收器，调优" class="headerlink" title="Grabage Collector GC tuning(垃圾回收器，调优)"></a>Grabage Collector GC tuning(垃圾回收器，调优)</h4><p>目标：熟悉GC常用算法，熟悉常见垃圾收集器，具有实际JVM调优实战经验</p><h5 id="一、垃圾"><a href="#一、垃圾" class="headerlink" title="一、垃圾"></a>一、垃圾</h5><ul><li>没有任何引用指向</li></ul><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/2A89E3D42C1F4F8481203B42A5DDBD4A/56" alt="grabage"></p><h6 id="1-1-java-vs-c"><a href="#1-1-java-vs-c" class="headerlink" title="1.1 java vs c++"></a>1.1 java vs c++</h6><ul><li>java<ul><li>GC处理垃圾啊</li><li>开发效率高，执行效率低</li></ul></li><li>C++<ul><li>手工处理垃圾</li><li>忘记回收<ul><li>内存泄漏</li></ul></li><li>回收多次<ul><li>非法访问</li></ul></li><li>开发效率低，执行效率高</li></ul></li></ul><h6 id="1-2-如何找到垃圾（找垃圾两种算法：引用计数算法，根可达算法）"><a href="#1-2-如何找到垃圾（找垃圾两种算法：引用计数算法，根可达算法）" class="headerlink" title="1.2 如何找到垃圾（找垃圾两种算法：引用计数算法，根可达算法）"></a>1.2 如何找到垃圾（找垃圾两种算法：引用计数算法，根可达算法）</h6><ul><li>reference count 引用计数算法</li></ul><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/1440B1DC272B48269A60FF87E7EA2567/59" alt="reference count"></p><p>引用记数不能解决循环引用</p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/6965BE81840F4393B2967F332AD3C280/58" alt="引用记数不能解决循环引用"></p><ul><li>根可达算法</li></ul><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/D7C6536449E74D7D9A461C8F49F73103/42" alt="根可达算法"></p><h6 id="1-3-垃圾回收算法"><a href="#1-3-垃圾回收算法" class="headerlink" title="1.3 垃圾回收算法"></a>1.3 垃圾回收算法</h6><ul><li>Mark - Sweep 标记清除</li></ul><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/65C9446E2A8548749F08786B4BB849D3/65" alt="Mark - Sweep"></p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/E76E0D0080544C4B95E7A6087AE5CE48/37" alt="标记清除的问题"></p><ul><li>Copying 拷贝</li></ul><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/8D5D024B3FE14B31821BC11A1605DFA3/61" alt="Copying"></p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/9410943559FC443A95A5A676926D2C79/35" alt="copy算法的问题"></p><ul><li>Mark - Compact 标记压缩</li></ul><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/0144671934DE475283F92860F96819EA/62" alt="Mark - Compact"></p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/BB2811239902490B84C44DC2E68984AE/39" alt="标记压缩问题"></p><h6 id="1-4-堆内存逻辑分区-不适用不分代垃圾收集器"><a href="#1-4-堆内存逻辑分区-不适用不分代垃圾收集器" class="headerlink" title="1.4 堆内存逻辑分区(不适用不分代垃圾收集器)"></a>1.4 堆内存逻辑分区(不适用不分代垃圾收集器)</h6><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/40B714F4F30F4881B679D26C6E7196D9/45" alt="内存"></p><ul><li>栈上分配<ul><li>线程私有小对象</li><li>支持标量替换</li><li>无逃逸</li><li>无需调整</li></ul></li><li>线程本地分配TLAB （Thread Local Allocation Buffer）<ul><li>占用eden，默认1%</li><li>多线程的时候不用竞争eden就可以申请空间，提高效率</li><li>小对象</li><li>无需调整</li></ul></li><li>老年代<ul><li>大对象</li></ul></li><li>eden</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//-XX:-DoEscapeAnalysis -XX:-EliminateAllocations -XX:-UseTLAB -Xlog:c5_gc*</span><br><span class="hljs-comment">// 逃逸分析 标量替换 线程专有对象分配</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTLAB</span> </span>&#123;<br>    <span class="hljs-comment">//User u;</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> id;<br>        String name;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.id = id;<br>            <span class="hljs-keyword">this</span>.name = name;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">alloc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> User(i, <span class="hljs-string">&quot;name &quot;</span> + i); <span class="hljs-comment">//没有赋值给外层，无逃逸</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TestTLAB t = <span class="hljs-keyword">new</span> TestTLAB();<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">1000_0000</span>; i++) t.alloc(i);<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br><br>        <span class="hljs-comment">//for(;;);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-5-对象何时进入老年代"><a href="#1-5-对象何时进入老年代" class="headerlink" title="1.5 对象何时进入老年代"></a>1.5 对象何时进入老年代</h6><ul><li>超过 XX:MaxTenuringThreshold指定次数（YGC）<ul><li>Parallel Scavenge 15</li><li>CMS 6</li><li>G1 15</li></ul></li><li>动态年龄 (不重要)  <a href="https://www.jianshu.com/p/989d3b06a49d">https://www.jianshu.com/p/989d3b06a49d</a><ul><li>s1 -&gt; s2 超过50%</li><li>把年龄最大的放入Old</li></ul></li></ul><p>Eden + s1  &gt;s2 * 1/2 直接放入Old</p><ul><li><p>分配担保（不重要） YGC期间 survivor区空间不够了 空间担保直接进入老年代 参考：<a href="https://cloud.tencent.com/developer/article/1082730">https://cloud.tencent.com/developer/article/1082730</a></p></li><li><p>对象分配过程图</p></li></ul><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/2FEDFB411BCC4AA1AF4CD87773747820/43" alt="对象分配过程图"></p><h6 id="1-6-常见的垃圾回收器"><a href="#1-6-常见的垃圾回收器" class="headerlink" title="1.6 常见的垃圾回收器"></a>1.6 常见的垃圾回收器</h6><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/6DFB6E028D12471FA679805363962B4E/57" alt="常见的垃圾回收器"></p><p>常见组合：Serial + SerialOld、CMS+ParNew、Parallerl Scavenge + Parallel Old</p><ol><li>JDK诞生 Serial追随 提高效率，诞生了PS，为了配合CMS，诞生了PN，CMS是1.4版本后期引入，CMS是里程碑式的GC，它开启了并发回收的过程，但是CMS毛病较多，因此目前任何一个JDK版本默认是CMS 并发垃圾回收是因为无法忍受STW</li><li>Serial 年轻代 串行回收   单线程</li></ol><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/99D0BB3066E44DADBBBCBDAAA39978C8/26" alt="Serial "></p><ol start="3"><li>PS（Parallel Scavenge） 年轻代 并行回收</li></ol><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/EAEE0A81238E4A8AA4FAD4DB15301DA5/55" alt="Parallel Scavenge"></p><ol start="4"><li>ParNew 年轻代 配合CMS的并行回收</li></ol><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/07BF538E0C144C01AB19262385AB7819/24" alt="ParNew"></p><ol start="5"><li>SerialOld 标记压缩，单线程垃圾回收</li></ol><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/CB2ED3A29757453CBE79F701872DC4DC/36" alt="SerialOld"></p><ol start="6"><li>ParallelOld 整理算法</li></ol><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/E8574F2A4AED41D98CC0BD8BDA2B304E/47" alt="ParallelOld"></p><ol start="7"><li>ConcurrentMarkSweep （CMS）老年代 并发的， 垃圾回收和应用程序同时运行，降低STW的时间(200ms) CMS问题比较多，所以现在没有一个版本默认是CMS，只能手工指定 CMS既然是MarkSweep，就一定会有碎片化的问题，碎片到达一定程度，CMS的老年代分配对象分配不下的时候，使用SerialOld 进行老年代回收 想象一下： PS + PO -&gt; 加内存 换垃圾回收器 -&gt; PN + CMS + SerialOld（几个小时 - 几天的STW） 几十个G的内存，单线程回收 -&gt; G1 + FGC 几十个G -&gt; 上T内存的服务器 ZGC 算法：三色标记 + Incremental Update</li></ol><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/B5AC158463B444A092227CF96AC74D59/63" alt="CMS"></p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/B984D232BEE2476FA8D51BBC968FA4EF/31" alt="并发"></p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/FF41F81ACC544428A42C5BDCB0EB52E0/48" alt="CMS concurrent mark"></p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/78B8B981C8C94736A0DC005DFEE7A051/46" alt="CMS remark"></p><ul><li><p>CMS的问题：</p><ul><li><p>1.Memory Fragmentation 碎片化</p><blockquote><p>-XX:+UseCMSCompactAtFullCollection</p><p>-XX:CMSFullGCsBeforeCompaction 默认为0 指的是经过多少次FGC才进行压缩</p></blockquote></li><li><p>2.Floating Garbage 浮动垃圾</p><blockquote><p>Concurrent Mode Failure</p><p>产生：if the concurrent collector is unable to finish reclaiming the unreachable objects before the tenured generation fills up, or if an allocation cannot be satisfiedwith the available free space blocks in the tenured generation, then theapplication is paused and the collection is completed with all the applicationthreads stopped</p><p>解决方案：降低触发CMS的阈值&gt;&gt; PromotionFailed&gt;&gt; 解决方案类似，保持老年代有足够的空间</p><p> –XX:CMSInitiatingOccupancyFraction 92% 可以降低这个值，让CMS保持老年代足够的空间</p></blockquote></li></ul></li></ul><p>算法：三色标记+Incremental Update</p><ol start="8"><li>G1(10ms) 算法：三色标记 + SATB</li></ol><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/42EA7C370F2744D7921EB63AD0E0549E/23" alt="并发标记算法"></p><ol start="9"><li><p>ZGC (1ms) PK C++ 算法：ColoredPointers + LoadBarrier</p></li><li><p>Shenandoah 算法：ColoredPointers + WriteBarrier</p></li><li><p>Eplison</p></li><li><p>PS 和 PN区别的延伸阅读： ▪<a href="https://docs.oracle.com/en/java/javase/13/gctuning/ergonomics.html">https://docs.oracle.com/en/java/javase/13/gctuning/ergonomics.html#GUID-3D0BB91E-9BFF-4EBB-B523-14493A860E73</a></p></li><li><p>垃圾收集器跟内存大小的关系</p><ol><li>Serial 几十兆</li><li>PS 上百兆 - 几个G</li><li>CMS - 20G</li><li>G1 - 上百G</li><li>ZGC - 4T - 16T（JDK13）</li></ol></li></ol><p>1.8默认的垃圾回收：PS + ParallelOld</p><h6 id="1-6-JVM内存分代模型（用于分代垃圾回收算法）"><a href="#1-6-JVM内存分代模型（用于分代垃圾回收算法）" class="headerlink" title="1.6 JVM内存分代模型（用于分代垃圾回收算法）"></a>1.6 JVM内存分代模型（用于分代垃圾回收算法）</h6><ol><li><p>部分垃圾回收器使用的模型</p><blockquote><p>除Epsilon ZGC Shenandoah之外的GC都是使用逻辑分代模型</p><p>G1是逻辑分代，物理不分代</p><p>除此之外不仅逻辑分代，而且物理分代</p></blockquote></li><li><p>新生代 + 老年代 + 永久代（1.7）Perm Generation/ 元数据区(1.8) Metaspace（Perm Generation与元数据区都是方法区的实现）</p><ol><li>永久代 元数据 - Class</li><li>永久代必须指定大小限制（经常产生溢出现象） ，元数据可以设置，也可以不设置，无上限（受限于物理内存）</li><li>字符串常量 1.7 - 永久代，1.8 - 堆</li><li>MethodArea逻辑概念 - 永久代、元数据</li></ol></li><li><p>新生代 = Eden + 2个suvivor区 </p><ol><li>YGC回收之后，大多数的对象会被回收，活着的进入s0</li><li>再次YGC，活着的对象eden + s0 -&gt; s1</li><li>再次YGC，eden + s1 -&gt; s0</li><li>年龄足够 -&gt; 老年代 （15 CMS 6）</li><li>s区装不下 -&gt; 老年代</li></ol></li><li><p>老年代</p><ol><li>顽固分子</li><li>老年代满了FGC Full GC</li></ol></li><li><p>GC Tuning (Generation)</p><ol><li>尽量减少FGC</li><li>MinorGC = YGC</li><li>MajorGC = FGC</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Grabage-Collector-GC-tuning-垃圾回收器，调优&quot;&gt;&lt;a href=&quot;#Grabage-Collector-GC-tuning-垃圾回收器，调优&quot; class=&quot;headerlink&quot; title=&quot;Grabage Collector GC</summary>
      
    
    
    
    <category term="JVM基础" scheme="https://woshiqianmo.github.io/categories/JVM%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JVM基础" scheme="https://woshiqianmo.github.io/tags/JVM%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>1.SpringBoot入门</title>
    <link href="https://woshiqianmo.github.io/2021/04/22/SpringBoot/1-SpringBoot%E5%85%A5%E9%97%A8/"/>
    <id>https://woshiqianmo.github.io/2021/04/22/SpringBoot/1-SpringBoot%E5%85%A5%E9%97%A8/</id>
    <published>2021-04-22T15:02:26.000Z</published>
    <updated>2021-04-22T15:14:39.308Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、架构体系演变"><a href="#一、架构体系演变" class="headerlink" title="一、架构体系演变"></a>一、架构体系演变</h5><h6 id="1-单一应用架构"><a href="#1-单一应用架构" class="headerlink" title="1.单一应用架构"></a>1.单一应用架构</h6><h6 id="2-垂直应用架构"><a href="#2-垂直应用架构" class="headerlink" title="2.垂直应用架构"></a>2.垂直应用架构</h6><h6 id="3-分布式服务架构"><a href="#3-分布式服务架构" class="headerlink" title="3.分布式服务架构"></a>3.分布式服务架构</h6><h6 id="4-流动计算架构"><a href="#4-流动计算架构" class="headerlink" title="4.流动计算架构"></a>4.流动计算架构</h6>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;一、架构体系演变&quot;&gt;&lt;a href=&quot;#一、架构体系演变&quot; class=&quot;headerlink&quot; title=&quot;一、架构体系演变&quot;&gt;&lt;/a&gt;一、架构体系演变&lt;/h5&gt;&lt;h6 id=&quot;1-单一应用架构&quot;&gt;&lt;a href=&quot;#1-单一应用架构&quot; class=&quot;head</summary>
      
    
    
    
    <category term="SpringBoot入门" scheme="https://woshiqianmo.github.io/categories/SpringBoot%E5%85%A5%E9%97%A8/"/>
    
    
    <category term="SpringBoot入门" scheme="https://woshiqianmo.github.io/tags/SpringBoot%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>05-JVM基础</title>
    <link href="https://woshiqianmo.github.io/2021/04/21/JVM/05-JVM%E5%9F%BA%E7%A1%80/"/>
    <id>https://woshiqianmo.github.io/2021/04/21/JVM/05-JVM%E5%9F%BA%E7%A1%80/</id>
    <published>2021-04-21T14:18:30.000Z</published>
    <updated>2021-04-28T03:30:19.396Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、运行时数据区-Runtime-Data-Area"><a href="#一、运行时数据区-Runtime-Data-Area" class="headerlink" title="一、运行时数据区(Runtime Data Area)"></a>一、运行时数据区(Runtime Data Area)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestIPulsPlus</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">8</span>;<br>        i = i++;<br>        <span class="hljs-comment">//i = ++i;</span><br>        System.out.println(i);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/A18FA3C3B5234C2B9D75F898BA476E40/52" alt="a class life cycle"></p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/E0FB4876CE2F45C48C70033D312BCF47/34" alt="Run-time data areas"></p><h5 id="二、运行时数据区详解"><a href="#二、运行时数据区详解" class="headerlink" title="二、运行时数据区详解"></a>二、运行时数据区详解</h5><h6 id="1-PC-程序计数器"><a href="#1-PC-程序计数器" class="headerlink" title="1.PC 程序计数器"></a>1.PC 程序计数器</h6><blockquote><p>存放指令位置</p><p>虚拟机的运行，类似于这样的循环：</p><p>while( not end ) {</p><p>​    取PC中的位置，找到对应位置的指令；</p><p>​    执行该指令；</p><p>​    PC ++;</p><p>}</p></blockquote><h6 id="2-JVM-Stack-栈"><a href="#2-JVM-Stack-栈" class="headerlink" title="2.JVM Stack 栈"></a>2.JVM Stack 栈</h6><p>栈帧Frame</p><ol><li><p>Frame - 每个方法对应一个栈帧</p><ol><li><p>Local Variable Table 局部变量表</p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/149CAED5900947F89FD69DCFB4213F2C/86" alt="Local Variable Table"></p></li><li><p>Operand Stack  操作数栈</p><p>对于long的处理（store and load），多数虚拟机的实现都是原子的 jls 17.7，没必要加volatile</p></li><li><p><a href="https://blog.csdn.net/qq_41813060/article/details/88379473">Dynamic Linking</a>  动态链接</p><p>jvms 2.6.3</p></li><li><p>return address  返回地址</p><p>a() -&gt; b()，方法a调用了方法b, b方法的返回值放在什么地方</p></li></ol></li></ol><h6 id="3-Heap-堆"><a href="#3-Heap-堆" class="headerlink" title="3.Heap 堆"></a>3.Heap 堆</h6><h6 id="4-Method-Area-方法区"><a href="#4-Method-Area-方法区" class="headerlink" title="4.Method Area 方法区"></a>4.Method Area 方法区</h6><ol><li>Perm Space (&lt;1.8) 永久区 字符串常量位于PermSpace FGC不会清理 大小启动的时候指定，不能变</li><li>Meta Space (&gt;=1.8) 元空间 字符串常量位于堆 会触发FGC清理 不设定的话，最大就是物理内存</li></ol><h6 id="5-Runtime-Constant-Pool-常量池"><a href="#5-Runtime-Constant-Pool-常量池" class="headerlink" title="5.Runtime Constant Pool 常量池"></a>5.Runtime Constant Pool 常量池</h6><h6 id="6-Native-Method-Stack"><a href="#6-Native-Method-Stack" class="headerlink" title="6.Native Method Stack"></a>6.Native Method Stack</h6><h6 id="7-Direct-Memory"><a href="#7-Direct-Memory" class="headerlink" title="7.Direct Memory"></a>7.Direct Memory</h6><blockquote><p>JVM可以直接访问的内核空间的内存 (OS 管理的内存)</p><p>NIO ， 提高效率，实现zero copy</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/718FC972F492407695A94EC7454E7657/40" alt="操作解析"></p><ul><li>1.bipush 8 压栈</li><li>2.istore_1 出栈放入局部变量表下标唯一的位置 int i = 8；</li><li>3.iload_1 从局部变量表下标为1的值拿到栈内</li><li>4.iinc 1 by 1 局部变量表下标为1的值加1 值变为9</li><li>5.istore_1 将栈内值再次放入局部变量表为1的位置</li><li>6.return</li></ul><p>基于栈的指令集</p><p>基于寄存器的指令集</p><ul><li>hotspot的local variable table 类似于寄存器</li></ul><h5 id="3-栈的执行流程"><a href="#3-栈的执行流程" class="headerlink" title="3.栈的执行流程"></a>3.栈的执行流程</h5><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/902468326FA440BA8260EEC924EECFA5/50" alt="栈的执行流程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">100</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">200</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">300</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> c = a + b;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m3</span><span class="hljs-params">()</span> </span>&#123;<br>        Object o = <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m4</span><span class="hljs-params">()</span> </span>&#123;<br>        Object o = <span class="hljs-keyword">new</span> Object();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/0B1C12FF338E49D69537D2B8C9191E73/44" alt="1619100635276"></p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/5C9AE61D3C884E9B8136417CC05C9600/51" alt="1619100733452"></p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/F1196C0A8CF942B3B78C772DB676446F/49" alt="1619100782524"></p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/C9335AB1633E48D19D87302D4D9D4A23/33" alt="1619100871070"></p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/12D271324F1743308E0FC01286D3E56A/54" alt="1619101284296"></p><h5 id="三、Invoke常用指令"><a href="#三、Invoke常用指令" class="headerlink" title="三、Invoke常用指令"></a>三、Invoke常用指令</h5><ul><li><p>store</p></li><li><p>load 入栈</p></li><li><p>pop 出栈</p></li><li><p>mul 乘</p></li><li><p>sub 减法</p></li><li><p>invoke</p><ul><li>1.InvokeStatic</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvokeStatic</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        m();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>2.InvokeVirtual</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvokeVirtual</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> InvokeVirtual().m();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>3.InvokeInterface</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvokeSpecial</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        InvokeSpecial t = <span class="hljs-keyword">new</span> InvokeSpecial();<br>        t.m();<br>        t.n();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">n</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>4.InvokeSpecial 可以直接定位，不需要多态的方法private方法，构造方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvokeInterface</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        list.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>        ArrayList&lt;String&gt; list2 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list2.add(<span class="hljs-string">&quot;hello2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>5.InvokeDynamic JVM最难的指令，lambda表达式或者反射或者其它动态语言scala kotlin，或者CGLib ASM，动态产生class，会用到的指令</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvokeDynamic</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        I i = C::n;<br>        I i2 = C::n;<br>        I i3 = C::n;<br>        I i4 = () -&gt; &#123;<br>            C.n();<br>        &#125;;<br>        System.out.println(i.getClass());<br>        System.out.println(i2.getClass());<br>        System.out.println(i3.getClass());<br><br>        <span class="hljs-comment">//for(;;) &#123;I j = C::n;&#125; //MethodArea &lt;1.8 Perm Space (FGC不回收)</span><br>    &#125;<br><br>    <span class="hljs-meta">@FunctionalInterface</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">I</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">n</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>JDK1.8之前 for(;;) {I j = C::n;} //MethodArea &lt;1.8 Perm Space (永久区FGC不回收)</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;一、运行时数据区-Runtime-Data-Area&quot;&gt;&lt;a href=&quot;#一、运行时数据区-Runtime-Data-Area&quot; class=&quot;headerlink&quot; title=&quot;一、运行时数据区(Runtime Data Area)&quot;&gt;&lt;/a&gt;一、运行时数据</summary>
      
    
    
    
    <category term="JVM基础" scheme="https://woshiqianmo.github.io/categories/JVM%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JVM基础" scheme="https://woshiqianmo.github.io/tags/JVM%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>04-JVM基础</title>
    <link href="https://woshiqianmo.github.io/2021/04/21/JVM/04-JVM%E5%9F%BA%E7%A1%80/"/>
    <id>https://woshiqianmo.github.io/2021/04/21/JVM/04-JVM%E5%9F%BA%E7%A1%80/</id>
    <published>2021-04-21T11:54:21.000Z</published>
    <updated>2021-04-21T14:16:20.321Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、对象的内存布局（面试题）"><a href="#一、对象的内存布局（面试题）" class="headerlink" title="一、对象的内存布局（面试题）"></a>一、对象的内存布局（面试题）</h5><ul><li><p>1.解释一下对象的创建过程</p><ul><li>1.1 class loading</li><li>1.2 class linking(verification,preparation,resolution)</li><li>1.3 lass initializing</li><li>1.4 申请对象内存</li><li>1.5 成员变量赋默认值</li><li>1.6 调用构造方法<init><ul><li>1.成员变量顺序赋初始值</li><li>2.执行构造方法语句</li></ul></li></ul></li><li><p>2.对象在内存中的存储布局</p><ul><li><p>观察虚拟机配置：java -XX:+PrintCommandLineFlags -version</p></li><li><p>普通对象</p><ul><li>1.对象头：markword 8</li><li>2.ClassPointer指针：-XX:+UseCompressedClassPointers 为4字节 不开启为8字节</li><li>3.实例数据<ul><li>引用类型：-XX:+UseCompressedOops 为4字节 不开启为8字节 Oops Ordinary Object</li></ul></li><li>4.PointersPadding对齐，8的倍数</li></ul></li><li><p>数组对象</p><ul><li><p>1.对象头：markword 8</p></li><li><p>2.ClassPointer指针同上</p></li><li><p>3.数组长度：4字节</p></li><li><p>4.数组数据</p></li><li><p>5.对齐 8的倍数</p></li><li><p>试验</p><ul><li>1.新建项目ObjectSize(1.8)</li><li>2.创建文件ObjectSizeAgent</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> com.mashibing.jvm.agent;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectSizeAgent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Instrumentation inst;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">premain</span><span class="hljs-params">(String agentArgs, Instrumentation _inst)</span> </span>&#123;<br>        inst = _inst;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">sizeOf</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> inst.getObjectSize(o);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>3.src目录下创建META-INF/MANIFEST.MF</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Manifest-Version: <span class="hljs-number">1.0</span><br>Created-By: baize.com<br>Premain-Class: com.baize.jvm.agent.ObjectSizeAgent<br></code></pre></td></tr></table></figure><p>注意Premain-Class这行必须是新的一行（回车 + 换行），确认idea不能有任何错误提示</p><ul><li>4.打包jar文件</li><li>5.在需要使用该Agent Jar的项目中引入该Jar包   project structure - project settings - library 添加该jar包</li><li>6.运行时需要该Agent Jar的类，加入参数：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-javaagent:C:\work\ijprojects\ObjectSize\out\artifacts\ObjectSize_jar\ObjectSize.jar<br></code></pre></td></tr></table></figure><ul><li>7.如何使用该类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mashibing.jvm.c3_jmm;<br>  <br>  <span class="hljs-keyword">import</span> com.mashibing.jvm.agent.ObjectSizeAgent;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T03_SizeOfAnObject</span> </span>&#123;<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>          System.out.println(ObjectSizeAgent.sizeOf(<span class="hljs-keyword">new</span> Object()));<br>          System.out.println(ObjectSizeAgent.sizeOf(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;&#125;));<br>          System.out.println(ObjectSizeAgent.sizeOf(<span class="hljs-keyword">new</span> P()));<br>      &#125;<br>  <br>      <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">P</span> </span>&#123;<br>                          <span class="hljs-comment">//8 _markword</span><br>                          <span class="hljs-comment">//4 _oop指针</span><br>          <span class="hljs-keyword">int</span> id;         <span class="hljs-comment">//4</span><br>          String name;    <span class="hljs-comment">//4</span><br>          <span class="hljs-keyword">int</span> age;        <span class="hljs-comment">//4</span><br>  <br>          <span class="hljs-keyword">byte</span> b1;        <span class="hljs-comment">//1</span><br>          <span class="hljs-keyword">byte</span> b2;        <span class="hljs-comment">//1</span><br>  <br>          Object o;       <span class="hljs-comment">//4</span><br>          <span class="hljs-keyword">byte</span> b3;        <span class="hljs-comment">//1</span><br>  <br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h6 id="Hotspot开启内存压缩的规则（64位机）"><a href="#Hotspot开启内存压缩的规则（64位机）" class="headerlink" title="Hotspot开启内存压缩的规则（64位机）"></a>Hotspot开启内存压缩的规则（64位机）</h6><ol><li>4G以下，直接砍掉高32位</li><li>4G - 32G，默认开启内存压缩 ClassPointers Oops</li><li>32G，压缩无效，使用64位   内存并不是越大越好（^-^）</li></ol><ul><li><p>3.对象头具体包括什么</p><ul><li><h6 id="IdentityHashCode的问题"><a href="#IdentityHashCode的问题" class="headerlink" title="IdentityHashCode的问题"></a>IdentityHashCode的问题</h6><ul><li>回答白马非马的问题：<ul><li>当一个对象计算过identityHashCode之后，不能进入偏向锁状态</li></ul></li></ul><p><a href="https://cloud.tencent.com/developer/article/1484167">https://cloud.tencent.com/developer/article/1484167</a><br><a href="https://cloud.tencent.com/developer/article/1485795">https://cloud.tencent.com/developer/article/1485795</a><br><a href="https://cloud.tencent.com/developer/article/1482500">https://cloud.tencent.com/developer/article/1482500</a></p><p><a href="https://cloud.tencent.com/developer/article/1480590">https://cloud.tencent.com/developer/article/1480590</a> </p></li></ul></li><li><p>4.对象怎么定位</p><p><a href="https://blog.csdn.net/clover_lily/article/details/80095580">https://blog.csdn.net/clover_lily/article/details/80095580</a></p><ol><li><p>句柄池</p></li><li><p>直接指针</p></li></ol></li><li><p>5.对象怎么分配</p></li><li><p>6.Object o =new Object在内存中占用多少字节</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;一、对象的内存布局（面试题）&quot;&gt;&lt;a href=&quot;#一、对象的内存布局（面试题）&quot; class=&quot;headerlink&quot; title=&quot;一、对象的内存布局（面试题）&quot;&gt;&lt;/a&gt;一、对象的内存布局（面试题）&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.解释一下对象的创建过程</summary>
      
    
    
    
    <category term="JVM基础" scheme="https://woshiqianmo.github.io/categories/JVM%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JVM基础" scheme="https://woshiqianmo.github.io/tags/JVM%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>03-JVM基础</title>
    <link href="https://woshiqianmo.github.io/2021/04/19/JVM/03-JVM%E5%9F%BA%E7%A1%80/"/>
    <id>https://woshiqianmo.github.io/2021/04/19/JVM/03-JVM%E5%9F%BA%E7%A1%80/</id>
    <published>2021-04-19T14:08:02.000Z</published>
    <updated>2021-04-28T03:26:09.869Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、ClassLoader自定义parent"><a href="#一、ClassLoader自定义parent" class="headerlink" title="一、ClassLoader自定义parent"></a>一、ClassLoader自定义parent</h5><p>默认parent是 getSystemClassLoader(); -&gt; AppClassLoader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> MSBClassLoader parent = <span class="hljs-keyword">new</span> MSBClassLoader();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ClassLoader</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyLoader</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">super</span>(parent);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="二、如何打破双亲委派模型"><a href="#二、如何打破双亲委派模型" class="headerlink" title="二、如何打破双亲委派模型"></a>二、如何打破双亲委派模型</h5><p>重写loadClass，何时打破双亲委派模型？</p><ul><li>JDK1.2之前,自定义ClassLoader都必须重写loadClass()</li><li>ThreadContextClassLoader可以实现基础类调用实现类代码，通过thread.setContextClassLoader指定</li><li>热启动，热部署<ul><li>1.osgi tomcat 都有自己的模块指定classloader(可以加载同一类库的不同版本)</li><li>当webapplication部署时候，如果一个项目有a.jar 1.0版本，另外一个项目有a.jar 2.0版本，使用双亲委派模型，不会加载第二次</li></ul></li></ul><p>没有打破双亲委派模型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassReloading</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        MSBClassLoader msbClassLoader = <span class="hljs-keyword">new</span> MSBClassLoader();<br>        Class clazz = msbClassLoader.loadClass(<span class="hljs-string">&quot;com.mashibing.jvm.Hello&quot;</span>);<br><br>        msbClassLoader = <span class="hljs-keyword">null</span>;<br>        System.out.println(clazz.hashCode());<br><br>        msbClassLoader = <span class="hljs-keyword">null</span>;<br><br>        msbClassLoader = <span class="hljs-keyword">new</span> T006_MSBClassLoader();<br>        Class clazz1 = msbClassLoader.loadClass(<span class="hljs-string">&quot;com.mashibing.jvm.Hello&quot;</span>);<br>        System.out.println(clazz1.hashCode());<br>        System.out.println(clazz == clazz1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打破双亲委派模型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.mashibing.jvm.Hello;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassReloading</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ClassLoader</span> </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>            <br>            File f = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:/work/ijprojects/JVM/out/production/JVM/&quot;</span> + name.replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>).concat(<span class="hljs-string">&quot;.class&quot;</span>));<br><br>            <span class="hljs-keyword">if</span>(!f.exists()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.loadClass(name);<br><br>            <span class="hljs-keyword">try</span> &#123;<br><br>                InputStream is = <span class="hljs-keyword">new</span> FileInputStream(f);<br><br>                <span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[is.available()];<br>                is.read(b);<br>                <span class="hljs-keyword">return</span> defineClass(name, b, <span class="hljs-number">0</span>, b.length);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.loadClass(name);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        MyLoader m = <span class="hljs-keyword">new</span> MyLoader();<br>        Class clazz = m.loadClass(<span class="hljs-string">&quot;com.mashibing.jvm.Hello&quot;</span>);<br><br>        m = <span class="hljs-keyword">new</span> MyLoader();<br>        Class clazzNew = m.loadClass(<span class="hljs-string">&quot;com.mashibing.jvm.Hello&quot;</span>);<br>        System.out.println(clazz == clazzNew);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="三、Linking"><a href="#三、Linking" class="headerlink" title="三、Linking"></a>三、Linking</h5><ul><li>1.Verification<ul><li>验证文件是否符合JVM规定</li></ul></li><li>2.Preparation<ul><li>静态成员变量赋默认值</li></ul></li><li>3.Resolution<ul><li>将类、方法、属性等符号引用解析为直接引用常量池中的各种符号引用解析为指针、偏移量等内存地址的直接引用</li></ul></li></ul><h5 id="四、Initalizing"><a href="#四、Initalizing" class="headerlink" title="四、Initalizing"></a>四、Initalizing</h5><p>调用类初始化代码，给静态变量赋初始值</p><ul><li>load - 默认值 - 初始值</li><li>new - 申请内存 - 默认值 - 初始值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoadingProcedure</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(T.count);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> T t = <span class="hljs-keyword">new</span> T(); <span class="hljs-comment">// null</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">2</span>; <span class="hljs-comment">//0</span><br><br>    <span class="hljs-comment">//private int m = 8;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">T</span><span class="hljs-params">()</span> </span>&#123;<br>        count ++;<br>        <span class="hljs-comment">//System.out.println(&quot;--&quot; + count);</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>单例模式 双重检查  必须加volatile 防止指令重排序</p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/67358A67082B4C7D86DA1727C978FFA6/89" alt="指令重排序"></p><h5 id="五、JMM-（Java-Memory-Model）"><a href="#五、JMM-（Java-Memory-Model）" class="headerlink" title="五、JMM （Java Memory Model）"></a>五、JMM （Java Memory Model）</h5><h6 id="5-1-硬件层的并发优化基础知识"><a href="#5-1-硬件层的并发优化基础知识" class="headerlink" title="5.1 硬件层的并发优化基础知识"></a>5.1 硬件层的并发优化基础知识</h6><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/C8E32C8A33E94B35A4B51B516E2F6808/30" alt="存储器的层次结构"></p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/BD52DF80F7FE47ABB77C4F1A9E73AB8E/53" alt="cache line"></p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/CFB39AFA857B42FFB268817CF8473E50/38" alt="多线程一致性的硬件层支持（老CPU使用总线锁）"></p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/B1BA0F240BCA44CEA9C8D9DC1A3FADB4/22" alt="MESI Cache一致性协议（新CPU Intel使用）"></p><p>其它协议有：MSI、MESI、MOSI、Synapse、Firefly、Dragon</p><p>Modified 自己改过</p><p>Exclusive 只有自己在用</p><p>Shared 别人也读过</p><p>Invalid 失效的</p><p>读取缓存以cache line 为基本单位，目前64bytes，位于同一缓存行的两个不同数据，被两个不同CPU锁定，产生互相影响的伪共享问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//位于同一个缓存行</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CacheLinePadding</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">long</span> x = <span class="hljs-number">0L</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> T[] arr = <span class="hljs-keyword">new</span> T[<span class="hljs-number">2</span>];<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        arr[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> T();<br>        arr[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> T();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">long</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000_0000L</span>; i++) &#123;<br>                arr[<span class="hljs-number">0</span>].x = i;<br>            &#125;<br>        &#125;);<br><br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">long</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000_0000L</span>; i++) &#123;<br>                arr[<span class="hljs-number">1</span>].x = i;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> start = System.nanoTime();<br>        t1.start();<br>        t2.start();<br>        t1.join();<br>        t2.join();<br>        System.out.println((System.nanoTime() - start)/<span class="hljs-number">100_0000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//位于不同缓存行</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CacheLinePadding</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Padding</span> </span>&#123;<br>        <span class="hljs-comment">//缓存行对齐</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">long</span> p1, p2, p3, p4, p5, p6, p7;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Padding</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">long</span> x = <span class="hljs-number">0L</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> T[] arr = <span class="hljs-keyword">new</span> T[<span class="hljs-number">2</span>];<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        arr[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> T();<br>        arr[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> T();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">long</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000_0000L</span>; i++) &#123;<br>                arr[<span class="hljs-number">0</span>].x = i;<br>            &#125;<br>        &#125;);<br><br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">long</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000_0000L</span>; i++) &#123;<br>                arr[<span class="hljs-number">1</span>].x = i;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> start = System.nanoTime();<br>        t1.start();<br>        t2.start();<br>        t1.join();<br>        t2.join();<br>        System.out.println((System.nanoTime() - start)/<span class="hljs-number">100_0000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>disruptor 单机效率最高的消息对列</p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/44C9DF13CBD443B1A37D98C2F4CC8650/85" alt="disruptor"></p><p>使用缓存行的对齐，可以提高效率，但是，浪费空间</p><h6 id="5-2-乱序问题"><a href="#5-2-乱序问题" class="headerlink" title="5.2 乱序问题"></a>5.2 乱序问题</h6><p>CPU为了提高指令执行效率，会在一条指令执行过程中（比如去内存读数据（慢100倍）），去同时执行另一条指令，前提是，两条指令没有依赖关系</p><p><a href="%5D(https://www.cnblogs.com/liushaodong/p/4777308.html)https://www.cnblogs.com/liushaodong/p/4777308.html">现代cpu的合并写技术对程序的影响</a></p><p>写操作也可以进行合并 WCBuffer 比L1缓存速度都快 只有4个位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WriteCombining</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> ITERATIONS = Integer.MAX_VALUE;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> ITEMS = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">24</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MASK = ITEMS - <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span>[] arrayA = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[ITEMS];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span>[] arrayB = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[ITEMS];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span>[] arrayC = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[ITEMS];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span>[] arrayD = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[ITEMS];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span>[] arrayE = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[ITEMS];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span>[] arrayF = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[ITEMS];<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++) &#123;<br>            System.out.println(i + <span class="hljs-string">&quot; SingleLoop duration (ns) = &quot;</span> + runCaseOne());<br>            System.out.println(i + <span class="hljs-string">&quot; SplitLoop  duration (ns) = &quot;</span> + runCaseTwo());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">runCaseOne</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.nanoTime();<br>        <span class="hljs-keyword">int</span> i = ITERATIONS;<br><br>        <span class="hljs-keyword">while</span> (--i != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">int</span> slot = i &amp; MASK;<br>            <span class="hljs-keyword">byte</span> b = (<span class="hljs-keyword">byte</span>) i;<br>            arrayA[slot] = b;<br>            arrayB[slot] = b;<br>            arrayC[slot] = b;<br>            arrayD[slot] = b;<br>            arrayE[slot] = b;<br>            arrayF[slot] = b;<br>        &#125;<br>        <span class="hljs-keyword">return</span> System.nanoTime() - start;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">runCaseTwo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.nanoTime();<br>        <span class="hljs-keyword">int</span> i = ITERATIONS;<br>        <span class="hljs-keyword">while</span> (--i != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">int</span> slot = i &amp; MASK;<br>            <span class="hljs-keyword">byte</span> b = (<span class="hljs-keyword">byte</span>) i;<br>            arrayA[slot] = b;<br>            arrayB[slot] = b;<br>            arrayC[slot] = b;<br>        &#125;<br>        i = ITERATIONS;<br>        <span class="hljs-keyword">while</span> (--i != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">int</span> slot = i &amp; MASK;<br>            <span class="hljs-keyword">byte</span> b = (<span class="hljs-keyword">byte</span>) i;<br>            arrayD[slot] = b;<br>            arrayE[slot] = b;<br>            arrayF[slot] = b;<br>        &#125;<br>        <span class="hljs-keyword">return</span> System.nanoTime() - start;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>乱序执行的证明：</p><p><a href="https://preshing.com/20120515/memory-reordering-caught-in-the-act/">原始参考</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Disorder</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>, b =<span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(;;) &#123;<br>            i++;<br>            x = <span class="hljs-number">0</span>; y = <span class="hljs-number">0</span>;<br>            a = <span class="hljs-number">0</span>; b = <span class="hljs-number">0</span>;<br>            Thread one = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                    <span class="hljs-comment">//由于线程one先启动，下面这句话让它等一等线程two. 读着可根据自己电脑的实际性能适当调整等待时间.</span><br>                    <span class="hljs-comment">//shortWait(100000);</span><br>                    a = <span class="hljs-number">1</span>;<br>                    x = b;<br>                &#125;<br>            &#125;);<br><br>            Thread other = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                    b = <span class="hljs-number">1</span>;<br>                    y = a;<br>                &#125;<br>            &#125;);<br>            one.start();other.start();<br>            one.join();other.join();<br>            String result = <span class="hljs-string">&quot;第&quot;</span> + i + <span class="hljs-string">&quot;次 (&quot;</span> + x + <span class="hljs-string">&quot;,&quot;</span> + y + <span class="hljs-string">&quot;）&quot;</span>;<br>            <span class="hljs-keyword">if</span>(x == <span class="hljs-number">0</span> &amp;&amp; y == <span class="hljs-number">0</span>) &#123;<br>                System.err.println(result);<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//System.out.println(result);</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shortWait</span><span class="hljs-params">(<span class="hljs-keyword">long</span> interval)</span></span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.nanoTime();<br>        <span class="hljs-keyword">long</span> end;<br>        <span class="hljs-keyword">do</span>&#123;<br>            end = System.nanoTime();<br>        &#125;<span class="hljs-keyword">while</span>(start + interval &gt;= end);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果顺序执行：xy结果可能只有 01 10 11</p><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/924461B6E26F4C0FB454988DDB85E1D8/90" alt="乱序结果"> </p><h6 id="5-3-如何保证有序性？"><a href="#5-3-如何保证有序性？" class="headerlink" title="5.3 如何保证有序性？"></a>5.3 如何保证有序性？</h6><p>x86在硬件层面：有序性保障CPU内存屏障 </p><ul><li>sfence：store 在sfence指令前的写操作当必须在sfence指令后的写操作前完成</li><li>Ifence：load 在Ifence指令前的读操作当必须在sfence指令后的读操作前完成</li><li>mfence：mix在mfence指令前的读写操作当必须在sfence指令后的读写操作前完成</li></ul><p>有序性保障intel lock汇编指令(java 的汇编指令)</p><p>JMM模型与内存屏障：Java内存模型中volatile变量在写操作之后会插入一个store屏障，在读操作之前会插入一个load屏障。一个类的final字段会在初始化后插入一个store屏障，来确保final字段在构造函数初始化完成并可被使用时可见</p><p>JSR内存屏障：</p><ul><li>LoadLoad屏障：在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕。</li><li>StoreStore屏障：对于这样的语句Store1; StoreStore; Store2，在Store2及后续写入操作执行前，保证Store1的写入操作对其它处理器可见。</li><li>LoadStore屏障：对于这样的语句Load1; LoadStore; Store2，在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕。</li><li>StoreLoad屏障：对于这样的语句Store1; StoreLoad; Load2，在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestVolatile</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> j;<br>&#125;<br></code></pre></td></tr></table></figure><p>volatile的实现细节：</p><ul><li>字节码层面 ACC_VOLATILE</li><li>JVM层面 volatile内存区的读写 都加屏障<ul><li>StoreStoreBarrier</li><li>volatile 写操作</li><li>StoreLoadBarrier</li><li>LoadLoadBarrier</li><li>volatile 读操作</li><li>LoadStoreBarrier</li></ul></li><li><a href="https://blog.csdn.net/qq_26222859/article/details/52235930">OS和硬件层面</a> hsdis - HotSpot Dis Assembler windows lock 指令实现 | MESI实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSync</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">n</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>synchronized的实现细节：</p><ul><li>字节码层面 ACC_SYNCHRONIZED monitorenter monitorexit</li><li>JVM层面 C C++ 调用了操作系统提供的同步机制</li><li>OS和硬件层面 X86 : lock cmpxchg / xxx <ul><li><a href="https://blog.csdn.net/21aspnet/article/details/88571740">https://blog.csdn.net/21aspnet/article/details/88571740</a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;一、ClassLoader自定义parent&quot;&gt;&lt;a href=&quot;#一、ClassLoader自定义parent&quot; class=&quot;headerlink&quot; title=&quot;一、ClassLoader自定义parent&quot;&gt;&lt;/a&gt;一、ClassLoader自定义pare</summary>
      
    
    
    
    <category term="JVM基础" scheme="https://woshiqianmo.github.io/categories/JVM%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JVM基础" scheme="https://woshiqianmo.github.io/tags/JVM%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>02-JVM基础</title>
    <link href="https://woshiqianmo.github.io/2021/04/18/JVM/02-JVM%E5%9F%BA%E7%A1%80/"/>
    <id>https://woshiqianmo.github.io/2021/04/18/JVM/02-JVM%E5%9F%BA%E7%A1%80/</id>
    <published>2021-04-18T13:07:00.000Z</published>
    <updated>2021-04-28T03:23:38.662Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、Class-Loading-Linking-Initlizing"><a href="#一、Class-Loading-Linking-Initlizing" class="headerlink" title="一、Class Loading Linking Initlizing"></a>一、Class Loading Linking Initlizing</h5><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/DB33376EAE424452BC0206C3F90CD356/21" alt="class cycle"></p><h5 id="二、ClassLorder-类加载器"><a href="#二、ClassLorder-类加载器" class="headerlink" title="二、ClassLorder 类加载器"></a>二、ClassLorder 类加载器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取具体哪个ClassLoader 类 </span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoaderLevel</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(String.class.getClassLoader());<span class="hljs-comment">//null 被Bootstrap加载</span><br>        System.out.println(sun.awt.HKSCS.class.getClassLoader());   <span class="hljs-comment">//null 被Bootstrap加载</span><br>   System.out.println(sun.net.spi.nameservice.dns.DNSNameService.class.getClassLoader());<br>        <span class="hljs-comment">//被 sun.misc.Launcher$ExtClassLoader 加载</span><br>        System.out.println(T002_ClassLoaderLevel.class.getClassLoader()); <span class="hljs-comment">//被sun.misc.Launcher$AppClassLoader 加载</span><br>     System.out.println(sun.net.spi.nameservice.dns.DNSNameService.class.getClassLoader().getClass().getClassLoader());<br>        System.out.println(T002_ClassLoaderLevel.class.getClassLoader().getClass().getClassLoader());<br><br>        System.out.println(<span class="hljs-keyword">new</span> T006_MSBClassLoader().getParent());<br>        System.out.println(ClassLoader.getSystemClassLoader());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/775348C9E18C4B4EAE04AC1F818E686B/18" alt="类加载器"></p><h5 id="三、双亲委派"><a href="#三、双亲委派" class="headerlink" title="三、双亲委派"></a>三、双亲委派</h5><ul><li>父加载器不是类加载器的加载器，也不是类加载器的父类加载器</li><li>双亲委派是一个孩子向父亲方向，然后父亲向孩子方向的双亲委派过程</li><li>为什么要搞双亲委派<ul><li>java.lang.String类由自定义类加载器加载行不行         不行 为了安全才搞双亲委派</li></ul></li></ul><p><img src="https://note.youdao.com/yws/public/resource/440b71dabe81b5ef9cc60f5976a645a6/xmlnote/8B0AA783DCCD4E5DB212AFCEBFA15F2E/17" alt="类加载过程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParentAndChild</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(ParentAndChild.class.getClassLoader()); <span class="hljs-comment">//APP</span><br>        System.out.println(ParentAndChild.class.getClassLoader().getClass().getClassLoader()); <span class="hljs-comment">// null</span><br>        System.out.println(ParentAndChild.class.getClassLoader().getParent()); <span class="hljs-comment">//ext</span><br>        System.out.println(ParentAndChild.class.getClassLoader().getParent().getParent()); <span class="hljs-comment">//null</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="四、父加载器的范围"><a href="#四、父加载器的范围" class="headerlink" title="四、父加载器的范围"></a>四、父加载器的范围</h5><ul><li>Launcher源码<ul><li>sun.boot.class.path<ul><li>Bootstrap ClassLoader加载路径</li></ul></li><li>java.ext.dirs<ul><li>ExtensionClassLoader加载路径</li></ul></li><li>java.class.path<ul><li>AppClassLoader加载路径</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoaderScope</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String pathBoot = System.getProperty(<span class="hljs-string">&quot;sun.boot.class.path&quot;</span>);<br>        System.out.println(pathBoot.replaceAll(<span class="hljs-string">&quot;;&quot;</span>, System.lineSeparator()));<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        String pathExt = System.getProperty(<span class="hljs-string">&quot;java.ext.dirs&quot;</span>);<br>        System.out.println(pathExt.replaceAll(<span class="hljs-string">&quot;;&quot;</span>, System.lineSeparator()));<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        String pathApp = System.getProperty(<span class="hljs-string">&quot;java.class.path&quot;</span>);<br>        System.out.println(pathApp.replaceAll(<span class="hljs-string">&quot;;&quot;</span>, System.lineSeparator()));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="五、自定义类加载器（模板设计模式）"><a href="#五、自定义类加载器（模板设计模式）" class="headerlink" title="五、自定义类加载器（模板设计模式）"></a>五、自定义类加载器（模板设计模式）</h5><ul><li>继承ClassLoader</li><li>重写模板方法findClass<ul><li>调用defineClass</li></ul></li><li>自定义类加载器加载自加密的class<ul><li>防止反编译</li><li>防止篡改</li></ul></li></ul><p>加载指定路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.mashibing.jvm.Hello;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MSBClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ClassLoader</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        File f = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;c:/test/&quot;</span>, name.replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>).concat(<span class="hljs-string">&quot;.class&quot;</span>));<br>        <span class="hljs-keyword">try</span> &#123;<br>            FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(f);<br>            ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>            <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">while</span> ((b=fis.read()) !=<span class="hljs-number">0</span>) &#123;<br>                baos.write(b);<br>            &#125;<br><br>            <span class="hljs-keyword">byte</span>[] bytes = baos.toByteArray();<br>            baos.close();<br>            fis.close();<span class="hljs-comment">//可以写的更加严谨</span><br><br>            <span class="hljs-keyword">return</span> defineClass(name, bytes, <span class="hljs-number">0</span>, bytes.length);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.findClass(name); <span class="hljs-comment">//throws ClassNotFoundException</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ClassLoader l = <span class="hljs-keyword">new</span> MSBClassLoader();<br>        Class clazz = l.loadClass(<span class="hljs-string">&quot;com.mashibing.jvm.Hello&quot;</span>);<br>        Class clazz1 = l.loadClass(<span class="hljs-string">&quot;com.mashibing.jvm.Hello&quot;</span>);<br><br>        System.out.println(clazz == clazz1);<br><br>        Hello h = (Hello)clazz.newInstance();<br>        h.m();<br><br>        System.out.println(l.getClass().getClassLoader());<br>        System.out.println(l.getParent());<br><br>        System.out.println(getSystemClassLoader());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoadClassByHand</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        Class clazz = LoadClassByHand.class.getClassLoader().loadClass(<span class="hljs-string">&quot;com.mashibing.jvm.classloader.ClassLoaderLevel&quot;</span>);<br>        System.out.println(clazz.getName());<br><br>        <span class="hljs-comment">//利用类加载器加载资源，参考坦克图片的加载</span><br>        <span class="hljs-comment">//LoadClassByHand.class.getClassLoader().getResourceAsStream(&quot;&quot;);</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>loadClass 源码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Loads the class with the specified &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt;.  The</span><br><span class="hljs-comment">    * default implementation of this method searches for classes in the</span><br><span class="hljs-comment">    * following order:</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * &lt;ol&gt;</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    *   &lt;li&gt;&lt;p&gt; Invoke &#123;<span class="hljs-doctag">@link</span> #findLoadedClass(String)&#125; to check if the class</span><br><span class="hljs-comment">    *   has already been loaded.  &lt;/p&gt;&lt;/li&gt;</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    *   &lt;li&gt;&lt;p&gt; Invoke the &#123;<span class="hljs-doctag">@link</span> #loadClass(String) &lt;tt&gt;loadClass&lt;/tt&gt;&#125; method</span><br><span class="hljs-comment">    *   on the parent class loader.  If the parent is &lt;tt&gt;null&lt;/tt&gt; the class</span><br><span class="hljs-comment">    *   loader built-in to the virtual machine is used, instead.  &lt;/p&gt;&lt;/li&gt;</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    *   &lt;li&gt;&lt;p&gt; Invoke the &#123;<span class="hljs-doctag">@link</span> #findClass(String)&#125; method to find the</span><br><span class="hljs-comment">    *   class.  &lt;/p&gt;&lt;/li&gt;</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * &lt;/ol&gt;</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * &lt;p&gt; If the class was found using the above steps, and the</span><br><span class="hljs-comment">    * &lt;tt&gt;resolve&lt;/tt&gt; flag is true, this method will then invoke the &#123;<span class="hljs-doctag">@link</span></span><br><span class="hljs-comment">    * #resolveClass(Class)&#125; method on the resulting &lt;tt&gt;Class&lt;/tt&gt; object.</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * &lt;p&gt; Subclasses of &lt;tt&gt;ClassLoader&lt;/tt&gt; are encouraged to override &#123;<span class="hljs-doctag">@link</span></span><br><span class="hljs-comment">    * #findClass(String)&#125;, rather than this method.  &lt;/p&gt;</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * &lt;p&gt; Unless overridden, this method synchronizes on the result of</span><br><span class="hljs-comment">    * &#123;<span class="hljs-doctag">@link</span> #getClassLoadingLock &lt;tt&gt;getClassLoadingLock&lt;/tt&gt;&#125; method</span><br><span class="hljs-comment">    * during the entire class loading process.</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span>  name</span><br><span class="hljs-comment">    *         The &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span>  resolve</span><br><span class="hljs-comment">    *         If &lt;tt&gt;true&lt;/tt&gt; then resolve the class</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span>  The resulting &lt;tt&gt;Class&lt;/tt&gt; object</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@throws</span>  ClassNotFoundException</span><br><span class="hljs-comment">    *          If the class could not be found</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="hljs-keyword">boolean</span> resolve)<br>       <span class="hljs-keyword">throws</span> ClassNotFoundException<br>   &#123;<br>       <span class="hljs-keyword">synchronized</span> (getClassLoadingLock(name)) &#123;<br>           <span class="hljs-comment">// First, check if the class has already been loaded</span><br>           Class&lt;?&gt; c = findLoadedClass(name);<br>           <span class="hljs-keyword">if</span> (c == <span class="hljs-keyword">null</span>) &#123;<br>               <span class="hljs-keyword">long</span> t0 = System.nanoTime();<br>               <span class="hljs-keyword">try</span> &#123;<br>                   <span class="hljs-keyword">if</span> (parent != <span class="hljs-keyword">null</span>) &#123;<br>                       c = parent.loadClass(name, <span class="hljs-keyword">false</span>);<br>                   &#125; <span class="hljs-keyword">else</span> &#123;<br>                       c = findBootstrapClassOrNull(name);<br>                   &#125;<br>               &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                   <span class="hljs-comment">// ClassNotFoundException thrown if class not found</span><br>                   <span class="hljs-comment">// from the non-null parent class loader</span><br>               &#125;<br><br>               <span class="hljs-keyword">if</span> (c == <span class="hljs-keyword">null</span>) &#123;<br>                   <span class="hljs-comment">// If still not found, then invoke findClass in order</span><br>                   <span class="hljs-comment">// to find the class.</span><br>                   <span class="hljs-keyword">long</span> t1 = System.nanoTime();<br>                   c = findClass(name);<br><br>                   <span class="hljs-comment">// this is the defining class loader; record the stats</span><br>                   sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);<br>                   sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);<br>                   sun.misc.PerfCounter.getFindClasses().increment();<br>               &#125;<br>           &#125;<br>           <span class="hljs-keyword">if</span> (resolve) &#123;<br>               resolveClass(c);<br>           &#125;<br>           <span class="hljs-keyword">return</span> c;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="六、加密"><a href="#六、加密" class="headerlink" title="六、加密"></a>六、加密</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.mashibing.jvm.Hello;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MSBClassLoaderWithEncription</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ClassLoader</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> seed = <span class="hljs-number">0B10110110</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        File f = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;c:/test/&quot;</span>, name.replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>).concat(<span class="hljs-string">&quot;.msbclass&quot;</span>));<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(f);<br>            ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>            <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">while</span> ((b=fis.read()) !=<span class="hljs-number">0</span>) &#123;<br>                baos.write(b ^ seed);<br>            &#125;<br><br>            <span class="hljs-keyword">byte</span>[] bytes = baos.toByteArray();<br>            baos.close();<br>            fis.close();<span class="hljs-comment">//可以写的更加严谨</span><br><br>            <span class="hljs-keyword">return</span> defineClass(name, bytes, <span class="hljs-number">0</span>, bytes.length);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.findClass(name); <span class="hljs-comment">//throws ClassNotFoundException</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        encFile(<span class="hljs-string">&quot;com.mashibing.jvm.hello&quot;</span>);<br><br>        ClassLoader l = <span class="hljs-keyword">new</span> MSBClassLoaderWithEncription();<br>        Class clazz = l.loadClass(<span class="hljs-string">&quot;com.mashibing.jvm.Hello&quot;</span>);<br>        Hello h = (Hello)clazz.newInstance();<br>        h.m();<br><br>        System.out.println(l.getClass().getClassLoader());<br>        System.out.println(l.getParent());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">encFile</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        File f = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;c:/test/&quot;</span>, name.replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>).concat(<span class="hljs-string">&quot;.class&quot;</span>));<br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(f);<br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;c:/test/&quot;</span>, name.replaceAll(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>).concat(<span class="hljs-string">&quot;.msbclass&quot;</span>)));<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>((b = fis.read()) != -<span class="hljs-number">1</span>) &#123;<br>            fos.write(b ^ seed);<br>        &#125;<br><br>        fis.close();<br>        fos.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="七、编译器"><a href="#七、编译器" class="headerlink" title="七、编译器"></a>七、编译器</h5><ul><li>解释器<ul><li>bytecode intepreter</li></ul></li><li>JIT<ul><li>Just In-Time compiler</li></ul></li><li>混合模式<ul><li>混合使用解释器 + 热点代码编译</li><li>其实阶段采用解释执行</li><li>热点代码检测<ul><li>多次被调用的方法（方法计数器：监测方法执行频率）</li><li>多次被调用的循环（循环计数器：检测循环执行频率）</li><li>进行编译</li></ul></li></ul></li><li>-Xmixed 默认为混合模式，开始解释执行，启动速度较快对热点代码进行检测和编译</li><li>-Xint 使用解释模式，启动很快，执行稍慢</li><li>-Xcomp 使用纯编译模式，执行很快，启动很慢</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WayToRun</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10_0000</span>; i++)<br>            m();<br><br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10_0000</span>; i++) &#123;<br>            m();<br>        &#125;<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10_0000L</span>; i++) &#123;<br>            <span class="hljs-keyword">long</span> j = i%<span class="hljs-number">3</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="八、lazyloading"><a href="#八、lazyloading" class="headerlink" title="八、lazyloading"></a>八、lazyloading</h5><ul><li>严格讲应该叫lazyInitializing</li><li>JVM规范并没有规定何时加载</li><li>但是严格规定了什么时候必须初始化<ul><li>new getstatic putstatic invokestatic 指令，访问final变量除外</li><li>java.lang.reflect对类进行反射调用时</li><li>初始化子类的时候，父类首先初始化</li><li>虚拟机启动时，被执行的主类必须初始化</li><li>动态语言支持java.lang.invoke.MethodHandle解析的结果为REF_getstatic REF_putstatic REF_invokestatic 的方法句柄时，该类必须初始化</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyLoading</span> </span>&#123; <span class="hljs-comment">//严格讲应该叫lazy initialzing，因为java虚拟机规范并没有严格规定什么时候必须loading,但严格规定了什么时候initialzing</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//P p;</span><br>        <span class="hljs-comment">//X x = new X();</span><br>        <span class="hljs-comment">//System.out.println(P.i);</span><br>        <span class="hljs-comment">//System.out.println(P.j);</span><br>        Class.forName(<span class="hljs-string">&quot;com.mashibing.jvm.c2_classloader.LazyLoading$P&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">P</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">8</span>;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> j = <span class="hljs-number">9</span>;<br>        <span class="hljs-keyword">static</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;P&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">X</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">P</span> </span>&#123;<br>        <span class="hljs-keyword">static</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;X&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h5><p>类加载-初始化</p><p>加载过程</p><ul><li>Loading<ul><li>双亲委派为了安全</li><li>LazyLoading物种情况</li><li>ClassLoader的源码<ul><li>findInCache -&gt; parent.loadClass -&gt; findClass()</li></ul></li><li>自定义类加载器<ul><li>1.extends ClassLoader</li><li>2.overwrite findClass() -&gt; defineClass(byte[] -&gt; Class clazz)</li><li>3.加密</li></ul></li><li>混合执行 编译执行 解释执行<ul><li>检测热点代码：-XX:CompileThreshold = 10000</li></ul></li></ul></li><li>Linking<ul><li>1.Verification</li><li>2.Preparation</li><li>3.Resolution</li></ul></li><li>Initializing</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;一、Class-Loading-Linking-Initlizing&quot;&gt;&lt;a href=&quot;#一、Class-Loading-Linking-Initlizing&quot; class=&quot;headerlink&quot; title=&quot;一、Class Loading Linking </summary>
      
    
    
    
    <category term="JVM基础" scheme="https://woshiqianmo.github.io/categories/JVM%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JVM基础" scheme="https://woshiqianmo.github.io/tags/JVM%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>01-JVM基础</title>
    <link href="https://woshiqianmo.github.io/2021/04/18/JVM/01-JVM%E5%9F%BA%E7%A1%80/"/>
    <id>https://woshiqianmo.github.io/2021/04/18/JVM/01-JVM%E5%9F%BA%E7%A1%80/</id>
    <published>2021-04-18T11:16:34.000Z</published>
    <updated>2021-04-26T01:54:23.903Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、Java从编码到执行"><a href="#一、Java从编码到执行" class="headerlink" title="一、Java从编码到执行"></a>一、Java从编码到执行</h5><p>javac x.java —&gt; javac —&gt; x.class —&gt; ClassLoader（java类库装载到classLoader） –&gt; 字节码解释器/JIT即时编译器–&gt;执行引擎—&gt;OS硬件</p><h5 id="二、JVM"><a href="#二、JVM" class="headerlink" title="二、JVM"></a>二、JVM</h5><ul><li> 从跨平台的语言到跨语言的平台</li><li>java、scala、kotlin、groovy、clojure、jython、jruby…</li></ul><h5 id="三、JVM"><a href="#三、JVM" class="headerlink" title="三、JVM"></a>三、JVM</h5><ul><li>jvm 是一种规范<ul><li><a href="https://docs.oracle.com/en/java/javase/13/">https://docs.oracle.com/en/java/javase/13/</a></li><li><a href="https://docs.oracle.com/en/java/specs/index.html">https://docs.oracle.com/en/java/specs/index.html</a></li></ul></li><li>虚拟出来的一台计算机<ul><li>字节码指令集（汇编语言）</li><li>内存管理：堆、栈、方法区等</li></ul></li></ul><h5 id="四、常见的JVM实现"><a href="#四、常见的JVM实现" class="headerlink" title="四、常见的JVM实现"></a>四、常见的JVM实现</h5><ul><li>Hotspot<ul><li>oracle官网，我们做试验用的JVM</li><li>java -version</li></ul></li><li>Jrockit<ul><li>BEA，曾经号称世界上最快的JVM</li><li>被Oracle收购，合并于hotspot</li></ul></li><li>J9 - IBM</li><li>Microsoft VM</li><li>TaobaoVM<ul><li>hotspot深度定制</li></ul></li><li>LiquidVM<ul><li>直接针对硬件</li></ul></li><li>azuzing<ul><li>最新垃圾回收的业界标杆(垃圾回收快)</li><li><a href="http://www.azul.com/">www.azul.com</a></li></ul></li></ul><h5 id="五、JDK-JRE-JVM"><a href="#五、JDK-JRE-JVM" class="headerlink" title="五、JDK JRE JVM"></a>五、JDK JRE JVM</h5><p>JDK = jre + development kit</p><p>JRE = jvm + core lib</p><p>JVM</p><h5 id="六、Class-File-Format"><a href="#六、Class-File-Format" class="headerlink" title="六、Class File Format"></a>六、Class File Format</h5><ul><li><p>二进制字节流</p></li><li><p>数据类型： u1 u2 u4 u8 和 _info(表类型)</p><ul><li>_info 的来源是hotspot源码中的写法</li></ul></li><li><p>查看16进制格式的ClassFile</p><ul><li>sublime 、notepad</li><li>IDEA插件 - BinEd</li></ul></li><li><p>有很多可以观察ByteCode方法：</p><ul><li>javap</li><li>JBE - 可以直接修改</li><li>JClassLib - IDEA插件之一</li></ul></li><li><p>classfile构成</p><ul><li><p>ClassFile{</p><p>​    u4 magic;    CA FE BA BE     4个字节</p><p>​    u2 minor_version; 00 00 版本52.0    2个字节</p><p>​    u2 major_version; 00 34 JDK版本    2个字节</p><p>​    u2 constant_pool_count; 常量池 65536    从1开始</p><p>​    cp_info constant_pool [constant_pool_count - 1]; 长度为65535 </p><p>​    u2 access_flags    修饰词 public final 等</p><p>​    u2 this_class</p><p>​    u2 super_class</p><p>​    u2 interfaces _count</p><p>​    u2 interfaces 接口个数</p><p>​    u2 fields_count</p><p>​    u2 fields    属性</p><p>​    u2 methods_count</p><p>​    u2 methods    方法个数</p><p>​    u2 attributes    其它附加属性</p><p>}</p></li></ul></li></ul><p>Javap -v xx.class 查看.class文件内容</p><h5 id="七、Constant-pool常量池"><a href="#七、Constant-pool常量池" class="headerlink" title="七、Constant pool常量池"></a>七、Constant pool常量池</h5><p>所有第一个字节代表标志</p><ul><li>1.CONSTANT_Utf8_info    </li><li>3.CONSTANT_Integer_info</li><li>4.CONSTANT_Float_info</li><li>5.CONSTANT_Long_info</li><li>6.CONSTANT_Dobule_info</li><li>7.CONSTANT_Class_info</li><li>8.CONSTANT_String_info</li><li>9.CONSTANT_Fieldref_info</li><li>10.CONSTANT_Methodref_info</li><li>11.CONSTANT_InterfaceMethodref_info</li><li>12.CONSTANT_NameAndType_info</li><li>15.CONSTANT_MethodHandle_info</li><li>16.CONSTANT_MethodType_info</li><li>18.CONSTANT_InvokeDynamic_info</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;一、Java从编码到执行&quot;&gt;&lt;a href=&quot;#一、Java从编码到执行&quot; class=&quot;headerlink&quot; title=&quot;一、Java从编码到执行&quot;&gt;&lt;/a&gt;一、Java从编码到执行&lt;/h5&gt;&lt;p&gt;javac x.java —&amp;gt; javac —&amp;gt;</summary>
      
    
    
    
    <category term="JVM基础" scheme="https://woshiqianmo.github.io/categories/JVM%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JVM基础" scheme="https://woshiqianmo.github.io/tags/JVM%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>09-多线程与高并发</title>
    <link href="https://woshiqianmo.github.io/2021/04/18/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/09-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    <id>https://woshiqianmo.github.io/2021/04/18/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/09-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/</id>
    <published>2021-04-18T07:06:39.000Z</published>
    <updated>2021-04-18T09:54:56.202Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、ParallelStreamApi"><a href="#一、ParallelStreamApi" class="headerlink" title="一、ParallelStreamApi"></a>一、ParallelStreamApi</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T13_ParallelStreamAPI</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>List&lt;Integer&gt; nums = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>Random r = <span class="hljs-keyword">new</span> Random();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10000</span>; i++) nums.add(<span class="hljs-number">1000000</span> + r.nextInt(<span class="hljs-number">1000000</span>));<br><br><span class="hljs-comment">//System.out.println(nums);</span><br><br><span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>nums.forEach(v-&gt;isPrime(v));<br><span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>System.out.println(end - start);<br><br><span class="hljs-comment">//使用parallel stream api</span><br><br>start = System.currentTimeMillis();<br>nums.parallelStream().forEach(T13_ParallelStreamAPI::isPrime);<br>end = System.currentTimeMillis();<br><br>System.out.println(end - start);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPrime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>; i&lt;=num/<span class="hljs-number">2</span>; i++) &#123;<br><span class="hljs-keyword">if</span>(num % i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>线程中有个方法调用了native方法，阻塞，但是线程显示还是runnable状态，可以通过设置时间，多长时间没有返回结果，直接释方法</p><h5 id="二、JMH"><a href="#二、JMH" class="headerlink" title="二、JMH"></a>二、JMH</h5><ul><li>Java Microbenchmark Harness java方法性能测试</li></ul><p><a href="http://openjdk.java.net/projects/code-tools/jmh/">JMH官网</a></p><h6 id="1-创建JMH测试"><a href="#1-创建JMH测试" class="headerlink" title="1. 创建JMH测试"></a>1. 创建JMH测试</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>   &lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>            xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>       &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br>   <br>       &lt;properties&gt;<br>           &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;<br>           &lt;encoding&gt;UTF-8&lt;/encoding&gt;<br>           &lt;java.version&gt;1.8&lt;/java.version&gt;<br>           &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;<br>           &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;<br>       &lt;/properties&gt;<br>   <br>       &lt;groupId&gt;mashibing.com&lt;/groupId&gt;<br>       &lt;artifactId&gt;HelloJMH2&lt;/artifactId&gt;<br>       &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br>   <br>   <br>       &lt;dependencies&gt;<br>           &lt;!-- https:<span class="hljs-comment">//mvnrepository.com/artifact/org.openjdk.jmh/jmh-core --&gt;</span><br>           &lt;dependency&gt;<br>               &lt;groupId&gt;org.openjdk.jmh&lt;/groupId&gt;<br>               &lt;artifactId&gt;jmh-core&lt;/artifactId&gt;<br>               &lt;version&gt;1.21&lt;/version&gt;<br>           &lt;/dependency&gt;<br>   <br>           &lt;!-- https:<span class="hljs-comment">//mvnrepository.com/artifact/org.openjdk.jmh/jmh-generator-annprocess --&gt;</span><br>           &lt;dependency&gt;<br>               &lt;groupId&gt;org.openjdk.jmh&lt;/groupId&gt;<br>               &lt;artifactId&gt;jmh-generator-annprocess&lt;/artifactId&gt;<br>               &lt;version&gt;1.21&lt;/version&gt;<br>               &lt;scope&gt;test&lt;/scope&gt;<br>           &lt;/dependency&gt;<br>       &lt;/dependencies&gt;<br>   &lt;/project&gt;<br></code></pre></td></tr></table></figure><h6 id="2-idea安装JMH插件-JMH-plugin-v1-0-3"><a href="#2-idea安装JMH插件-JMH-plugin-v1-0-3" class="headerlink" title="2. idea安装JMH插件 JMH plugin v1.0.3"></a>2. idea安装JMH插件 JMH plugin v1.0.3</h6><h6 id="3-由于用到了注解，打开运行程序注解配置"><a href="#3-由于用到了注解，打开运行程序注解配置" class="headerlink" title="3. 由于用到了注解，打开运行程序注解配置"></a>3. 由于用到了注解，打开运行程序注解配置</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">&gt; compiler -&gt; Annotation Processors -&gt; Enable Annotation Processing<br></code></pre></td></tr></table></figure><h6 id="4-定义需要测试类PS-ParallelStream"><a href="#4-定义需要测试类PS-ParallelStream" class="headerlink" title="4. 定义需要测试类PS (ParallelStream)"></a>4. 定义需要测试类PS (ParallelStream)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PS</span> </span>&#123;<br><span class="hljs-keyword">static</span> List&lt;Integer&gt; nums = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><span class="hljs-keyword">static</span> &#123;<br>Random r = <span class="hljs-keyword">new</span> Random();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) nums.add(<span class="hljs-number">1000000</span> + r.nextInt(<span class="hljs-number">1000000</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">foreach</span><span class="hljs-params">()</span> </span>&#123;<br>nums.forEach(v-&gt;isPrime(v));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parallel</span><span class="hljs-params">()</span> </span>&#123;<br>nums.parallelStream().forEach(PS::isPrime);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPrime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>; i&lt;=num/<span class="hljs-number">2</span>; i++) &#123;<br><span class="hljs-keyword">if</span>(num % i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="5-写单元测试"><a href="#5-写单元测试" class="headerlink" title="5. 写单元测试"></a>5. 写单元测试</h6><p>这个测试类一定要在test package下面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.openjdk.jmh.annotations.Benchmark;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.jupiter.api.Assertions.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PSTest</span> </span>&#123;<br>    <span class="hljs-meta">@Benchmark</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testForEach</span><span class="hljs-params">()</span> </span>&#123;<br>        PS.foreach();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="6-运行测试类，如果遇到下面的错误："><a href="#6-运行测试类，如果遇到下面的错误：" class="headerlink" title="6. 运行测试类，如果遇到下面的错误："></a>6. 运行测试类，如果遇到下面的错误：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ERROR: org.openjdk.jmh.runner.RunnerException: ERROR: <span class="hljs-function">Exception <span class="hljs-keyword">while</span> trying to acquire the JMH <span class="hljs-title">lock</span> <span class="hljs-params">(C:\WINDOWS\/jmh.lock)</span>: C:\WINDOWS\jmh.<span class="hljs-title">lock</span> <span class="hljs-params">(拒绝访问。)</span>, exiting. Use -Djmh.ignoreLock</span>=<span class="hljs-keyword">true</span> to forcefully <span class="hljs-keyword">continue</span>.<br>at org.openjdk.jmh.runner.Runner.run(Runner.java:<span class="hljs-number">216</span>)<br>at org.openjdk.jmh.Main.main(Main.java:<span class="hljs-number">71</span>)<br></code></pre></td></tr></table></figure><p>这个错误是因为JMH运行需要访问系统的TMP目录，解决办法是：</p><p>打开RunConfiguration -&gt; Environment Variables -&gt; include system environment viables</p><h6 id="7-阅读测试报告"><a href="#7-阅读测试报告" class="headerlink" title="7. 阅读测试报告"></a>7. 阅读测试报告</h6><h6 id="JMH中的基本概念"><a href="#JMH中的基本概念" class="headerlink" title="JMH中的基本概念"></a>JMH中的基本概念</h6><ul><li>Warmup 预热，由于JVM中对于特定代码会存在优化（本地化），预热对于测试结果很重要</li><li>Mesurement 总共执行多少次测试</li><li>Timeout</li><li>Threads 线程数，由fork指定</li><li>Benchmark mode 基准测试的模式</li><li>Benchmark 测试哪一段代码</li></ul><p><a href="http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/">官方样例</a></p><h5 id="三、Disruptor介绍"><a href="#三、Disruptor介绍" class="headerlink" title="三、Disruptor介绍"></a>三、Disruptor介绍</h5><p><a href="http://lmax-exchange.github.io/disruptor/">主页</a>、<a href="https://github.com/LMAX-Exchange/disruptor">源码</a>、<a href="https://github.com/LMAX-Exchange/disruptor/wiki/Getting-Started">GettingStarted</a>、<a href="http://lmax-exchange.github.io/disruptor/docs/index.html">api</a>、<a href="https://mvnrepository.com/artifact/com.lmax/disruptor">maven</a></p><ul><li>disruptor - 分裂、瓦解 内存中存放队列</li><li>disruptor 特点：<ul><li>对比ConcurrentLinkedQueue : 链表实现 </li><li>JDK中没有ConcurrentArrayQueue</li><li>Disruptor是数组实现的</li><li>无锁，高并发，使用环形Buffer，直接覆盖（不用清除）旧的数据，降低GC频率</li><li>实现了基于事件的生产者消费者模式（观察者模式）</li></ul></li><li>速度最快的MQ</li><li>性能极高，无锁cas，单机支持高并发</li></ul><h6 id="RingBuffer"><a href="#RingBuffer" class="headerlink" title="RingBuffer"></a>RingBuffer</h6><p>环形队列</p><p>RingBuffer的序号，指向下一个可用的元素</p><p>采用数组实现，没有首尾指针</p><p>对比ConcurrentLinkedQueue，用数组实现的速度更快</p><blockquote><p>假如长度为8，当添加到第12个元素的时候在哪个序号上呢？用12%8决定</p><p>当Buffer被填满的时候到底是覆盖还是等待，由Producer决定</p><p>长度设为2的n次幂，利于二进制计算，例如：12%8 = 12 &amp; (8 - 1) pos = num &amp; (size -1)</p></blockquote><h6 id="Disruptor开发步骤"><a href="#Disruptor开发步骤" class="headerlink" title="Disruptor开发步骤"></a>Disruptor开发步骤</h6><ul><li><p>1.定义Event - 队列中需要处理的元素</p></li><li><p>2.定义Event工厂，用于填充队列</p></li><li><blockquote><p>这里牵扯到效率问题：disruptor初始化的时候，会调用Event工厂，对ringBuffer进行内存的提前分配</p><p>GC产频率会降低</p></blockquote></li><li><p>3.定义EventHandler（消费者），处理容器中的元素</p></li></ul><h6 id="事件发布模板"><a href="#事件发布模板" class="headerlink" title="事件发布模板"></a>事件发布模板</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">long</span> sequence = ringBuffer.next();  <span class="hljs-comment">// Grab the next sequence</span><br><span class="hljs-keyword">try</span> &#123;<br>    LongEvent event = ringBuffer.get(sequence); <span class="hljs-comment">// Get the entry in the Disruptor</span><br>    <span class="hljs-comment">// for the sequence</span><br>    event.set(<span class="hljs-number">8888L</span>);  <span class="hljs-comment">// Fill with data</span><br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    ringBuffer.publish(sequence);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="使用EventTranslator发布事件"><a href="#使用EventTranslator发布事件" class="headerlink" title="使用EventTranslator发布事件"></a>使用EventTranslator发布事件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//===============================================================</span><br>        EventTranslator&lt;LongEvent&gt; translator1 = <span class="hljs-keyword">new</span> EventTranslator&lt;LongEvent&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">translateTo</span><span class="hljs-params">(LongEvent event, <span class="hljs-keyword">long</span> sequence)</span> </span>&#123;<br>                event.set(<span class="hljs-number">8888L</span>);<br>            &#125;<br>        &#125;;<br><br>        ringBuffer.publishEvent(translator1);<br><br>        <span class="hljs-comment">//===============================================================</span><br>        EventTranslatorOneArg&lt;LongEvent, Long&gt; translator2 = <span class="hljs-keyword">new</span> EventTranslatorOneArg&lt;LongEvent, Long&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">translateTo</span><span class="hljs-params">(LongEvent event, <span class="hljs-keyword">long</span> sequence, Long l)</span> </span>&#123;<br>                event.set(l);<br>            &#125;<br>        &#125;;<br><br>        ringBuffer.publishEvent(translator2, <span class="hljs-number">7777L</span>);<br><br>        <span class="hljs-comment">//===============================================================</span><br>        EventTranslatorTwoArg&lt;LongEvent, Long, Long&gt; translator3 = <span class="hljs-keyword">new</span> EventTranslatorTwoArg&lt;LongEvent, Long, Long&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">translateTo</span><span class="hljs-params">(LongEvent event, <span class="hljs-keyword">long</span> sequence, Long l1, Long l2)</span> </span>&#123;<br>                event.set(l1 + l2);<br>            &#125;<br>        &#125;;<br><br>        ringBuffer.publishEvent(translator3, <span class="hljs-number">10000L</span>, <span class="hljs-number">10000L</span>);<br><br>        <span class="hljs-comment">//===============================================================</span><br>        EventTranslatorThreeArg&lt;LongEvent, Long, Long, Long&gt; translator4 = <span class="hljs-keyword">new</span> EventTranslatorThreeArg&lt;LongEvent, Long, Long, Long&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">translateTo</span><span class="hljs-params">(LongEvent event, <span class="hljs-keyword">long</span> sequence, Long l1, Long l2, Long l3)</span> </span>&#123;<br>                event.set(l1 + l2 + l3);<br>            &#125;<br>        &#125;;<br><br>        ringBuffer.publishEvent(translator4, <span class="hljs-number">10000L</span>, <span class="hljs-number">10000L</span>, <span class="hljs-number">1000L</span>);<br><br>        <span class="hljs-comment">//===============================================================</span><br>        EventTranslatorVararg&lt;LongEvent&gt; translator5 = <span class="hljs-keyword">new</span> EventTranslatorVararg&lt;LongEvent&gt;() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">translateTo</span><span class="hljs-params">(LongEvent event, <span class="hljs-keyword">long</span> sequence, Object... objects)</span> </span>&#123;<br>                <span class="hljs-keyword">long</span> result = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span>(Object o : objects) &#123;<br>                    <span class="hljs-keyword">long</span> l = (Long)o;<br>                    result += l;<br>                &#125;<br>                event.set(result);<br>            &#125;<br>        &#125;;<br><br>        ringBuffer.publishEvent(translator5, <span class="hljs-number">10000L</span>, <span class="hljs-number">10000L</span>, <span class="hljs-number">10000L</span>, <span class="hljs-number">10000L</span>);<br></code></pre></td></tr></table></figure><h6 id="使用Lamda表达式"><a href="#使用Lamda表达式" class="headerlink" title="使用Lamda表达式"></a>使用Lamda表达式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.lmax.disruptor.RingBuffer;<br><span class="hljs-keyword">import</span> com.lmax.disruptor.dsl.Disruptor;<br><span class="hljs-keyword">import</span> com.lmax.disruptor.util.DaemonThreadFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main03</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// Specify the size of the ring buffer, must be power of 2.</span><br>        <span class="hljs-keyword">int</span> bufferSize = <span class="hljs-number">1024</span>;<br><br>        <span class="hljs-comment">// Construct the Disruptor</span><br>        Disruptor&lt;LongEvent&gt; disruptor = <span class="hljs-keyword">new</span> Disruptor&lt;&gt;(LongEvent::<span class="hljs-keyword">new</span>, bufferSize, DaemonThreadFactory.INSTANCE);<br><br>        <span class="hljs-comment">// Connect the handler</span><br>        disruptor.handleEventsWith((event, sequence, endOfBatch) -&gt; System.out.println(<span class="hljs-string">&quot;Event: &quot;</span> + event));<br><br>        <span class="hljs-comment">// Start the Disruptor, starts all threads running</span><br>        disruptor.start();<br><br>        <span class="hljs-comment">// Get the ring buffer from the Disruptor to be used for publishing.</span><br>        RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.getRingBuffer();<br><br><br>        ringBuffer.publishEvent((event, sequence) -&gt; event.set(<span class="hljs-number">10000L</span>));<br><br>        System.in.read();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="ProducerType生产者线程模式"><a href="#ProducerType生产者线程模式" class="headerlink" title="ProducerType生产者线程模式"></a>ProducerType生产者线程模式</h6><blockquote><p>ProducerType有两种模式 Producer.MULTI和Producer.SINGLE</p><p>默认是MULTI，表示在多线程模式下产生sequence</p><p>如果确认是单线程生产者，那么可以指定SINGLE，效率会提升</p><p>如果是多个生产者（多线程），但模式指定为SINGLE，会出什么问题呢？</p></blockquote><h6 id="等待策略"><a href="#等待策略" class="headerlink" title="等待策略"></a>等待策略</h6><p>1，(常用）BlockingWaitStrategy：通过线程阻塞的方式，等待生产者唤醒，被唤醒后，再循环检查依赖的sequence是否已经消费。</p><p>2，BusySpinWaitStrategy：线程一直自旋等待，可能比较耗cpu</p><p>3，LiteBlockingWaitStrategy：线程阻塞等待生产者唤醒，与BlockingWaitStrategy相比，区别在signalNeeded.getAndSet,如果两个线程同时访问一个访问waitfor,一个访问signalAll时，可以减少lock加锁次数.</p><p>4，LiteTimeoutBlockingWaitStrategy：与LiteBlockingWaitStrategy相比，设置了阻塞时间，超过时间后抛异常。</p><p>5，PhasedBackoffWaitStrategy：根据时间参数和传入的等待策略来决定使用哪种等待策略</p><p>6，TimeoutBlockingWaitStrategy：相对于BlockingWaitStrategy来说，设置了等待时间，超过后抛异常7，（常用）YieldingWaitStrategy：尝试100次，然后Thread.yield()让出cpu</p><p>8,（常用）SleepingWaitStrategy : sleep</p><h6 id="消费者异常处理"><a href="#消费者异常处理" class="headerlink" title="消费者异常处理"></a>消费者异常处理</h6><p>默认：disruptor.setDefaultExceptionHandler()</p><p>覆盖：disruptor.handleExceptionFor().with()</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;一、ParallelStreamApi&quot;&gt;&lt;a href=&quot;#一、ParallelStreamApi&quot; class=&quot;headerlink&quot; title=&quot;一、ParallelStreamApi&quot;&gt;&lt;/a&gt;一、ParallelStreamApi&lt;/h5&gt;&lt;figu</summary>
      
    
    
    
    <category term="多线程与高并发" scheme="https://woshiqianmo.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="多线程与高并发" scheme="https://woshiqianmo.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>08-多线程与高并发</title>
    <link href="https://woshiqianmo.github.io/2021/04/18/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/08-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    <id>https://woshiqianmo.github.io/2021/04/18/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/08-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/</id>
    <published>2021-04-18T05:35:48.000Z</published>
    <updated>2021-04-18T07:03:35.782Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、线程池-SingleThreadPool-保证扔进去的任务顺序执行"><a href="#一、线程池-SingleThreadPool-保证扔进去的任务顺序执行" class="headerlink" title="一、线程池 - SingleThreadPool 保证扔进去的任务顺序执行"></a>一、线程池 - SingleThreadPool 保证扔进去的任务顺序执行</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleThreadPool</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//Arrays 数组工具类</span><br>        <span class="hljs-comment">//Collections 容器的工具类</span><br>        <span class="hljs-comment">//Executors 线程池工具类（线程池的工厂）</span><br>ExecutorService service = Executors.newSingleThreadExecutor();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++) &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> j = i;<br>service.execute(()-&gt;&#123;<br><br>System.out.println(j + <span class="hljs-string">&quot; &quot;</span> + Thread.currentThread().getName());<br>&#125;);<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1618724786137.png" alt="SingleThreadPool参数"></p><h5 id="二、线程池-CachedPool"><a href="#二、线程池-CachedPool" class="headerlink" title="二、线程池 - CachedPool"></a>二、线程池 - CachedPool</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CachedPool</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>ExecutorService service = Executors.newCachedThreadPool();<br>System.out.println(service);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>service.execute(() -&gt; &#123;<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">500</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>System.out.println(Thread.currentThread().getName());<br>&#125;);<br>&#125;<br>System.out.println(service);<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">80</span>);<br>System.out.println(service);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1618724734351.png" alt="CachedPool参数"></p><h5 id="三、线程池-FixedThreadPool"><a href="#三、线程池-FixedThreadPool" class="headerlink" title="三、线程池 - FixedThreadPool"></a>三、线程池 - FixedThreadPool</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程池的概念</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.Future;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FixedThreadPool</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException </span>&#123;<br><span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>getPrime(<span class="hljs-number">1</span>, <span class="hljs-number">200000</span>); <br><span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>System.out.println(end - start);<br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> cpuCoreNum = <span class="hljs-number">4</span>;<br><br>ExecutorService service = Executors.newFixedThreadPool(cpuCoreNum);<br><br>MyTask t1 = <span class="hljs-keyword">new</span> MyTask(<span class="hljs-number">1</span>, <span class="hljs-number">80000</span>); <span class="hljs-comment">//1-5 5-10 10-15 15-20</span><br>MyTask t2 = <span class="hljs-keyword">new</span> MyTask(<span class="hljs-number">80001</span>, <span class="hljs-number">130000</span>);<br>MyTask t3 = <span class="hljs-keyword">new</span> MyTask(<span class="hljs-number">130001</span>, <span class="hljs-number">170000</span>);<br>MyTask t4 = <span class="hljs-keyword">new</span> MyTask(<span class="hljs-number">170001</span>, <span class="hljs-number">200000</span>);<br><br>Future&lt;List&lt;Integer&gt;&gt; f1 = service.submit(t1);<br>Future&lt;List&lt;Integer&gt;&gt; f2 = service.submit(t2);<br>Future&lt;List&lt;Integer&gt;&gt; f3 = service.submit(t3);<br>Future&lt;List&lt;Integer&gt;&gt; f4 = service.submit(t4);<br><br>start = System.currentTimeMillis();<br>f1.get();<br>f2.get();<br>f3.get();<br>f4.get();<br>end = System.currentTimeMillis();<br>System.out.println(end - start);<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">List</span>&lt;<span class="hljs-title">Integer</span>&gt;&gt; </span>&#123;<br><span class="hljs-keyword">int</span> startPos, endPos;<br><br>MyTask(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> e) &#123;<br><span class="hljs-keyword">this</span>.startPos = s;<br><span class="hljs-keyword">this</span>.endPos = e;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>List&lt;Integer&gt; r = getPrime(startPos, endPos);<br><span class="hljs-keyword">return</span> r;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPrime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>; i&lt;=num/<span class="hljs-number">2</span>; i++) &#123;<br><span class="hljs-keyword">if</span>(num % i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title">getPrime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;<br>List&lt;Integer&gt; results = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=start; i&lt;=end; i++) &#123;<br><span class="hljs-keyword">if</span>(isPrime(i)) results.add(i);<br>&#125;<br><br><span class="hljs-keyword">return</span> results;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1618725130448.png" alt="FixedThreadPool参数"></p><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1618725246126.png" alt="调整线程池的大小"></p><h5 id="四、线程池-ScheduledPool-定时任务线程"><a href="#四、线程池-ScheduledPool-定时任务线程" class="headerlink" title="四、线程池 - ScheduledPool 定时任务线程"></a>四、线程池 - ScheduledPool 定时任务线程</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.ScheduledExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScheduledPool</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>ScheduledExecutorService service = Executors.newScheduledThreadPool(<span class="hljs-number">4</span>);<br>service.scheduleAtFixedRate(()-&gt;&#123;<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.MILLISECONDS.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">1000</span>));<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>System.out.println(Thread.currentThread().getName());<br>&#125;, <span class="hljs-number">0</span>, <span class="hljs-number">500</span>, TimeUnit.MILLISECONDS);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1618725660696.png" alt="ScheduleExcutorService源码"></p><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1618725687636.png" alt="ScheduledThreadPoolExecutor源码"></p><blockquote><p>Secheduled定时任务线程池</p><p>​    quartz、cron</p><p>面试：假如提供一个闹钟服务，订阅这个服务的人特别多，10亿人，怎么优化？</p></blockquote><h5 id="五、自定义拒绝策略"><a href="#五、自定义拒绝策略" class="headerlink" title="五、自定义拒绝策略"></a>五、自定义拒绝策略</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRejectedHandler</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ExecutorService service = <span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>,<br>                <span class="hljs-number">0</span>, TimeUnit.SECONDS, <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="hljs-number">6</span>),<br>                Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span> MyHandler());<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RejectedExecutionHandler</span> </span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rejectedExecution</span><span class="hljs-params">(Runnable r, ThreadPoolExecutor executor)</span> </span>&#123;<br>            <span class="hljs-comment">//log(&quot;r rejected&quot;)</span><br>            <span class="hljs-comment">//save r kafka mysql redis</span><br>            <span class="hljs-comment">//try 3 times</span><br>            <span class="hljs-keyword">if</span>(executor.getQueue().size() &lt; <span class="hljs-number">10000</span>) &#123;<br>                <span class="hljs-comment">//try put again();</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="六、ThreadPoolExecutor-源码解析"><a href="#六、ThreadPoolExecutor-源码解析" class="headerlink" title="六、ThreadPoolExecutor 源码解析"></a>六、ThreadPoolExecutor 源码解析</h5><h6 id="6-1-常用变量的解释"><a href="#6-1-常用变量的解释" class="headerlink" title="6.1 常用变量的解释"></a>6.1 常用变量的解释</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. `ctl`，可以看做一个int类型的数字，高3位表示线程池状态，低29位表示worker数量</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AtomicInteger ctl = <span class="hljs-keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="hljs-number">0</span>));<br><span class="hljs-comment">// 2. `COUNT_BITS`，`Integer.SIZE`为32，所以`COUNT_BITS`为29</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="hljs-number">3</span>;<br><span class="hljs-comment">// 3. `CAPACITY`，线程池允许的最大线程数。1左移29位，然后减1，即为 2^29 - 1</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CAPACITY   = (<span class="hljs-number">1</span> &lt;&lt; COUNT_BITS) - <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// runState is stored in the high-order bits</span><br><span class="hljs-comment">// 4. 线程池有5种状态，按大小排序如下：RUNNING &lt; SHUTDOWN &lt; STOP &lt; TIDYING &lt; TERMINATED</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> RUNNING    = -<span class="hljs-number">1</span> &lt;&lt; COUNT_BITS;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SHUTDOWN   =  <span class="hljs-number">0</span> &lt;&lt; COUNT_BITS;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> STOP       =  <span class="hljs-number">1</span> &lt;&lt; COUNT_BITS;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> TIDYING    =  <span class="hljs-number">2</span> &lt;&lt; COUNT_BITS;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> TERMINATED =  <span class="hljs-number">3</span> &lt;&lt; COUNT_BITS;<br><br><span class="hljs-comment">// Packing and unpacking ctl</span><br><span class="hljs-comment">// 5. `runStateOf()`，获取线程池状态，通过按位与操作，低29位将全部变成0</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">runStateOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c)</span>     </span>&#123; <span class="hljs-keyword">return</span> c &amp; ~CAPACITY; &#125;<br><span class="hljs-comment">// 6. `workerCountOf()`，获取线程池worker数量，通过按位与操作，高3位将全部变成0</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">workerCountOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c)</span>  </span>&#123; <span class="hljs-keyword">return</span> c &amp; CAPACITY; &#125;<br><span class="hljs-comment">// 7. `ctlOf()`，根据线程池状态和线程池worker数量，生成ctl值</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ctlOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rs, <span class="hljs-keyword">int</span> wc)</span> </span>&#123; <span class="hljs-keyword">return</span> rs | wc; &#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Bit field accessors that don&#x27;t require unpacking ctl.</span><br><span class="hljs-comment"> * These depend on the bit layout and on workerCount being never negative.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// 8. `runStateLessThan()`，线程池状态小于xx</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">runStateLessThan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c, <span class="hljs-keyword">int</span> s)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> c &lt; s;<br>&#125;<br><span class="hljs-comment">// 9. `runStateAtLeast()`，线程池状态大于等于xx</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">runStateAtLeast</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c, <span class="hljs-keyword">int</span> s)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> c &gt;= s;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="6-2-构造方法"><a href="#6-2-构造方法" class="headerlink" title="6.2 构造方法"></a>6.2 构造方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> corePoolSize,</span></span><br><span class="hljs-function"><span class="hljs-params">                          <span class="hljs-keyword">int</span> maximumPoolSize,</span></span><br><span class="hljs-function"><span class="hljs-params">                          <span class="hljs-keyword">long</span> keepAliveTime,</span></span><br><span class="hljs-function"><span class="hljs-params">                          TimeUnit unit,</span></span><br><span class="hljs-function"><span class="hljs-params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="hljs-function"><span class="hljs-params">                          ThreadFactory threadFactory,</span></span><br><span class="hljs-function"><span class="hljs-params">                          RejectedExecutionHandler handler)</span> </span>&#123;<br>    <span class="hljs-comment">// 基本类型参数校验</span><br>    <span class="hljs-keyword">if</span> (corePoolSize &lt; <span class="hljs-number">0</span> ||<br>        maximumPoolSize &lt;= <span class="hljs-number">0</span> ||<br>        maximumPoolSize &lt; corePoolSize ||<br>        keepAliveTime &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>    <span class="hljs-comment">// 空指针校验</span><br>    <span class="hljs-keyword">if</span> (workQueue == <span class="hljs-keyword">null</span> || threadFactory == <span class="hljs-keyword">null</span> || handler == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>    <span class="hljs-keyword">this</span>.corePoolSize = corePoolSize;<br>    <span class="hljs-keyword">this</span>.maximumPoolSize = maximumPoolSize;<br>    <span class="hljs-keyword">this</span>.workQueue = workQueue;<br>    <span class="hljs-comment">// 根据传入参数`unit`和`keepAliveTime`，将存活时间转换为纳秒存到变量`keepAliveTime `中</span><br>    <span class="hljs-keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);<br>    <span class="hljs-keyword">this</span>.threadFactory = threadFactory;<br>    <span class="hljs-keyword">this</span>.handler = handler;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="6-3-提交task的过程"><a href="#6-3-提交task的过程" class="headerlink" title="6.3 提交task的过程"></a>6.3 提交task的过程</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(Runnable command)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (command == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Proceed in 3 steps:</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 1. If fewer than corePoolSize threads are running, try to</span><br><span class="hljs-comment">     * start a new thread with the given command as its first</span><br><span class="hljs-comment">     * task.  The call to addWorker atomically checks runState and</span><br><span class="hljs-comment">     * workerCount, and so prevents false alarms that would add</span><br><span class="hljs-comment">     * threads when it shouldn&#x27;t, by returning false.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 2. If a task can be successfully queued, then we still need</span><br><span class="hljs-comment">     * to double-check whether we should have added a thread</span><br><span class="hljs-comment">     * (because existing ones died since last checking) or that</span><br><span class="hljs-comment">     * the pool shut down since entry into this method. So we</span><br><span class="hljs-comment">     * recheck state and if necessary roll back the enqueuing if</span><br><span class="hljs-comment">     * stopped, or start a new thread if there are none.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 3. If we cannot queue task, then we try to add a new</span><br><span class="hljs-comment">     * thread.  If it fails, we know we are shut down or saturated</span><br><span class="hljs-comment">     * and so reject the task.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">int</span> c = ctl.get();<br>    <span class="hljs-comment">// worker数量比核心线程数小，直接创建worker执行任务</span><br>    <span class="hljs-keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;<br>        <span class="hljs-keyword">if</span> (addWorker(command, <span class="hljs-keyword">true</span>))<br>            <span class="hljs-keyword">return</span>;<br>        c = ctl.get();<br>    &#125;<br>    <span class="hljs-comment">// worker数量超过核心线程数，任务直接进入队列</span><br>    <span class="hljs-keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;<br>        <span class="hljs-keyword">int</span> recheck = ctl.get();<br>        <span class="hljs-comment">// 线程池状态不是RUNNING状态，说明执行过shutdown命令，需要对新加入的任务执行reject()操作。</span><br>        <span class="hljs-comment">// 这儿为什么需要recheck，是因为任务入队列前后，线程池的状态可能会发生变化。</span><br>        <span class="hljs-keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))<br>            reject(command);<br>        <span class="hljs-comment">// 这儿为什么需要判断0值，主要是在线程池构造方法中，核心线程数允许为0</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (workerCountOf(recheck) == <span class="hljs-number">0</span>)<br>            addWorker(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">false</span>);<br>    &#125;<br>    <span class="hljs-comment">// 如果线程池不是运行状态，或者任务进入队列失败，则尝试创建worker执行任务。</span><br>    <span class="hljs-comment">// 这儿有3点需要注意：</span><br>    <span class="hljs-comment">// 1. 线程池不是运行状态时，addWorker内部会判断线程池状态</span><br>    <span class="hljs-comment">// 2. addWorker第2个参数表示是否创建核心线程</span><br>    <span class="hljs-comment">// 3. addWorker返回false，则说明任务执行失败，需要执行reject操作</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!addWorker(command, <span class="hljs-keyword">false</span>))<br>        reject(command);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="6-4-addWorker源码解析"><a href="#6-4-addWorker源码解析" class="headerlink" title="6.4 addWorker源码解析"></a>6.4 addWorker源码解析</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addWorker</span><span class="hljs-params">(Runnable firstTask, <span class="hljs-keyword">boolean</span> core)</span> </span>&#123;<br>    retry:<br>    <span class="hljs-comment">// 外层自旋</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-keyword">int</span> c = ctl.get();<br>        <span class="hljs-keyword">int</span> rs = runStateOf(c);<br><br>        <span class="hljs-comment">// 这个条件写得比较难懂，我对其进行了调整，和下面的条件等价</span><br>        <span class="hljs-comment">// (rs &gt; SHUTDOWN) || </span><br>        <span class="hljs-comment">// (rs == SHUTDOWN &amp;&amp; firstTask != null) || </span><br>        <span class="hljs-comment">// (rs == SHUTDOWN &amp;&amp; workQueue.isEmpty())</span><br>        <span class="hljs-comment">// 1. 线程池状态大于SHUTDOWN时，直接返回false</span><br>        <span class="hljs-comment">// 2. 线程池状态等于SHUTDOWN，且firstTask不为null，直接返回false</span><br>        <span class="hljs-comment">// 3. 线程池状态等于SHUTDOWN，且队列为空，直接返回false</span><br>        <span class="hljs-comment">// Check if queue empty only if necessary.</span><br>        <span class="hljs-keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;<br>            ! (rs == SHUTDOWN &amp;&amp;<br>               firstTask == <span class="hljs-keyword">null</span> &amp;&amp;<br>               ! workQueue.isEmpty()))<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>        <span class="hljs-comment">// 内层自旋</span><br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">int</span> wc = workerCountOf(c);<br>            <span class="hljs-comment">// worker数量超过容量，直接返回false</span><br>            <span class="hljs-keyword">if</span> (wc &gt;= CAPACITY ||<br>                wc &gt;= (core ? corePoolSize : maximumPoolSize))<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            <span class="hljs-comment">// 使用CAS的方式增加worker数量。</span><br>            <span class="hljs-comment">// 若增加成功，则直接跳出外层循环进入到第二部分</span><br>            <span class="hljs-keyword">if</span> (compareAndIncrementWorkerCount(c))<br>                <span class="hljs-keyword">break</span> retry;<br>            c = ctl.get();  <span class="hljs-comment">// Re-read ctl</span><br>            <span class="hljs-comment">// 线程池状态发生变化，对外层循环进行自旋</span><br>            <span class="hljs-keyword">if</span> (runStateOf(c) != rs)<br>                <span class="hljs-keyword">continue</span> retry;<br>            <span class="hljs-comment">// 其他情况，直接内层循环进行自旋即可</span><br>            <span class="hljs-comment">// else CAS failed due to workerCount change; retry inner loop</span><br>        &#125; <br>    &#125;<br>    <span class="hljs-keyword">boolean</span> workerStarted = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">boolean</span> workerAdded = <span class="hljs-keyword">false</span>;<br>    Worker w = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        w = <span class="hljs-keyword">new</span> Worker(firstTask);<br>        <span class="hljs-keyword">final</span> Thread t = w.thread;<br>        <span class="hljs-keyword">if</span> (t != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">final</span> ReentrantLock mainLock = <span class="hljs-keyword">this</span>.mainLock;<br>            <span class="hljs-comment">// worker的添加必须是串行的，因此需要加锁</span><br>            mainLock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// Recheck while holding lock.</span><br>                <span class="hljs-comment">// Back out on ThreadFactory failure or if</span><br>                <span class="hljs-comment">// shut down before lock acquired.</span><br>                <span class="hljs-comment">// 这儿需要重新检查线程池状态</span><br>                <span class="hljs-keyword">int</span> rs = runStateOf(ctl.get());<br><br>                <span class="hljs-keyword">if</span> (rs &lt; SHUTDOWN ||<br>                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class="hljs-keyword">null</span>)) &#123;<br>                    <span class="hljs-comment">// worker已经调用过了start()方法，则不再创建worker</span><br>                    <span class="hljs-keyword">if</span> (t.isAlive()) <span class="hljs-comment">// precheck that t is startable</span><br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalThreadStateException();<br>                    <span class="hljs-comment">// worker创建并添加到workers成功</span><br>                    workers.add(w);<br>                    <span class="hljs-comment">// 更新`largestPoolSize`变量</span><br>                    <span class="hljs-keyword">int</span> s = workers.size();<br>                    <span class="hljs-keyword">if</span> (s &gt; largestPoolSize)<br>                        largestPoolSize = s;<br>                    workerAdded = <span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                mainLock.unlock();<br>            &#125;<br>            <span class="hljs-comment">// 启动worker线程</span><br>            <span class="hljs-keyword">if</span> (workerAdded) &#123;<br>                t.start();<br>                workerStarted = <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// worker线程启动失败，说明线程池状态发生了变化（关闭操作被执行），需要进行shutdown相关操作</span><br>        <span class="hljs-keyword">if</span> (! workerStarted)<br>            addWorkerFailed(w);<br>    &#125;<br>    <span class="hljs-keyword">return</span> workerStarted;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="6-5-线程池worker任务单元"><a href="#6-5-线程池worker任务单元" class="headerlink" title="6.5 线程池worker任务单元"></a>6.5 线程池worker任务单元</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Worker</span></span><br><span class="hljs-class">    <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractQueuedSynchronizer</span></span><br><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * This class will never be serialized, but we provide a</span><br><span class="hljs-comment">     * serialVersionUID to suppress a javac warning.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">6138294804551838833L</span>;<br><br>    <span class="hljs-comment">/** Thread this worker is running in.  Null if factory fails. */</span><br>    <span class="hljs-keyword">final</span> Thread thread;<br>    <span class="hljs-comment">/** Initial task to run.  Possibly null. */</span><br>    Runnable firstTask;<br>    <span class="hljs-comment">/** Per-thread task counter */</span><br>    <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">long</span> completedTasks;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates with given first task and thread from ThreadFactory.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> firstTask the first task (null if none)</span><br><span class="hljs-comment">     */</span><br>    Worker(Runnable firstTask) &#123;<br>        setState(-<span class="hljs-number">1</span>); <span class="hljs-comment">// inhibit interrupts until runWorker</span><br>        <span class="hljs-keyword">this</span>.firstTask = firstTask;<br>        <span class="hljs-comment">// 这儿是Worker的关键所在，使用了线程工厂创建了一个线程。传入的参数为当前worker</span><br>        <span class="hljs-keyword">this</span>.thread = getThreadFactory().newThread(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/** Delegates main run loop to outer runWorker  */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        runWorker(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 省略代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="6-6-核心线程逻辑-runworker"><a href="#6-6-核心线程逻辑-runworker" class="headerlink" title="6.6 核心线程逻辑 - runworker"></a>6.6 核心线程逻辑 - runworker</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">runWorker</span><span class="hljs-params">(Worker w)</span> </span>&#123;<br>    Thread wt = Thread.currentThread();<br>    Runnable task = w.firstTask;<br>    w.firstTask = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-comment">// 调用unlock()是为了让外部可以中断</span><br>    w.unlock(); <span class="hljs-comment">// allow interrupts</span><br>    <span class="hljs-comment">// 这个变量用于判断是否进入过自旋（while循环）</span><br>    <span class="hljs-keyword">boolean</span> completedAbruptly = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 这儿是自旋</span><br>        <span class="hljs-comment">// 1. 如果firstTask不为null，则执行firstTask；</span><br>        <span class="hljs-comment">// 2. 如果firstTask为null，则调用getTask()从队列获取任务。</span><br>        <span class="hljs-comment">// 3. 阻塞队列的特性就是：当队列为空时，当前线程会被阻塞等待</span><br>        <span class="hljs-keyword">while</span> (task != <span class="hljs-keyword">null</span> || (task = getTask()) != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 这儿对worker进行加锁，是为了达到下面的目的</span><br>            <span class="hljs-comment">// 1. 降低锁范围，提升性能</span><br>            <span class="hljs-comment">// 2. 保证每个worker执行的任务是串行的</span><br>            w.lock();<br>            <span class="hljs-comment">// If pool is stopping, ensure thread is interrupted;</span><br>            <span class="hljs-comment">// if not, ensure thread is not interrupted.  This</span><br>            <span class="hljs-comment">// requires a recheck in second case to deal with</span><br>            <span class="hljs-comment">// shutdownNow race while clearing interrupt</span><br>            <span class="hljs-comment">// 如果线程池正在停止，则对当前线程进行中断操作</span><br>            <span class="hljs-keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||<br>                 (Thread.interrupted() &amp;&amp;<br>                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;<br>                !wt.isInterrupted())<br>                wt.interrupt();<br>            <span class="hljs-comment">// 执行任务，且在执行前后通过`beforeExecute()`和`afterExecute()`来扩展其功能。</span><br>            <span class="hljs-comment">// 这两个方法在当前类里面为空实现。</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                beforeExecute(wt, task);<br>                Throwable thrown = <span class="hljs-keyword">null</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    task.run();<br>                &#125; <span class="hljs-keyword">catch</span> (RuntimeException x) &#123;<br>                    thrown = x; <span class="hljs-keyword">throw</span> x;<br>                &#125; <span class="hljs-keyword">catch</span> (Error x) &#123;<br>                    thrown = x; <span class="hljs-keyword">throw</span> x;<br>                &#125; <span class="hljs-keyword">catch</span> (Throwable x) &#123;<br>                    thrown = x; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(x);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    afterExecute(task, thrown);<br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">// 帮助gc</span><br>                task = <span class="hljs-keyword">null</span>;<br>                <span class="hljs-comment">// 已完成任务数加一 </span><br>                w.completedTasks++;<br>                w.unlock();<br>            &#125;<br>        &#125;<br>        completedAbruptly = <span class="hljs-keyword">false</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 自旋操作被退出，说明线程池正在结束</span><br>        processWorkerExit(w, completedAbruptly);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Worker类  线程类</p><ul><li>Runnable AQS</li><li>thread</li></ul><p>execute</p><ul><li>1 core queue noncore</li></ul><p>addWorker</p><ul><li>count++ addworker start</li></ul><h5 id="七、线程池-WorkStealingPool"><a href="#七、线程池-WorkStealingPool" class="headerlink" title="七、线程池 - WorkStealingPool"></a>七、线程池 - WorkStealingPool</h5><p>每个线程有自己的队列，自己的任务执行完成后，去别的队列拿任务执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WorkStealingPool</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>ExecutorService service = Executors.newWorkStealingPool();<br>System.out.println(Runtime.getRuntime().availableProcessors());<br><br>service.execute(<span class="hljs-keyword">new</span> R(<span class="hljs-number">1000</span>));<br>service.execute(<span class="hljs-keyword">new</span> R(<span class="hljs-number">2000</span>));<br>service.execute(<span class="hljs-keyword">new</span> R(<span class="hljs-number">2000</span>));<br>service.execute(<span class="hljs-keyword">new</span> R(<span class="hljs-number">2000</span>)); <span class="hljs-comment">//daemon</span><br>service.execute(<span class="hljs-keyword">new</span> R(<span class="hljs-number">2000</span>));<br><br><span class="hljs-comment">//由于产生的是精灵线程（守护线程、后台线程），主线程不阻塞的话，看不到输出</span><br>System.in.read(); <br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">R</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br><span class="hljs-keyword">int</span> time;<br><br>R(<span class="hljs-keyword">int</span> t) &#123;<br><span class="hljs-keyword">this</span>.time = t;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.MILLISECONDS.sleep(time);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>System.out.println(time  + <span class="hljs-string">&quot; &quot;</span> + Thread.currentThread().getName());<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>push、pop不用加锁，当两个线程都执行完任务后，poll需要加锁竞争任务</p><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1618728557447.png" alt="WorkStealingPool"></p><h5 id="八、线程池-ForkJoinPool"><a href="#八、线程池-ForkJoinPool" class="headerlink" title="八、线程池 - ForkJoinPool"></a>八、线程池 - ForkJoinPool</h5><p>多个任务切分成多个小任务，最终汇总</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.concurrent.ForkJoinPool;<br><span class="hljs-keyword">import</span> java.util.concurrent.RecursiveAction;<br><span class="hljs-keyword">import</span> java.util.concurrent.RecursiveTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ForkJoinPool</span> </span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">1000000</span>];<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_NUM = <span class="hljs-number">50000</span>;<br><span class="hljs-keyword">static</span> Random r = <span class="hljs-keyword">new</span> Random();<br><br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;nums.length; i++) &#123;<br>nums[i] = r.nextInt(<span class="hljs-number">100</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;---&quot;</span> + Arrays.stream(nums).sum()); <span class="hljs-comment">//stream api</span><br>&#125;<br><br>    <span class="hljs-comment">// 继承RecursiveAction，实现compute方法，递归方法  无返回值</span><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RecursiveAction</span> </span>&#123;<br><span class="hljs-keyword">int</span> start, end;<br>AddTask(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> e) &#123;<br>start = s;<br>end = e;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">compute</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span>(end-start &lt;= MAX_NUM) &#123;<br><span class="hljs-keyword">long</span> sum = <span class="hljs-number">0L</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=start; i&lt;end; i++) sum += nums[i];<br>System.out.println(<span class="hljs-string">&quot;from:&quot;</span> + start + <span class="hljs-string">&quot; to:&quot;</span> + end + <span class="hljs-string">&quot; = &quot;</span> + sum);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">int</span> middle = start + (end-start)/<span class="hljs-number">2</span>;<br>AddTask subTask1 = <span class="hljs-keyword">new</span> AddTask(start, middle);<br>AddTask subTask2 = <span class="hljs-keyword">new</span> AddTask(middle, end);<br>subTask1.fork();<br>subTask2.fork();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 继承RecursiveTask，实现compute方法，递归方法  有返回值</span><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddTaskRet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RecursiveTask</span>&lt;<span class="hljs-title">Long</span>&gt; </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><span class="hljs-keyword">int</span> start, end;<br><br>AddTaskRet(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> e) &#123;<br>start = s;<br>end = e;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> Long <span class="hljs-title">compute</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">if</span>(end-start &lt;= MAX_NUM) &#123;<br><span class="hljs-keyword">long</span> sum = <span class="hljs-number">0L</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=start; i&lt;end; i++) sum += nums[i];<br><span class="hljs-keyword">return</span> sum;<br>&#125; <br><br><span class="hljs-keyword">int</span> middle = start + (end-start)/<span class="hljs-number">2</span>;<br><br>AddTaskRet subTask1 = <span class="hljs-keyword">new</span> AddTaskRet(start, middle);<br>AddTaskRet subTask2 = <span class="hljs-keyword">new</span> AddTaskRet(middle, end);<br>subTask1.fork();<br>subTask2.fork();<br><br><span class="hljs-keyword">return</span> subTask1.join() + subTask2.join();<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">/*ForkJoinPool fjp = new ForkJoinPool();</span><br><span class="hljs-comment">AddTask task = new AddTask(0, nums.length);</span><br><span class="hljs-comment">fjp.execute(task);*/</span><br><br>ForkJoinPool temp = <span class="hljs-keyword">new</span> ForkJoinPool();<br><br>ForkJoinPool fjp = <span class="hljs-keyword">new</span> ForkJoinPool();<br>AddTaskRet task = <span class="hljs-keyword">new</span> AddTaskRet(<span class="hljs-number">0</span>, nums.length);<br>fjp.execute(task);<br><span class="hljs-keyword">long</span> result = task.join();<br>System.out.println(result);<br><span class="hljs-comment">//System.in.read();</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;一、线程池-SingleThreadPool-保证扔进去的任务顺序执行&quot;&gt;&lt;a href=&quot;#一、线程池-SingleThreadPool-保证扔进去的任务顺序执行&quot; class=&quot;headerlink&quot; title=&quot;一、线程池 - SingleThreadPo</summary>
      
    
    
    
    <category term="多线程与高并发" scheme="https://woshiqianmo.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="多线程与高并发" scheme="https://woshiqianmo.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>07-多线程与高并发</title>
    <link href="https://woshiqianmo.github.io/2021/04/16/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/07-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    <id>https://woshiqianmo.github.io/2021/04/16/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/07-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/</id>
    <published>2021-04-15T16:16:41.000Z</published>
    <updated>2021-04-18T07:12:16.238Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、线程池-Executor-接口"><a href="#一、线程池-Executor-接口" class="headerlink" title="一、线程池 Executor 接口"></a>一、线程池 Executor 接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 认识Executor</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.concurrent.Executor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyExecutor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Executor</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">new</span> T01_MyExecutor().execute(()-&gt;System.out.println(<span class="hljs-string">&quot;hello executor&quot;</span>));<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(Runnable command)</span> </span>&#123;<br><span class="hljs-comment">//new Thread(command).run();</span><br>command.run();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="二、线程池-ExecutorService-接口"><a href="#二、线程池-ExecutorService-接口" class="headerlink" title="二、线程池 ExecutorService 接口"></a>二、线程池 ExecutorService 接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 认识ExecutorService,阅读API文档</span><br><span class="hljs-comment"> * 认识submit方法，扩展了execute方法，具有一个返回值</span><br><span class="hljs-comment"> * 异步 结果使用Future等</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExecutorService</span>  </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ExecutorService e = Executors.newCachedThreadPool();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="三、-线程池-Callable-接口"><a href="#三、-线程池-Callable-接口" class="headerlink" title="三、 线程池 Callable 接口"></a>三、 线程池 Callable 接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 认识Callable，对Runnable进行了扩展</span><br><span class="hljs-comment"> * 对Callable的调用，可以有返回值</span><br><span class="hljs-comment"> * 与Runnable类似，run方法无返回值，Callable call方法有返回值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Callable</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        Callable&lt;String&gt; c = <span class="hljs-keyword">new</span> Callable() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello Callable&quot;</span>;<br>            &#125;<br>        &#125;;<br><br>        ExecutorService service = Executors.newCachedThreadPool();<br>        Future&lt;String&gt; future = service.submit(c); <span class="hljs-comment">//异步</span><br><br>        System.out.println(future.get());<span class="hljs-comment">//阻塞</span><br><br>        service.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="四、Future的用法及含义"><a href="#四、Future的用法及含义" class="headerlink" title="四、Future的用法及含义"></a>四、Future的用法及含义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 认识future</span><br><span class="hljs-comment"> * 异步</span><br><span class="hljs-comment"> * Future：存储执行的将来才产生的结果</span><br><span class="hljs-comment"> * FutureTask：Future+Runnable</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Future</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException </span>&#123;<br>        <span class="hljs-comment">//FutureTask实现了RunableFuture</span><br>FutureTask&lt;Integer&gt; task = <span class="hljs-keyword">new</span> FutureTask&lt;&gt;(()-&gt;&#123;<br>TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">500</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1000</span>;<br>&#125;); <span class="hljs-comment">//new Callable () &#123; Integer call();&#125;</span><br><span class="hljs-keyword">new</span> Thread(task).start();<br>System.out.println(task.get()); <span class="hljs-comment">//阻塞 直到get有结果后继续执行</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="五、CompletableFuture类"><a href="#五、CompletableFuture类" class="headerlink" title="五、CompletableFuture类"></a>五、CompletableFuture类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 假设你能够提供一个服务</span><br><span class="hljs-comment"> * 这个服务查询各大电商网站同一类产品的价格并汇总展示</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.concurrent.CompletableFuture;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CompletableFuture</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        <span class="hljs-keyword">long</span> start, end;<br><br>        <span class="hljs-comment">/*start = System.currentTimeMillis();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        priceOfTM();</span><br><span class="hljs-comment">        priceOfTB();</span><br><span class="hljs-comment">        priceOfJD();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        end = System.currentTimeMillis();</span><br><span class="hljs-comment">        System.out.println(&quot;use serial method call! &quot; + (end - start));*/</span><br><br>        start = System.currentTimeMillis();<br><br>        CompletableFuture&lt;Double&gt; futureTM = CompletableFuture.supplyAsync(()-&gt;priceOfTM());<br>        CompletableFuture&lt;Double&gt; futureTB = CompletableFuture.supplyAsync(()-&gt;priceOfTB());<br>        CompletableFuture&lt;Double&gt; futureJD = CompletableFuture.supplyAsync(()-&gt;priceOfJD());<br><br>        CompletableFuture.allOf(futureTM, futureTB, futureJD).join();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">          * CompletableFuture.supplyAsync(()-&gt;priceOfTM())</span><br><span class="hljs-comment">          *      .thenApply(String::valueOf)</span><br><span class="hljs-comment">          *      .thenApply(str-&gt; &quot;price &quot; + str)</span><br><span class="hljs-comment">          *      .thenAccept(System.out::println);</span><br><span class="hljs-comment">  */</span><br><br>        end = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;use completable future! &quot;</span> + (end - start));<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.in.read();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">priceOfTM</span><span class="hljs-params">()</span> </span>&#123;<br>        delay();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1.00</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">priceOfTB</span><span class="hljs-params">()</span> </span>&#123;<br>        delay();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2.00</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">priceOfJD</span><span class="hljs-params">()</span> </span>&#123;<br>        delay();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3.00</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*private static double priceOfAmazon() &#123;</span><br><span class="hljs-comment">        delay();</span><br><span class="hljs-comment">        throw new RuntimeException(&quot;product not exist!&quot;);</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delay</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> time = <span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">500</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.MILLISECONDS.sleep(time);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.printf(<span class="hljs-string">&quot;After %s sleep!\n&quot;</span>, time);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="六、线程池（维护线程、任务队列）"><a href="#六、线程池（维护线程、任务队列）" class="headerlink" title="六、线程池（维护线程、任务队列）"></a>六、线程池（维护线程、任务队列）</h5><ul><li>ThreadPoolExecutor<ul><li>corePoolSize：核心线程数</li><li>maximumPoolSize：最大线程数</li><li>keepAliveTime：空闲时间，无任务归还操作系统时间</li><li>queueCapacity：任务队列容量</li><li>ThreadFactory： 线程创建的工厂 </li><li> rejectedExecutionHandler：拒绝策略</li><li>Abort：抛异常</li><li>Discard：扔掉不抛异常</li><li>DiscardOldest：扔掉排队时间最久的  场景：游戏任务移动，最旧的移动信息删除</li><li>CallerRuns：调用者处理任务</li><li> allowCoreThreadTimeout： 允许核心线程超时</li><li> 共享队列</li></ul></li><li>ForkJoinPool<ul><li>每个线程有自己的队列</li><li>分解汇总的任务</li><li>用很少的线程可以执行很多的任务（子任务）TPE做不到先执行子任务</li><li>CPU密集型</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloThreadPool</span> </span>&#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Task</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> i;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Task</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.i = i;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; Task &quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.in.read(); <span class="hljs-comment">//阻塞方法</span><br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Task&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;i=&quot;</span> + i +<br>                    <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ThreadPoolExecutor tpe = <span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>,<br>                <span class="hljs-number">60</span>, TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="hljs-number">4</span>),<br>                Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>            tpe.execute(<span class="hljs-keyword">new</span> Task(i));<br>        &#125;<br>        System.out.println(tpe.getQueue());<br>        tpe.execute(<span class="hljs-keyword">new</span> Task(<span class="hljs-number">100</span>));<br>        System.out.println(tpe.getQueue());<br>        tpe.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;一、线程池-Executor-接口&quot;&gt;&lt;a href=&quot;#一、线程池-Executor-接口&quot; class=&quot;headerlink&quot; title=&quot;一、线程池 Executor 接口&quot;&gt;&lt;/a&gt;一、线程池 Executor 接口&lt;/h5&gt;&lt;figure class</summary>
      
    
    
    
    <category term="多线程与高并发" scheme="https://woshiqianmo.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="多线程与高并发" scheme="https://woshiqianmo.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>06-多线程与高并发</title>
    <link href="https://woshiqianmo.github.io/2021/04/15/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/06-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    <id>https://woshiqianmo.github.io/2021/04/15/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/06-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/</id>
    <published>2021-04-14T16:35:19.000Z</published>
    <updated>2021-04-15T16:14:31.264Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、要求用线程顺序打印A1B2C3…-Z26"><a href="#一、要求用线程顺序打印A1B2C3…-Z26" class="headerlink" title="一、要求用线程顺序打印A1B2C3….Z26"></a>一、要求用线程顺序打印A1B2C3….Z26</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Question</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//要求用线程顺序打印A1B2C3....Z26</span><br>        <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="1-1-解法1-LockSupport"><a href="#1-1-解法1-LockSupport" class="headerlink" title="1.1 解法1 LockSupport"></a>1.1 解法1 LockSupport</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.LockSupport;<br><br><span class="hljs-comment">//Locksupport park 当前线程阻塞（停止）</span><br><span class="hljs-comment">//unpark(Thread t)</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LockSupport</span> </span>&#123;<br><br><br>    <span class="hljs-keyword">static</span> Thread t1 = <span class="hljs-keyword">null</span>, t2 = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">char</span>[] aI = <span class="hljs-string">&quot;1234567&quot;</span>.toCharArray();<br>        <span class="hljs-keyword">char</span>[] aC = <span class="hljs-string">&quot;ABCDEFG&quot;</span>.toCharArray();<br><br>        t1 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br><br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : aI) &#123;<br>                    System.out.print(c);<br>                    LockSupport.unpark(t2); <span class="hljs-comment">//叫醒T2</span><br>                    LockSupport.park(); <span class="hljs-comment">//T1阻塞</span><br>                &#125;<br><br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br><br>        t2 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : aC) &#123;<br>                LockSupport.park(); <span class="hljs-comment">//t2阻塞</span><br>                System.out.print(c);<br>                LockSupport.unpark(t1); <span class="hljs-comment">//叫醒t1</span><br>            &#125;<br><br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-2-解法2-cas"><a href="#1-2-解法2-cas" class="headerlink" title="1.2 解法2 cas"></a>1.2 解法2 cas</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cas</span> </span>&#123;<br><br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">ReadyToRun</span> </span>&#123;T1, T2&#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> ReadyToRun r = ReadyToRun.T1; <span class="hljs-comment">//思考为什么必须volatile</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">char</span>[] aI = <span class="hljs-string">&quot;1234567&quot;</span>.toCharArray();<br>        <span class="hljs-keyword">char</span>[] aC = <span class="hljs-string">&quot;ABCDEFG&quot;</span>.toCharArray();<br><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> c : aI) &#123;<br>                <span class="hljs-keyword">while</span> (r != ReadyToRun.T1) &#123;&#125;<br>                System.out.print(c);<br>                r = ReadyToRun.T2;<br>            &#125;<br><br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> c : aC) &#123;<br>                <span class="hljs-keyword">while</span> (r != ReadyToRun.T2) &#123;&#125;<br>                System.out.print(c);<br>                r = ReadyToRun.T1;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-3-解法3-BlockingQueue"><a href="#1-3-解法3-BlockingQueue" class="headerlink" title="1.3 解法3 BlockingQueue"></a>1.3 解法3 BlockingQueue</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.BlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.LockSupport;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlockingQueue</span> </span>&#123;<br><br><br>    <span class="hljs-keyword">static</span> BlockingQueue&lt;String&gt; q1 = <span class="hljs-keyword">new</span> ArrayBlockingQueue(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">static</span> BlockingQueue&lt;String&gt; q2 = <span class="hljs-keyword">new</span> ArrayBlockingQueue(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">char</span>[] aI = <span class="hljs-string">&quot;1234567&quot;</span>.toCharArray();<br>        <span class="hljs-keyword">char</span>[] aC = <span class="hljs-string">&quot;ABCDEFG&quot;</span>.toCharArray();<br><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : aI) &#123;<br>                System.out.print(c);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    q1.put(<span class="hljs-string">&quot;ok&quot;</span>);<br>                    q2.take();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : aC) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    q1.take();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                System.out.print(c);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    q2.put(<span class="hljs-string">&quot;ok&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-4-解法4-AtomicInteger"><a href="#1-4-解法4-AtomicInteger" class="headerlink" title="1.4 解法4 AtomicInteger"></a>1.4 解法4 AtomicInteger</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtomicInteger</span> </span>&#123;<br><br>    <span class="hljs-keyword">static</span> AtomicInteger threadNo = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">1</span>);<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">char</span>[] aI = <span class="hljs-string">&quot;1234567&quot;</span>.toCharArray();<br>        <span class="hljs-keyword">char</span>[] aC = <span class="hljs-string">&quot;ABCDEFG&quot;</span>.toCharArray();<br><br><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> c : aI) &#123;<br>                <span class="hljs-keyword">while</span> (threadNo.get() != <span class="hljs-number">1</span>) &#123;&#125;<br>                System.out.print(c);<br>                threadNo.set(<span class="hljs-number">2</span>);<br>            &#125;<br><br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> c : aC) &#123;<br>                <span class="hljs-keyword">while</span> (threadNo.get() != <span class="hljs-number">2</span>) &#123;&#125;<br>                System.out.print(c);<br>                threadNo.set(<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-5-解法5-sync-wait-notify"><a href="#1-5-解法5-sync-wait-notify" class="headerlink" title="1.5 解法5 sync_wait_notify"></a>1.5 解法5 sync_wait_notify</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">sync_wait_notify</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Object o = <span class="hljs-keyword">new</span> Object();<br><br>        <span class="hljs-keyword">char</span>[] aI = <span class="hljs-string">&quot;1234567&quot;</span>.toCharArray();<br>        <span class="hljs-keyword">char</span>[] aC = <span class="hljs-string">&quot;ABCDEFG&quot;</span>.toCharArray();<br><br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">synchronized</span> (o) &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : aI) &#123;<br>                    System.out.print(c);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        o.notify();<br>                        o.wait(); <span class="hljs-comment">//让出锁</span><br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br><br>                o.notify(); <span class="hljs-comment">//必须，否则无法停止程序</span><br>            &#125;<br><br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">synchronized</span> (o) &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : aC) &#123;<br>                    System.out.print(c);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        o.notify();<br>                        o.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br><br>                o.notify();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//如果我想保证t2在t1之前打印，也就是说保证首先输出的是A而不是1，这个时候该如何做？</span><br></code></pre></td></tr></table></figure><h6 id="1-6-解法6-sync-wait-notify"><a href="#1-6-解法6-sync-wait-notify" class="headerlink" title="1.6 解法6 sync_wait_notify"></a>1.6 解法6 sync_wait_notify</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">sync_wait_notify</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">boolean</span> t2Started = <span class="hljs-keyword">false</span>;<br><br>    <span class="hljs-comment">//private static CountDownLatch latch = new C(1);</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Object o = <span class="hljs-keyword">new</span> Object();<br><br><br><br>        <span class="hljs-keyword">char</span>[] aI = <span class="hljs-string">&quot;1234567&quot;</span>.toCharArray();<br>        <span class="hljs-keyword">char</span>[] aC = <span class="hljs-string">&quot;ABCDEFG&quot;</span>.toCharArray();<br><br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-comment">//latch.await();</span><br><br>            <span class="hljs-keyword">synchronized</span> (o) &#123;<br><br>                <span class="hljs-keyword">while</span>(!t2Started) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        o.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-comment">//</span><br><br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : aI) &#123;<br>                    System.out.print(c);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        o.notify();<br>                        o.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br><br>                o.notify();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br><br>            <span class="hljs-keyword">synchronized</span> (o) &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : aC) &#123;<br>                    System.out.print(c);<br>                    <span class="hljs-comment">//latch.countDown()</span><br>                    t2Started = <span class="hljs-keyword">true</span>;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        o.notify();<br>                        o.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                o.notify();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-7-解法7-lock-condition"><a href="#1-7-解法7-lock-condition" class="headerlink" title="1.7 解法7 lock_condition"></a>1.7 解法7 lock_condition</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lock_condition</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">char</span>[] aI = <span class="hljs-string">&quot;1234567&quot;</span>.toCharArray();<br>        <span class="hljs-keyword">char</span>[] aC = <span class="hljs-string">&quot;ABCDEFG&quot;</span>.toCharArray();<br><br>        Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>        Condition condition = lock.newCondition();<br><br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                lock.lock();<br><br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : aI) &#123;<br>                    System.out.print(c);<br>                    condition.signal();<br>                    condition.await();<br>                &#125;<br><br>                condition.signal();<br><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br><br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                lock.lock();<br><br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : aC) &#123;<br>                    System.out.print(c);<br>                    condition.signal();<br>                    condition.await();<br>                &#125;<br><br>                condition.signal();<br><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br><br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-8-解法8-lock-condition"><a href="#1-8-解法8-lock-condition" class="headerlink" title="1.8 解法8 lock_condition"></a>1.8 解法8 lock_condition</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Condition本质是锁资源上不同的等待队列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lock_condition</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">char</span>[] aI = <span class="hljs-string">&quot;1234567&quot;</span>.toCharArray();<br>        <span class="hljs-keyword">char</span>[] aC = <span class="hljs-string">&quot;ABCDEFG&quot;</span>.toCharArray();<br><br>        Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>        Condition conditionT1 = lock.newCondition();<br>        Condition conditionT2 = lock.newCondition();<br><br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                lock.lock();<br><br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : aI) &#123;<br>                    System.out.print(c);<br>                    conditionT2.signal();<br>                    conditionT1.await();<br>                &#125;<br><br>                conditionT2.signal();<br><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br><br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                lock.lock();<br><br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : aC) &#123;<br>                    System.out.print(c);<br>                    conditionT1.signal();<br>                    conditionT2.await();<br>                &#125;<br><br>                conditionT1.signal();<br><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br><br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-9-解法9-PipedStream"><a href="#1-9-解法9-PipedStream" class="headerlink" title="1.9 解法9 PipedStream"></a>1.9 解法9 PipedStream</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PipedInputStream;<br><span class="hljs-keyword">import</span> java.io.PipedOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PipedStream</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">char</span>[] aI = <span class="hljs-string">&quot;1234567&quot;</span>.toCharArray();<br>        <span class="hljs-keyword">char</span>[] aC = <span class="hljs-string">&quot;ABCDEFG&quot;</span>.toCharArray();<br><br>        PipedInputStream input1 = <span class="hljs-keyword">new</span> PipedInputStream();<br>        PipedInputStream input2 = <span class="hljs-keyword">new</span> PipedInputStream();<br>        PipedOutputStream output1 = <span class="hljs-keyword">new</span> PipedOutputStream();<br>        PipedOutputStream output2 = <span class="hljs-keyword">new</span> PipedOutputStream();<br><br>        input1.connect(output2);<br>        input2.connect(output1);<br><br>        String msg = <span class="hljs-string">&quot;Your Turn&quot;</span>;<br><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br><br>            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">9</span>];<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : aI) &#123;<br>                    input1.read(buffer);<br><br>                    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">new</span> String(buffer).equals(msg)) &#123;<br>                        System.out.print(c);<br>                    &#125;<br><br>                    output1.write(msg.getBytes());<br>                &#125;<br><br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br><br>            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">9</span>];<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : aC) &#123;<br><br>                    System.out.print(c);<br><br>                    output2.write(msg.getBytes());<br><br>                    input2.read(buffer);<br><br>                    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">new</span> String(buffer).equals(msg)) &#123;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                &#125;<br><br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-10-解法10-Exchanger-Not-Work"><a href="#1-10-解法10-Exchanger-Not-Work" class="headerlink" title="1.10 解法10 Exchanger_Not_Work"></a>1.10 解法10 Exchanger_Not_Work</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.Exchanger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exchanger_Not_Work</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Exchanger&lt;String&gt; exchanger = <span class="hljs-keyword">new</span> Exchanger&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span>[] aI = <span class="hljs-string">&quot;1234567&quot;</span>.toCharArray();<br>        <span class="hljs-keyword">char</span>[] aC = <span class="hljs-string">&quot;ABCDEFG&quot;</span>.toCharArray();<br><br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;aI.length; i++) &#123;<br>                System.out.print(aI[i]);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    exchanger.exchange(<span class="hljs-string">&quot;T1&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;).start();<br><br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;aC.length; i++) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    exchanger.exchange(<span class="hljs-string">&quot;T2&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                System.out.print(aC[i]);<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-11-解法11-TransferQueue"><a href="#1-11-解法11-TransferQueue" class="headerlink" title="1.11 解法11 TransferQueue"></a>1.11 解法11 TransferQueue</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.LinkedTransferQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.TransferQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TransferQueue</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span>[] aI = <span class="hljs-string">&quot;1234567&quot;</span>.toCharArray();<br>        <span class="hljs-keyword">char</span>[] aC = <span class="hljs-string">&quot;ABCDEFG&quot;</span>.toCharArray();<br><br>        TransferQueue&lt;Character&gt; queue = <span class="hljs-keyword">new</span> LinkedTransferQueue&lt;Character&gt;();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> c : aI) &#123;<br>                    System.out.print(queue.take());<br>                    queue.transfer(c);<br>                &#125;<br><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> c : aC) &#123;<br>                    queue.transfer(c);<br>                    System.out.print(queue.take());<br>                &#125;<br><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;一、要求用线程顺序打印A1B2C3…-Z26&quot;&gt;&lt;a href=&quot;#一、要求用线程顺序打印A1B2C3…-Z26&quot; class=&quot;headerlink&quot; title=&quot;一、要求用线程顺序打印A1B2C3….Z26&quot;&gt;&lt;/a&gt;一、要求用线程顺序打印A1B2C3….Z</summary>
      
    
    
    
    <category term="多线程与高并发" scheme="https://woshiqianmo.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="多线程与高并发" scheme="https://woshiqianmo.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>05-多线程与高并发</title>
    <link href="https://woshiqianmo.github.io/2021/04/13/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/05-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    <id>https://woshiqianmo.github.io/2021/04/13/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/05-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/</id>
    <published>2021-04-12T17:28:58.000Z</published>
    <updated>2021-04-14T16:34:06.404Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、容器"><a href="#一、容器" class="headerlink" title="一、容器"></a>一、容器</h5><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1618248906535.png" alt="容器图解"></p><h5 id="二、Hashtable-方法都加了synchronized锁-整个方法都加锁"><a href="#二、Hashtable-方法都加了synchronized锁-整个方法都加锁" class="headerlink" title="二、Hashtable 方法都加了synchronized锁  整个方法都加锁"></a>二、Hashtable 方法都加了synchronized锁  整个方法都加锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Constants</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COUNT = <span class="hljs-number">1000000</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> THREAD_COUNT = <span class="hljs-number">100</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Hashtable;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestHashtable</span> </span>&#123;<br><br>    <span class="hljs-keyword">static</span> Hashtable&lt;UUID, UUID&gt; m = <span class="hljs-keyword">new</span> Hashtable&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> count = Constants.COUNT;<br>    <span class="hljs-keyword">static</span> UUID[] keys = <span class="hljs-keyword">new</span> UUID[count];<br>    <span class="hljs-keyword">static</span> UUID[] values = <span class="hljs-keyword">new</span> UUID[count];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> THREAD_COUNT = Constants.THREAD_COUNT;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            keys[i] = UUID.randomUUID();<br>            values[i] = UUID.randomUUID();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> start;<br>        <span class="hljs-keyword">int</span> gap = count/THREAD_COUNT;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyThread</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.start = start;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=start; i&lt;start+gap; i++) &#123;<br>                m.put(keys[i], values[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br><br>        Thread[] threads = <span class="hljs-keyword">new</span> Thread[THREAD_COUNT];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;threads.length; i++) &#123;<br>            threads[i] =<br>            <span class="hljs-keyword">new</span> MyThread(i * (count/THREAD_COUNT));<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(Thread t : threads) &#123;<br>            t.start();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(Thread t : threads) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                t.join();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br><br>        System.out.println(m.size());<br><br>        <span class="hljs-comment">//-----------------------------------</span><br><br>        start = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; threads.length; i++) &#123;<br>            threads[i] = <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10000000</span>; j++) &#123;<br>                    m.get(keys[<span class="hljs-number">10</span>]);<br>                &#125;<br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(Thread t : threads) &#123;<br>            t.start();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(Thread t : threads) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                t.join();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        end = System.currentTimeMillis();<br>        System.out.println(end - start);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="三、HashMap-方法不加锁"><a href="#三、HashMap-方法不加锁" class="headerlink" title="三、HashMap 方法不加锁"></a>三、HashMap 方法不加锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestHashMap</span> </span>&#123;<br><br>    <span class="hljs-keyword">static</span> HashMap&lt;UUID, UUID&gt; m = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> count = Constants.COUNT;<br>    <span class="hljs-keyword">static</span> UUID[] keys = <span class="hljs-keyword">new</span> UUID[count];<br>    <span class="hljs-keyword">static</span> UUID[] values = <span class="hljs-keyword">new</span> UUID[count];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> THREAD_COUNT = Constants.THREAD_COUNT;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            keys[i] = UUID.randomUUID();<br>            values[i] = UUID.randomUUID();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> start;<br>        <span class="hljs-keyword">int</span> gap = count/THREAD_COUNT;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyThread</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.start = start;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=start; i&lt;start+gap; i++) &#123;<br>                m.put(keys[i], values[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br><br>        Thread[] threads = <span class="hljs-keyword">new</span> Thread[THREAD_COUNT];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;threads.length; i++) &#123;<br>            threads[i] =<br>            <span class="hljs-keyword">new</span> MyThread(i * (count/THREAD_COUNT));<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(Thread t : threads) &#123;<br>            t.start();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(Thread t : threads) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                t.join();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br><br>        System.out.println(m.size());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Hashtable、Vector</p><ul><li>基本不用，自带锁</li></ul><h5 id="四、SynchronizedHashMap-定义了Object-mutex-与Hashtable比较，锁的粒度更细"><a href="#四、SynchronizedHashMap-定义了Object-mutex-与Hashtable比较，锁的粒度更细" class="headerlink" title="四、SynchronizedHashMap 定义了Object mutex 与Hashtable比较，锁的粒度更细"></a>四、SynchronizedHashMap 定义了Object mutex 与Hashtable比较，锁的粒度更细</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSynchronizedHashMap</span> </span>&#123;<br><br>    <span class="hljs-keyword">static</span> Map&lt;UUID, UUID&gt; m = Collections.synchronizedMap(<span class="hljs-keyword">new</span> HashMap&lt;UUID, UUID&gt;());<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> count = Constants.COUNT;<br>    <span class="hljs-keyword">static</span> UUID[] keys = <span class="hljs-keyword">new</span> UUID[count];<br>    <span class="hljs-keyword">static</span> UUID[] values = <span class="hljs-keyword">new</span> UUID[count];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> THREAD_COUNT = Constants.THREAD_COUNT;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            keys[i] = UUID.randomUUID();<br>            values[i] = UUID.randomUUID();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> start;<br>        <span class="hljs-keyword">int</span> gap = count/THREAD_COUNT;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyThread</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.start = start;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=start; i&lt;start+gap; i++) &#123;<br>                m.put(keys[i], values[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br><br>        Thread[] threads = <span class="hljs-keyword">new</span> Thread[THREAD_COUNT];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;threads.length; i++) &#123;<br>            threads[i] =<br>            <span class="hljs-keyword">new</span> MyThread(i * (count/THREAD_COUNT));<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(Thread t : threads) &#123;<br>            t.start();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(Thread t : threads) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                t.join();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br><br>        System.out.println(m.size());<br><br>        <span class="hljs-comment">//-----------------------------------</span><br><br>        start = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; threads.length; i++) &#123;<br>            threads[i] = <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10000000</span>; j++) &#123;<br>                    m.get(keys[<span class="hljs-number">10</span>]);<br>                &#125;<br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(Thread t : threads) &#123;<br>            t.start();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(Thread t : threads) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                t.join();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        end = System.currentTimeMillis();<br>        System.out.println(end - start);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="五、ConcurrentHashMap"><a href="#五、ConcurrentHashMap" class="headerlink" title="五、ConcurrentHashMap"></a>五、ConcurrentHashMap</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestConcurrentHashMap</span> </span>&#123;<br><br>    <span class="hljs-keyword">static</span> Map&lt;UUID, UUID&gt; m = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> count = Constants.COUNT;<br>    <span class="hljs-keyword">static</span> UUID[] keys = <span class="hljs-keyword">new</span> UUID[count];<br>    <span class="hljs-keyword">static</span> UUID[] values = <span class="hljs-keyword">new</span> UUID[count];<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> THREAD_COUNT = Constants.THREAD_COUNT;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            keys[i] = UUID.randomUUID();<br>            values[i] = UUID.randomUUID();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> start;<br>        <span class="hljs-keyword">int</span> gap = count/THREAD_COUNT;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyThread</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.start = start;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=start; i&lt;start+gap; i++) &#123;<br>                m.put(keys[i], values[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br><br>        Thread[] threads = <span class="hljs-keyword">new</span> Thread[THREAD_COUNT];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;threads.length; i++) &#123;<br>            threads[i] =<br>            <span class="hljs-keyword">new</span> MyThread(i * (count/THREAD_COUNT));<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(Thread t : threads) &#123;<br>            t.start();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(Thread t : threads) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                t.join();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br><br>        System.out.println(m.size());<br><br>        <span class="hljs-comment">//-----------------------------------</span><br><br>        start = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; threads.length; i++) &#123;<br>            threads[i] = <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10000000</span>; j++) &#123;<br>                    m.get(keys[<span class="hljs-number">10</span>]);<br>                &#125;<br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(Thread t : threads) &#123;<br>            t.start();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(Thread t : threads) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                t.join();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        end = System.currentTimeMillis();<br>        System.out.println(end - start);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>多线程写：Hashtable≈SynchronizedHashMap ≈ ConcurrentHashMap</p><p>多线程读：ConcurrentHashMap &gt; Hashtable、SynchronizedHashMap </p><p><a href="http://blog.csdn.net/sunxianghuang/article/details/52221913">跳表（SkipList）及ConcurrentSkipListMap源码解析</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Treemap 红黑树，排好序的</span><br><span class="hljs-comment"> * 没有ConcurrentTreeMap，因为ConcurrentHashMap底层CAS实现，树形结构实现太复杂了</span><br><span class="hljs-comment"> * 使用ConcurrentSkipListMap 使用跳表代替树形结构实现，有序</span><br><span class="hljs-comment"> * ConcurrentHashMap 无序</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentSkipListMap;<br><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcurrentMap</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;();<br><span class="hljs-comment">//Map&lt;String, String&gt; map = new ConcurrentSkipListMap&lt;&gt;(); //高并发并且排序</span><br><br><span class="hljs-comment">//Map&lt;String, String&gt; map = new Hashtable&lt;&gt;();</span><br><span class="hljs-comment">//Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); //Collections.synchronizedXXX</span><br><span class="hljs-comment">//TreeMap</span><br>Random r = <span class="hljs-keyword">new</span> Random();<br>Thread[] ths = <span class="hljs-keyword">new</span> Thread[<span class="hljs-number">100</span>];<br>CountDownLatch latch = <span class="hljs-keyword">new</span> CountDownLatch(ths.length);<br><span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;ths.length; i++) &#123;<br>ths[i] = <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">10000</span>; j++) map.put(<span class="hljs-string">&quot;a&quot;</span> + r.nextInt(<span class="hljs-number">100000</span>), <span class="hljs-string">&quot;a&quot;</span> + r.nextInt(<span class="hljs-number">100000</span>));<br>latch.countDown();<br>&#125;);<br>&#125;<br><br>Arrays.asList(ths).forEach(t-&gt;t.start());<br><span class="hljs-keyword">try</span> &#123;<br>latch.await();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br><br><span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>System.out.println(end - start);<br>System.out.println(map.size());<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="六、Vector-内部方法都有-Synchronized"><a href="#六、Vector-内部方法都有-Synchronized" class="headerlink" title="六、Vector 内部方法都有 Synchronized"></a>六、Vector 内部方法都有 Synchronized</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 有N张火车票，每张票都有一个编号</span><br><span class="hljs-comment"> * 同时有10个窗口对外售票</span><br><span class="hljs-comment"> * 请写一个模拟程序</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 分析下面的程序可能会产生哪些问题？</span><br><span class="hljs-comment"> * 重复销售？超量销售？</span><br><span class="hljs-comment"> * ArrayList线程不安全，出现超卖问题</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TicketSeller</span> </span>&#123;<br><span class="hljs-keyword">static</span> List&lt;String&gt; tickets = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10000</span>; i++) tickets.add(<span class="hljs-string">&quot;票编号：&quot;</span> + i);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br><span class="hljs-keyword">while</span>(tickets.size() &gt; <span class="hljs-number">0</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;销售了--&quot;</span> + tickets.remove(<span class="hljs-number">0</span>));<br>&#125;<br>&#125;).start();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 有N张火车票，每张票都有一个编号</span><br><span class="hljs-comment"> * 同时有10个窗口对外售票</span><br><span class="hljs-comment"> * 请写一个模拟程序</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 分析下面的程序可能会产生哪些问题？</span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> * 使用Vector或者Collections.synchronizedXXX</span><br><span class="hljs-comment"> * 分析一下，这样能解决问题吗？</span><br><span class="hljs-comment"> * 内部非原子性操作，产生超卖问题</span><br><span class="hljs-comment"> * try &#123;</span><br><span class="hljs-comment"> *TimeUnit.MILLISECONDS.sleep(10);</span><br><span class="hljs-comment"> *&#125; catch (InterruptedException e) &#123;</span><br><span class="hljs-comment"> *    e.printStackTrace();</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.Vector;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TicketSeller</span> </span>&#123;<br><span class="hljs-keyword">static</span> Vector&lt;String&gt; tickets = <span class="hljs-keyword">new</span> Vector&lt;&gt;();<br><br><br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">1000</span>; i++) tickets.add(<span class="hljs-string">&quot;票 编号：&quot;</span> + i);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br><span class="hljs-keyword">while</span>(tickets.size() &gt; <span class="hljs-number">0</span>) &#123;<br><br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">10</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br><br><br>System.out.println(<span class="hljs-string">&quot;销售了--&quot;</span> + tickets.remove(<span class="hljs-number">0</span>));<br>&#125;<br>&#125;).start();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 有N张火车票，每张票都有一个编号</span><br><span class="hljs-comment"> * 同时有10个窗口对外售票</span><br><span class="hljs-comment"> * 请写一个模拟程序</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 分析下面的程序可能会产生哪些问题？</span><br><span class="hljs-comment"> * 重复销售？超量销售？</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 使用Vector或者Collections.synchronizedXXX</span><br><span class="hljs-comment"> * 分析一下，这样能解决问题吗？</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 就算操作A和B都是同步的，但A和B组成的复合操作也未必是同步的，仍然需要自己进行同步</span><br><span class="hljs-comment"> * 就像这个程序，判断size和进行remove必须是一整个的原子操作</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 结果正常，但是性能慢</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TicketSeller</span> </span>&#123;<br><span class="hljs-keyword">static</span> List&lt;String&gt; tickets = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br><br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">1000</span>; i++) tickets.add(<span class="hljs-string">&quot;票 编号：&quot;</span> + i);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br><span class="hljs-keyword">synchronized</span>(tickets) &#123;<br><span class="hljs-keyword">if</span>(tickets.size() &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">10</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;销售了--&quot;</span> + tickets.remove(<span class="hljs-number">0</span>));<br>&#125;<br>&#125;<br>&#125;).start();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 有N张火车票，每张票都有一个编号</span><br><span class="hljs-comment"> * 同时有10个窗口对外售票</span><br><span class="hljs-comment"> * 请写一个模拟程序</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 分析下面的程序可能会产生哪些问题？</span><br><span class="hljs-comment"> * 重复销售？超量销售？</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 使用Vector或者Collections.synchronizedXXX</span><br><span class="hljs-comment"> * 分析一下，这样能解决问题吗？</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 就算操作A和B都是同步的，但A和B组成的复合操作也未必是同步的，仍然需要自己进行同步</span><br><span class="hljs-comment"> * 就像这个程序，判断size和进行remove必须是一整个的原子操作</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 使用ConcurrentQueue提高并发性</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.Queue;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentLinkedQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TicketSeller</span> </span>&#123;<br><span class="hljs-keyword">static</span> Queue&lt;String&gt; tickets = <span class="hljs-keyword">new</span> ConcurrentLinkedQueue&lt;&gt;();<br><br><br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">1000</span>; i++) tickets.add(<span class="hljs-string">&quot;票 编号：&quot;</span> + i);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br>                    <span class="hljs-comment">//从队列头部取值，如果为空，返回null</span><br>String s = tickets.poll();<br><span class="hljs-keyword">if</span>(s == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">else</span> System.out.println(<span class="hljs-string">&quot;销售了--&quot;</span> + s);<br>&#125;<br>&#125;).start();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="七、CopyOnWriteList"><a href="#七、CopyOnWriteList" class="headerlink" title="七、CopyOnWriteList"></a>七、CopyOnWriteList</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 写时复制容器 copy on write</span><br><span class="hljs-comment"> * 多线程环境下，写时效率低，读时效率高</span><br><span class="hljs-comment"> * 适合写少读多的环境</span><br><span class="hljs-comment"> * 复制一份，长度加1，写的时候加Synchronized锁</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><span class="hljs-keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CopyOnWriteList</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>List&lt;String&gt; lists = <br><span class="hljs-comment">//new ArrayList&lt;&gt;(); //这个会出并发问题！</span><br><span class="hljs-comment">//new Vector();</span><br><span class="hljs-keyword">new</span> CopyOnWriteArrayList&lt;&gt;();<br>Random r = <span class="hljs-keyword">new</span> Random();<br>Thread[] ths = <span class="hljs-keyword">new</span> Thread[<span class="hljs-number">100</span>];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;ths.length; i++) &#123;<br>Runnable task = <span class="hljs-keyword">new</span> Runnable() &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">1000</span>; i++) lists.add(<span class="hljs-string">&quot;a&quot;</span> + r.nextInt(<span class="hljs-number">10000</span>));<br>&#125;<br><br>&#125;;<br>ths[i] = <span class="hljs-keyword">new</span> Thread(task);<br>&#125;<br><br><br>runAndComputeTime(ths);<br><br>System.out.println(lists.size());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">runAndComputeTime</span><span class="hljs-params">(Thread[] ths)</span> </span>&#123;<br><span class="hljs-keyword">long</span> s1 = System.currentTimeMillis();<br>Arrays.asList(ths).forEach(t-&gt;t.start());<br>Arrays.asList(ths).forEach(t-&gt;&#123;<br><span class="hljs-keyword">try</span> &#123;<br>t.join();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;);<br><span class="hljs-keyword">long</span> s2 = System.currentTimeMillis();<br>System.out.println(s2 - s1);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1618332932928.png" alt="添加方法原理"></p><h5 id="八、BlockingQueue-阻塞队列-天生的生产者、消费者实现-使用park阻塞等待状态"><a href="#八、BlockingQueue-阻塞队列-天生的生产者、消费者实现-使用park阻塞等待状态" class="headerlink" title="八、BlockingQueue 阻塞队列  天生的生产者、消费者实现 使用park阻塞等待状态"></a>八、BlockingQueue 阻塞队列  天生的生产者、消费者实现 使用park阻塞等待状态</h5><p>Queue提供的常用方法</p><ul><li>offer 添加 相当于add 如果加好返回true，满了，没有加进去返回false，与list的add相比，如果加满了会报异常</li><li>peek 取值，并不会remove</li><li>poll 取值，并且remove</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs plain">import java.util.Queue;<br>import java.util.concurrent.ConcurrentLinkedQueue;<br><br>public class ConcurrentQueue &#123;<br>public static void main(String[] args) &#123;<br>Queue&lt;String&gt; strs &#x3D; new ConcurrentLinkedQueue&lt;&gt;();<br><br>for(int i&#x3D;0; i&lt;10; i++) &#123;<br>strs.offer(&quot;a&quot; + i);  &#x2F;&#x2F;add<br>&#125;<br><br>System.out.println(strs);<br><br>System.out.println(strs.size());<br><br>System.out.println(strs.poll());<br>System.out.println(strs.size());<br><br>System.out.println(strs.peek());<br>System.out.println(strs.size());<br><br>&#x2F;&#x2F;双端队列Deque<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>LinkedBlockingQueue  无界(链表实现的BlockingQueue)没有长度限制</li></ul><p>put方法装，如果满了，会阻塞</p><p>take方法取，如果空了，会阻塞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.concurrent.BlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.LinkedBlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkedBlockingQueue</span> </span>&#123;<br><br><span class="hljs-keyword">static</span> BlockingQueue&lt;String&gt; strs = <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;&gt;();<br><br><span class="hljs-keyword">static</span> Random r = <span class="hljs-keyword">new</span> Random();<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>strs.put(<span class="hljs-string">&quot;a&quot;</span> + i); <span class="hljs-comment">//如果满了，就会等待</span><br>TimeUnit.MILLISECONDS.sleep(r.nextInt(<span class="hljs-number">1000</span>));<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;, <span class="hljs-string">&quot;p1&quot;</span>).start();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br><span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br><span class="hljs-keyword">for</span> (;;) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; take -&quot;</span> + strs.take()); <span class="hljs-comment">//如果空了，就会等待</span><br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;, <span class="hljs-string">&quot;c&quot;</span> + i).start();<br><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>ArrayBlockingQueue  有界</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.BlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayBlockingQueue</span> </span>&#123;<br><br><span class="hljs-keyword">static</span> BlockingQueue&lt;String&gt; strs = <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="hljs-number">10</span>);<br><br><span class="hljs-keyword">static</span> Random r = <span class="hljs-keyword">new</span> Random();<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>strs.put(<span class="hljs-string">&quot;a&quot;</span> + i);<br>&#125;<br><br><span class="hljs-comment">//strs.put(&quot;aaa&quot;); //满了就会等待，程序阻塞</span><br><span class="hljs-comment">//strs.add(&quot;aaa&quot;); //满了就会报参数状态异常</span><br><span class="hljs-comment">//strs.offer(&quot;aaa&quot;); //返回值</span><br>strs.offer(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-number">1</span>, TimeUnit.SECONDS); <span class="hljs-comment">//尝试1s钟后设置值</span><br><br>System.out.println(strs);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>PriorityQueque <ul><li>根据树的模型排序（二叉树）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PriorityQueque</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        PriorityQueue&lt;String&gt; q = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;();<br><br>        q.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        q.add(<span class="hljs-string">&quot;e&quot;</span>);<br>        q.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        q.add(<span class="hljs-string">&quot;d&quot;</span>);<br>        q.add(<span class="hljs-string">&quot;z&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(q.poll());<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>DelayQueue  时间角度排序  适用场景，按时间任务调度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Calendar;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.concurrent.BlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.DelayQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.Delayed;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelayQueue</span> </span>&#123;<br><br><span class="hljs-keyword">static</span> BlockingQueue&lt;MyTask&gt; tasks = <span class="hljs-keyword">new</span> DelayQueue&lt;&gt;();<br><br><span class="hljs-keyword">static</span> Random r = <span class="hljs-keyword">new</span> Random();<br><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Delayed</span> </span>&#123;<br>String name;<br><span class="hljs-keyword">long</span> runningTime;<br><br>MyTask(String name, <span class="hljs-keyword">long</span> rt) &#123;<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.runningTime = rt;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Delayed o)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.getDelay(TimeUnit.MILLISECONDS) &lt; o.getDelay(TimeUnit.MILLISECONDS))<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.getDelay(TimeUnit.MILLISECONDS) &gt; o.getDelay(TimeUnit.MILLISECONDS)) <br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getDelay</span><span class="hljs-params">(TimeUnit unit)</span> </span>&#123;<br><br><span class="hljs-keyword">return</span> unit.convert(runningTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot; &quot;</span> + runningTime;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><span class="hljs-keyword">long</span> now = System.currentTimeMillis();<br>MyTask t1 = <span class="hljs-keyword">new</span> MyTask(<span class="hljs-string">&quot;t1&quot;</span>, now + <span class="hljs-number">1000</span>);<br>MyTask t2 = <span class="hljs-keyword">new</span> MyTask(<span class="hljs-string">&quot;t2&quot;</span>, now + <span class="hljs-number">2000</span>);<br>MyTask t3 = <span class="hljs-keyword">new</span> MyTask(<span class="hljs-string">&quot;t3&quot;</span>, now + <span class="hljs-number">1500</span>);<br>MyTask t4 = <span class="hljs-keyword">new</span> MyTask(<span class="hljs-string">&quot;t4&quot;</span>, now + <span class="hljs-number">2500</span>);<br>MyTask t5 = <span class="hljs-keyword">new</span> MyTask(<span class="hljs-string">&quot;t5&quot;</span>, now + <span class="hljs-number">500</span>);<br><br>tasks.put(t1);<br>tasks.put(t2);<br>tasks.put(t3);<br>tasks.put(t4);<br>tasks.put(t5);<br><br>System.out.println(tasks);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-comment">//按照拿数据快慢排序输出，t5最快，t4最慢</span><br>System.out.println(tasks.take());<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>SynchronusQueue  两个线程间传递任务(本质与Exchanger一样)  两个线程交换数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.BlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.SynchronousQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SynchronusQueue</span> </span>&#123; <span class="hljs-comment">//容量为0</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>BlockingQueue&lt;String&gt; strs = <span class="hljs-keyword">new</span> SynchronousQueue&lt;&gt;();<br><br><span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(strs.take());<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;).start();<br><br>strs.put(<span class="hljs-string">&quot;aaa&quot;</span>); <span class="hljs-comment">//阻塞等待消费者消费</span><br><span class="hljs-comment">//strs.put(&quot;bbb&quot;);</span><br><span class="hljs-comment">//strs.add(&quot;aaa&quot;); //Queue full 异常，不能往容器内装数据</span><br>System.out.println(strs.size());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>TransferQueue 前面几种的组合 可以装内容<ul><li>使用场景：<ul><li>当用户付账以后，等付账以后，才能给用户反馈（如果没有MQ情况可以使用）</li></ul></li><li>transfer： 线程将内容装进容器，等待容器消费完以后离开</li><li>put：     线程将内容装进容器后离开，当容器满的时候，等待</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.LinkedTransferQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TransferQueue</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>LinkedTransferQueue&lt;String&gt; strs = <span class="hljs-keyword">new</span> LinkedTransferQueue&lt;&gt;();<br><br><span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(strs.take());<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;).start();<br><br>strs.transfer(<span class="hljs-string">&quot;aaa&quot;</span>);<br><br><span class="hljs-comment">//strs.put(&quot;aaa&quot;);</span><br><br><br><span class="hljs-comment">/*new Thread(() -&gt; &#123;</span><br><span class="hljs-comment">try &#123;</span><br><span class="hljs-comment">System.out.println(strs.take());</span><br><span class="hljs-comment">&#125; catch (InterruptedException e) &#123;</span><br><span class="hljs-comment">e.printStackTrace();</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;).start();*/</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;一、容器&quot;&gt;&lt;a href=&quot;#一、容器&quot; class=&quot;headerlink&quot; title=&quot;一、容器&quot;&gt;&lt;/a&gt;一、容器&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;C:\Users\QianMo\AppData\Roaming\Typora\typora-user-i</summary>
      
    
    
    
    <category term="多线程与高并发" scheme="https://woshiqianmo.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="多线程与高并发" scheme="https://woshiqianmo.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>04-多线程与高并发</title>
    <link href="https://woshiqianmo.github.io/2021/04/06/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/04-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    <id>https://woshiqianmo.github.io/2021/04/06/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/04-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/</id>
    <published>2021-04-06T14:05:06.000Z</published>
    <updated>2021-04-19T02:55:18.845Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、ReentrantLock源码（AQS-Template-Method、Callback-Function、父类默认实现、子类具体实现）"><a href="#一、ReentrantLock源码（AQS-Template-Method、Callback-Function、父类默认实现、子类具体实现）" class="headerlink" title="一、ReentrantLock源码（AQS Template Method、Callback Function、父类默认实现、子类具体实现）"></a>一、ReentrantLock源码（AQS Template Method、Callback Function、父类默认实现、子类具体实现）</h5><p>NonfairSync非公平</p><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1618152439412.png" alt="ReentrantLock底层执行"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Lock lock = <span class="hljs-keyword">new</span> MLock();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Thread[] threads = <span class="hljs-keyword">new</span> Thread[<span class="hljs-number">100</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;threads.length; i++) &#123;<br>            threads[i] = <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    lock.lock();<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">100</span>; j++) m++;<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    lock.unlock();<br>                &#125;<br>            &#125;);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(Thread t : threads) t.start();<br>        <span class="hljs-keyword">for</span> (Thread t : threads) t.join();<br>        System.out.println(m);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过AQS实现自定义锁，目前仅实现了lock和unlock</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Lock</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Sync sync = <span class="hljs-keyword">new</span> Sync();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span> </span>&#123;<br>        sync.acquire(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unlock</span><span class="hljs-params">()</span> </span>&#123;<br>        sync.release(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryLock</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryLock</span><span class="hljs-params">(<span class="hljs-keyword">long</span> time, TimeUnit unit)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Condition <span class="hljs-title">newCondition</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.AbstractQueuedSynchronizer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractQueuedSynchronizer</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryAcquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)) &#123;<br>            setExclusiveOwnerThread(Thread.currentThread());<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryRelease</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>        setExclusiveOwnerThread(<span class="hljs-keyword">null</span>);<br>        setState(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isHeldExclusively</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getState() == <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestReentrantLock</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ReentrantLock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>        lock.lock();<br>        <span class="hljs-comment">//synchronized (TestReentrantLock.class) &#123;</span><br>            i++;<br>        <span class="hljs-comment">//&#125;</span><br>        lock.unlock();<br>        <span class="hljs-comment">//synchronized 程序员的丽春院 JUC</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>AQS核心结构，int类型数，同时是volatile</p><p>node是线程队列，是双向链表</p><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1618155612105.png" alt="AQS核心结构"></p><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1618156095882.png" alt="ReentrantLock源码"></p><h5 id="二、AQS高效率核心"><a href="#二、AQS高效率核心" class="headerlink" title="二、AQS高效率核心"></a>二、AQS高效率核心</h5><p>加锁尝试CAS操作tail</p><p>队列尝试获得锁，尝试CAS操作head </p><p>Object o = new Object</p><p>VarHandle PREV 代表指向变量的引用 </p><p>AQS源码</p><p>​    - VarHandle -&gt; 1:普通属性原子性操作 2:比反射快，直接操作二进制码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.invoke.MethodHandles;<br><span class="hljs-keyword">import</span> java.lang.invoke.VarHandle;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VarHandle</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> VarHandle handle;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            handle = MethodHandles.lookup().findVarHandle(VarHandle.class, <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-keyword">int</span>.class);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        VarHandle t = <span class="hljs-keyword">new</span> VarHandle();<br><br>        <span class="hljs-comment">//plain read / write</span><br>        System.out.println((<span class="hljs-keyword">int</span>)handle.get(t));<br>        handle.set(t,<span class="hljs-number">9</span>);<br>        System.out.println(t.x);<br><br>        handle.compareAndSet(t, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>);<br>        System.out.println(t.x);<br><br>        handle.getAndAdd(t, <span class="hljs-number">10</span>);<br>        System.out.println(t.x);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="三、ThreadLocal源码-（用于Spring声明式事务-保证同一个Connection）"><a href="#三、ThreadLocal源码-（用于Spring声明式事务-保证同一个Connection）" class="headerlink" title="三、ThreadLocal源码 （用于Spring声明式事务,保证同一个Connection）"></a>三、ThreadLocal源码 （<a href="https://blog.csdn.net/sony315/article/details/6766756">用于Spring声明式事务,保证同一个Connection</a>）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ThreadLocal线程局部变量</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadLocal1</span> </span>&#123;<br><span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Person p = <span class="hljs-keyword">new</span> Person();<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br><span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br><br>System.out.println(p.name);<br>&#125;).start();<br><br><span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>p.name = <span class="hljs-string">&quot;lisi&quot;</span>;<br>&#125;).start();<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>String name = <span class="hljs-string">&quot;zhangsan&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ThreadLocal线程局部变量</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * ThreadLocal是使用空间换时间，synchronized是使用时间换空间</span><br><span class="hljs-comment"> * 比如在hibernate中session就存在与ThreadLocal中，避免synchronized的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 运行下面的程序，理解ThreadLocal</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadLocal</span> </span>&#123;<br><span class="hljs-comment">//volatile static Person p = new Person();</span><br><span class="hljs-keyword">static</span> ThreadLocal&lt;Person&gt; tl = <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;();<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br><span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br><br>System.out.println(tl.get());<br>&#125;).start();<br><br><span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>tl.set(<span class="hljs-keyword">new</span> Person());<br>            <span class="hljs-comment">//设置到当前线程的Map中</span><br>&#125;).start();<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>String name = <span class="hljs-string">&quot;zhangsan&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="四、Java引用-强软弱虚"><a href="#四、Java引用-强软弱虚" class="headerlink" title="四、Java引用(强软弱虚)"></a>四、Java引用(强软弱虚)</h5><p>引用：变量指向new</p><p>强引用：new 出对象，永远不被清理</p><p>软引用：内存不够被清空，适合当作缓存</p><p>弱引用：只要遇到GC就会被回收， 一般用作容器内（<a href="https://blog.csdn.net/sanhewuyang/article/details/108062536">WeakHashMap</a>）</p><p>虚引用：管理堆外内存,虚引用被回收，会放到队列中，通知被垃圾回收，永远get不到内部的值</p><p>​                Unsafe类提供堆外内存回收 freeMemory回收堆外内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 垃圾回收会调用，为了查看垃圾回收</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">M</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;finalize&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * new 强引用，不会被垃圾回收</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NormalReference</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        M m = <span class="hljs-keyword">new</span> M();<br>        m = <span class="hljs-keyword">null</span>;<br>        System.gc(); <span class="hljs-comment">//DisableExplicitGC</span><br>        System.in.read(); <span class="hljs-comment">//阻塞当前线程，垃圾回收在别的线程，方便查看</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 软引用：内存不够，清空内存</span><br><span class="hljs-comment"> * 软引用是用来描述一些还有用但并非必须的对象。</span><br><span class="hljs-comment"> * 对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围进行第二次回收。</span><br><span class="hljs-comment"> * 如果这次回收还没有足够的内存，才会抛出内存溢出异常。</span><br><span class="hljs-comment"> * -Xmx20M 分配堆内存</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.lang.ref.SoftReference;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoftReference</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//栈内存m 堆内存SoftReference 软引用10m数组</span><br>        SoftReference&lt;<span class="hljs-keyword">byte</span>[]&gt; m = <span class="hljs-keyword">new</span> SoftReference&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">10</span>]);<br>        <span class="hljs-comment">//m = null;</span><br>        System.out.println(m.get());<br>        System.gc();<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">500</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(m.get());<br><br>        <span class="hljs-comment">//再分配一个数组，heap将装不下，这时候系统会垃圾回收，先回收一次，如果不够，会把软引用干掉</span><br>        <span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">15</span>];<br>        System.out.println(m.get());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//软引用非常适合缓存使用</span><br><br></code></pre></td></tr></table></figure><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1618247031662.png" alt="弱引用"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 弱引用遭到gc就会回收</span><br><span class="hljs-comment"> * m指向弱引用对象 弱弱指向 new M()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.lang.ref.WeakReference;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeakReference</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        WeakReference&lt;M&gt; m = <span class="hljs-keyword">new</span> WeakReference&lt;&gt;(<span class="hljs-keyword">new</span> M());<br><br>        System.out.println(m.get());<br>        System.gc();<br>        System.out.println(m.get());<br>        <br>        ThreadLocal&lt;M&gt; tl = <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;();<br>        tl.set(<span class="hljs-keyword">new</span> M());<br>        tl.remove();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\QianMo\AppData\Roaming\Typora\typora-user-images\1618247652360.png" alt="虚引用"></p><p>堆外内存(直接内存)，直接在操作系统内分配内存，不被JVM控制，NIO新版有直接内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *     一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，</span><br><span class="hljs-comment"> *     也无法通过虚引用来获取一个对象的实例。</span><br><span class="hljs-comment"> *     为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。</span><br><span class="hljs-comment"> *     虚引用和弱引用对关联对象的回收都不会产生影响，如果只有虚引用活着弱引用关联着对象，</span><br><span class="hljs-comment"> *     那么这个对象就会被回收。它们的不同之处在于弱引用的get方法，虚引用的get方法始终返回null,</span><br><span class="hljs-comment"> *     弱引用可以使用ReferenceQueue,虚引用必须配合ReferenceQueue使用。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *     jdk中直接内存的回收就用到虚引用，由于jvm自动内存管理的范围是堆内存，</span><br><span class="hljs-comment"> *     而直接内存是在堆内存之外（其实是内存映射文件，自行去理解虚拟内存空间的相关概念），</span><br><span class="hljs-comment"> *     所以直接内存的分配和回收都是有Unsafe类去操作，java在申请一块直接内存之后，</span><br><span class="hljs-comment"> *     会在堆内存分配一个对象保存这个堆外内存的引用，</span><br><span class="hljs-comment"> *     这个对象被垃圾收集器管理，一旦这个对象被回收，</span><br><span class="hljs-comment"> *     相应的用户线程会收到通知并对直接内存进行清理工作。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *     事实上，虚引用有一个很重要的用途就是用来做堆外内存的释放，</span><br><span class="hljs-comment"> *     DirectByteBuffer就是通过虚引用来实现堆外内存的释放的。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.lang.ref.PhantomReference;<br><span class="hljs-keyword">import</span> java.lang.ref.Reference;<br><span class="hljs-keyword">import</span> java.lang.ref.ReferenceQueue;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PhantomReference</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;Object&gt; LIST = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ReferenceQueue&lt;M&gt; QUEUE = <span class="hljs-keyword">new</span> ReferenceQueue&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        PhantomReference&lt;M&gt; phantomReference = <span class="hljs-keyword">new</span> PhantomReference&lt;&gt;(<span class="hljs-keyword">new</span> M(), QUEUE);<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                LIST.add(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>]);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                    Thread.currentThread().interrupt();<br>                &#125;<br>                System.out.println(phantomReference.get());<br>            &#125;<br>        &#125;).start();<br><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                Reference&lt;? extends M&gt; poll = QUEUE.poll();<br>                <span class="hljs-keyword">if</span> (poll != <span class="hljs-keyword">null</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;--- 虚引用对象被jvm回收了 ---- &quot;</span> + poll);<br>                &#125;<br>            &#125;<br>        &#125;).start();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">500</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;一、ReentrantLock源码（AQS-Template-Method、Callback-Function、父类默认实现、子类具体实现）&quot;&gt;&lt;a href=&quot;#一、ReentrantLock源码（AQS-Template-Method、Callback-Fun</summary>
      
    
    
    
    <category term="多线程与高并发" scheme="https://woshiqianmo.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="多线程与高并发" scheme="https://woshiqianmo.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
</feed>
